# file opened: build.asm
   1  0000              ROM_START		EQU 0x0000			; Start of ROM
   2  0000              BAS_START		EQU	0x4000			; Location of BBC Basic in ROM
   3  0000              RAM_START		EQU 0x8000			; Start of RAM
   4  0000              ;32k RAM
   5  0000              SYS_VARS		EQU	0xFF00			; System variable block
   6  0000              ;16K ram
   7  0000              ;SYS_VARS		EQU	0xBF00			; System variable block
   8  0000
   9  0000              SYS_VARS_RAMTOP		EQU SYS_VARS + 0x00
  10  0000              SYS_VARS_INPUT		EQU	SYS_VARS + 0x02
  11  0000
  12  0000              ;PORT_STM_IO 		EQU	0x00			; The IO port for serial terminal IO - depreciated
  13  0000              ;PORT_STM_FLAGS		EQU	0x07			; Flags - depreciated
  14  0000
  15  0000              BUILD_ROM		EQU 	1			; Set to 1 to build for ROM, or 0 to build for RAM
  16  0000              SKIP_MEMTEST	EQU		0			; Set to 1 to skip the memtest on boot - leave this until proper clock fitted
  17  0000
  18  0000
  19  0000
  20  0000
  21  0000
  22  0000                  IF	BUILD_ROM = 0
  23  0000 ~                ORG	RAM_START
  24  0000                  ELSE
  25  0000                  ORG	ROM_START
  26  0000                  include	"rom.asm"
# file opened: rom.asm
   1+ 0000              ;
   2+ 0000              ; Title:	ROM specific code for Monitor
   3+ 0000              ; Author:	Dean Belfield
   4+ 0000              ; Created:	05/06/2020
   5+ 0000              ; Last Updated:	11/10/2020
   6+ 0000              ;
   7+ 0000              ; Modinfo:
   8+ 0000              ;
   9+ 0000              ; 11/10/2020:	UART mods
  10+ 0000
  11+ 0000                  org $0000
  12+ 0000
  13+ 0000              ; RST 00
  14+ 0000              ;
  15+ 0000 F3           			DI
  16+ 0001 C3 3A 00     			JP Start
  17+ 0004 00 00 00 00  			DS 4
  18+ 0008              ;
  19+ 0008              ; RST 08 - Read char from I/O
  20+ 0008              ;
  21+ 0008 C3 B2 06     			JP Read_Char_NB
  22+ 000B 00 00 00...  			DS 5
  23+ 0010              ;
  24+ 0010              ; RST 10 - Output char to I/O
  25+ 0010              ;
  26+ 0010 C3 A3 52     			JP Print_Char
  27+ 0013 00 00 00...  			DS 5
  28+ 0018              ;
  29+ 0018              ; RST 18
  30+ 0018              ;
  31+ 0018 00 00 00...  			DS 8
  32+ 0020              ;
  33+ 0020              ; RST 20
  34+ 0020              ;
  35+ 0020 00 00 00...  			DS 8
  36+ 0028              ;
  37+ 0028              ; RST 28
  38+ 0028              ;
  39+ 0028 00 00 00...  			DS 8
  40+ 0030              ;
  41+ 0030              ; RST 30
  42+ 0030              ;
  43+ 0030 00 00 00...  			DS 8
  44+ 0038              ;
  45+ 0038              ; RST 38 - NMI
  46+ 0038              ;
  47+ 0038 FB           			EI
  48+ 0039 C9           			RET
  49+ 003A
# file closed: rom.asm
  27  003A                  ENDIF
  28  003A
  29  003A
  30  003A                  include "start.asm"
# file opened: start.asm
   1+ 003A              ;
   2+ 003A              ; Title:        Z80 Monitor for BSX
   3+ 003A              ; Author:       Dean Belfield
   4+ 003A              ; Created:      12/05/2020
   5+ 003A              ; Last Updated: 05/10/2020
   6+ 003A              ;
   7+ 003A              ; Modinfo:
   8+ 003A              ; 22/05/2020:   Moved SYS_VARS to last page of RAM
   9+ 003A              ;               Added B option to jump to BBC Basic
  10+ 003A              ; 28/05/2020:   Added O(ut) and I(n) instructions
  11+ 003A              ;               Added ASCII column for memory dump
  12+ 003A              ; 29/05/2020:   O(ut) instruction now supports Hex and ASCII strings
  13+ 003A              ; 03/06/2020:   Added Z80 disassembler
  14+ 003A              ; 05/10/2020:   Added UART support, source formatting changes
  15+ 003A              ;
  16+ 003A              ;
  17+ 003A              ; Start
  18+ 003A              ;
  19+ 003A
  20+ 003A
  21+ 003A              Start:
  22+ 003A 3E 80                                LD      A, 0x80 			; All ports output A,B and C
  23+ 003C D3 AB        	                    OUT     (PIO_M), A		;
  24+ 003E 3E A0                                LD      A, 0xA0
  25+ 0040 D3 A8                                OUT     (PIO_A), A
  26+ 0042                                      IF      SKIP_MEMTEST = 1
  27+ 0042 ~                                    LD      HL,0x0000
  28+ 0042 ~                                    XOR     A
  29+ 0042 ~                                    JR      3F
  30+ 0042                                      ELSE
  31+ 0042 21 00 80                             LD      HL,RAM_START
  32+ 0045 0E AA                                LD      C, 10101010b
  33+ 0047 71           1:                      LD      (HL),C
  34+ 0048 7E                                   LD      A,(HL)
  35+ 0049 B9                                   CP      C
  36+ 004A 20 09                                JR      NZ,3F
  37+ 004C 23                                   INC     HL
  38+ 004D 7D                                   LD      A,L
  39+ 004E B7                                   OR      A
  40+ 004F 20 00                                JR      NZ,2F
  41+ 0051              ;                       LD      A,"."
  42+ 0051              ;                       OUT     (PORT_STM_IO),A         ; Output progress - no longer works (STM_IO depreciated)
  43+ 0051 7C           2:                      LD      A,H
  44+ 0052 B7                                   OR      A
  45+ 0053 20 F2                                JR      NZ,1B
  46+ 0055                                      ENDIF
  47+ 0055 22 00 FF     3:                      LD      (SYS_VARS_RAMTOP),HL    ; Store last byte of physical RAM in the system variables
  48+ 0058
  49+ 0058 F9                                   LD      SP,HL                   ; Set the stack pointer
  50+ 0059 21 FF FB                             ld      hl, 0xFFFF - 1024
  51+ 005C F9                                   ld      SP,HL
  52+ 005D                                      ;JR      Z,Memtest_OK
  53+ 005D 18 05                                JR      Memtest_OK
  54+ 005F 21 30 03                             LD      HL,MSG_BADRAM
  55+ 0062 18 03                                JR      Ready
  56+ 0064 21 27 03     Memtest_OK:             LD      HL,MSG_READY
  57+ 0067
  58+ 0067 E5           Ready:                  PUSH    HL                      ; Stack the startup error message
  59+ 0068 21 A6 06                             LD      HL,UART_BAUD_38400       ; Baud rate = 9600
  60+ 006B 3E 03                                LD      A,0x03                  ; 8 bits, 1 stop, no parity
  61+ 006D CD 4F 06                             CALL    UART_INIT               ; Initialise the UART
  62+ 0070                                      ;lcd routines
  63+ 0070 CD FF 05                             call    long_pause
  64+ 0073
  65+ 0073 21 F4 02                             LD      HL,MSG_CLEAR
  66+ 0076 CD 9A 52                             CALL    Print_String
  67+ 0079 21 E0 02                             LD      HL,MSG_STARTUP
  68+ 007C CD 9A 52                             CALL    Print_String
  69+ 007F
  70+ 007F CD B5 06                             CALL    message
  71+ 0082 1B 5B 32 4A     	                    db 27,'[2J',27,'[H'
  71+ 0086 1B 5B 48
  72+ 0089 5A 38 30 20                          db 'Z80 Playground Monitor & CP/M Loader v1.03',13,10,0
  72+ 008D 50 6C 61 79
  72+ 0091 67 72 6F 75
  72+ 0095 6E 64 20 4D
  72+ 0099 6F 6E 69 74
  72+ 009D 6F 72 20 26
  72+ 00A1 20 43 50 2F
  72+ 00A5 4D 20 4C 6F
  72+ 00A9 61 64 65 72
  72+ 00AD 20 76 31 2E
  72+ 00B1 30 33 0D 0A
  72+ 00B5 00
  73+ 00B6                                      ; Check MCR
  74+ 00B6 3E 22                                ld a, %00100010
  75+ 00B8 D3 BC                                out (uart_MCR), a
  76+ 00BA CD B5 06                             call message
  77+ 00BD 31 36 43 35                          db '16C550: ',0
  77+ 00C1 35 30 3A 20
  77+ 00C5 00
  78+ 00C6 DB BC                                in a, (uart_MCR)
  79+ 00C8 CD 27 07                             call show_a_as_hex
  80+ 00CB CD D4 05                             call newline
  81+ 00CE
  82+ 00CE CD FF 05                             call    long_pause
  83+ 00D1
  84+ 00D1 CD B5 06                             call message
  85+ 00D4 43 6F 6E 66                          db 'Configure USB Drive...',13,10,0
  85+ 00D8 69 67 75 72
  85+ 00DC 65 20 55 53
  85+ 00E0 42 20 44 72
  85+ 00E4 69 76 65 2E
  85+ 00E8 2E 2E 0D 0A
  85+ 00EC 00
  86+ 00ED CD 2D 11                             call configure_memorystick
  87+ 00F0
  88+ 00F0 CD B5 06                             call message
  89+ 00F3 43 68 65 63                           db 'Check CH376 module exists...',13,10,0
  89+ 00F7 6B 20 43 48
  89+ 00FB 33 37 36 20
  89+ 00FF 6D 6F 64 75
  89+ 0103 6C 65 20 65
  89+ 0107 78 69 73 74
  89+ 010B 73 2E 2E 2E
  89+ 010F 0D 0A 00
  90+ 0112 CD 7E 11                             call check_module_exists
  91+ 0115
  92+ 0115 CD B5 06                             call message
  93+ 0118 47 65 74 20                          db 'Get CH376 module version...',13,10,0
  93+ 011C 43 48 33 37
  93+ 0120 36 20 6D 6F
  93+ 0124 64 75 6C 65
  93+ 0128 20 76 65 72
  93+ 012C 73 69 6F 6E
  93+ 0130 2E 2E 2E 0D
  93+ 0134 0A 00
  94+ 0136 CD D1 11                             call get_module_version
  95+ 0139
  96+ 0139 CD B5 06                             call message
  97+ 013C 54 20 45 20                          db 'T E R M I N O U . . . ',13,10,0
  97+ 0140 52 20 4D 20
  97+ 0144 49 20 4E 20
  97+ 0148 4F 20 55 20
  97+ 014C 2E 20 2E 20
  97+ 0150 2E 20 0D 0A
  97+ 0154 00
  98+ 0155
  99+ 0155                                      ;halt
 100+ 0155
 101+ 0155 3A FF 8F                             ld a, (auto_run_char)
 102+ 0158 FE 00                                cp 0
 103+ 015A CA 74 08                             jp z, start_monitor
 104+ 015D CD B5 06                             call message
 105+ 0160 41 55 54 4F                          db 'AUTO ',0
 105+ 0164 20 00
 106+ 0166 CD 1C 22                             call show_a_safe
 107+ 0169 CD D4 05                             call newline
 108+ 016C C3 74 08                             jp start_monitor
 109+ 016F CD B5 06                             CALL    message
 110+ 0172 1B 5B 32 4A     	                    db 27,'[2J',27,'[H'
 110+ 0176 1B 5B 48
 111+ 0179 5A 38 30 20                          db 'Z80 Playground Monitor & CP/M Loader v1.03',13,10,0
 111+ 017D 50 6C 61 79
 111+ 0181 67 72 6F 75
 111+ 0185 6E 64 20 4D
 111+ 0189 6F 6E 69 74
 111+ 018D 6F 72 20 26
 111+ 0191 20 43 50 2F
 111+ 0195 4D 20 4C 6F
 111+ 0199 61 64 65 72
 111+ 019D 20 76 31 2E
 111+ 01A1 30 33 0D 0A
 111+ 01A5 00
 112+ 01A6 76                                   halt
 113+ 01A7
 114+ 01A7 CD 15 02     InputMenu:              call    Print_Help
 115+ 01AA              InputMenu1:
 116+ 01AA 21 02 FF                             LD      HL,SYS_VARS_INPUT       ; Input buffer
 117+ 01AD 06 00                                LD      B,0                     ; Cursor position
 118+ 01AF CD AC 06     Input_Loop:             CALL    Read_Char               ; Read a key from the keyboard
 119+ 01B2 FE 7F                                CP      0x7F
 120+ 01B4 28 55                                JR      Z,Input_Backspace       ; Handle backspace
 121+ 01B6
 122+ 01B6 CD A3 52                             CALL    Print_Char              ; Output the character
 123+ 01B9 77                                   LD      (HL),A                  ; Store the character in the buffer
 124+ 01BA
 125+ 01BA
 126+ 01BA 23                                   INC     HL                      ; Increment to next character in buffer
 127+ 01BB 04                                   INC     B                       ; Increment the cursor position
 128+ 01BC FE 0D                                CP      0x0D                    ; Check for newline
 129+ 01BE 20 EF                                JR      NZ,Input_Loop           ; If not pressed, then loop
 130+ 01C0
 131+ 01C0 CD 90 52                             CALL    Print_CR                ; Output a carriage return
 132+ 01C3
 133+ 01C3
 134+ 01C3 3A 02 FF                             LD      A,(SYS_VARS_INPUT)      ; Check the first character of input
 135+ 01C6 21 00 02                             LD      HL,Input_Ret            ; Push the return address on the stack
 136+ 01C9 E5                                   PUSH    HL
 137+ 01CA                                      ;CP      'B': JP Z,FN_Basic
 138+ 01CA FE 44                                CP      'D'
 138+ 01CC CA A6 52       JP Z,FN_Disassemble
 139+ 01CF FE 64                                CP      'd'
 139+ 01D1 CA A6 52       JP Z,FN_Disassemble
 140+ 01D4 FE 4D                                CP      'M'
 140+ 01D6 CA 34 5B       JP Z,FN_Memory_Dump
 141+ 01D9 FE 6E                                CP      'n'
 141+ 01DB CA 34 5B       JP Z,FN_Memory_Dump
 142+ 01DE                                      ;CP      'L': JP Z,FN_Memory_Load
 143+ 01DE                                      ;CP      'J': JP Z,FN_Jump
 144+ 01DE                                      ;CP      'O': JP Z,FN_Port_Out
 145+ 01DE                                      ;CP      'I': JP Z,FN_Port_In
 146+ 01DE                                      ;CP      '2': JP Z,FN_I2c
 147+ 01DE FE 3F                                CP      '?'
 147+ 01E0 CA 15 02       JP Z,Print_Help
 148+ 01E3 FE 48                                CP      'H'
 148+ 01E5 CA 15 02       JP Z,Print_Help
 149+ 01E8 FE 68                                CP      'h'
 149+ 01EA CA 15 02       JP Z,Print_Help
 150+ 01ED                                      ;CP      'C': JP Z,BBC_copy
 151+ 01ED FE 52                                CP      'R'
 151+ 01EF C3 1C 18       JP MenuReturn
 152+ 01F2 FE 72                                CP      'r'
 152+ 01F4 C3 1C 18       JP MenuReturn
 153+ 01F7 FE 0D                                CP      0x0D
 154+ 01F9 C8                                   RET     Z
 155+ 01FA 21 44 03                             LD      HL,MSG_INVALID_CMD      ; Unknown command error
 156+ 01FD C3 9A 52                             JP      Print_String
 157+ 0200
 158+ 0200 CD 90 52     Input_Ret:              CALL    Print_CR                ; On return from the function, print a carriage return
 159+ 0203 21 27 03                             LD      HL,MSG_READY            ; And the ready message
 160+ 0206 CD 9A 52                             CALL    Print_String
 161+ 0209 18 9F                                JR      InputMenu1                   ; Loop around for next input line
 162+ 020B
 163+ 020B 78           Input_Backspace:        LD      A,B                     ; Are we on the first character?
 164+ 020C B7                                   OR      A
 165+ 020D 28 A0                                JR      Z,Input_Loop
 166+ 020F 2B                                   DEC     HL                      ; Skip back in the buffer
 167+ 0210 05                                   DEC     B
 168+ 0211 36 00                                LD      (HL),0
 169+ 0213 18 9A                                JR      Input_Loop
 170+ 0215
 171+ 0215              Print_Help:
 172+ 0215 CD D7 21         call clear_screen
 173+ 0218 CD B5 06     	call message
 174+ 021B 0D 0A        	db 13,10
 175+ 021D 1B 5B 34 31  	db 27,'[41m','+------------------+',13,10
 175+ 0221 6D 2B 2D 2D
 175+ 0225 2D 2D 2D 2D
 175+ 0229 2D 2D 2D 2D
 175+ 022D 2D 2D 2D 2D
 175+ 0231 2D 2D 2D 2D
 175+ 0235 2B 0D 0A
 176+ 0238 1B 5B 34 31  	db 27,'[41m','|',27,'[40m','                  ',27,'[41m','|',13,10
 176+ 023C 6D 7C 1B 5B
 176+ 0240 34 30 6D 20
 176+ 0244 20 20 20 20
 176+ 0248 20 20 20 20
 176+ 024C 20 20 20 20
 176+ 0250 20 20 20 20
 176+ 0254 20 1B 5B 34
 176+ 0258 31 6D 7C 0D
 176+ 025C 0A
 177+ 025D 1B 5B 34 31  	db 27,'[41m','|',27,'[40m','     BSX Menu     ',27,'[41m','|',13,10
 177+ 0261 6D 7C 1B 5B
 177+ 0265 34 30 6D 20
 177+ 0269 20 20 20 20
 177+ 026D 42 53 58 20
 177+ 0271 4D 65 6E 75
 177+ 0275 20 20 20 20
 177+ 0279 20 1B 5B 34
 177+ 027D 31 6D 7C 0D
 177+ 0281 0A
 178+ 0282 1B 5B 34 31  	db 27,'[41m','|',27,'[40m','                  ',27,'[41m','|',13,10
 178+ 0286 6D 7C 1B 5B
 178+ 028A 34 30 6D 20
 178+ 028E 20 20 20 20
 178+ 0292 20 20 20 20
 178+ 0296 20 20 20 20
 178+ 029A 20 20 20 20
 178+ 029E 20 1B 5B 34
 178+ 02A2 31 6D 7C 0D
 178+ 02A6 0A
 179+ 02A7 1B 5B 34 31  	db 27,'[41m','+------------------+',27,'[40m',13,10,13,10,0
 179+ 02AB 6D 2B 2D 2D
 179+ 02AF 2D 2D 2D 2D
 179+ 02B3 2D 2D 2D 2D
 179+ 02B7 2D 2D 2D 2D
 179+ 02BB 2D 2D 2D 2D
 179+ 02BF 2B 1B 5B 34
 179+ 02C3 30 6D 0D 0A
 179+ 02C7 0D 0A 00
 180+ 02CA              						;LD      HL,MSG000
 181+ 02CA                                      ;CALL    Print_String
 182+ 02CA 21 87 03                             LD      HL,MSG001
 183+ 02CD CD 9A 52                             CALL    Print_String
 184+ 02D0                                      ;LD      HL,MSG002
 185+ 02D0                                      ;CALL    Print_String
 186+ 02D0                                      ;LD      HL,MSG003
 187+ 02D0                                      ;CALL    Print_String
 188+ 02D0                                      ;LD      HL,MSG004
 189+ 02D0                                      ;CALL    Print_String
 190+ 02D0                                      ;LD      HL,MSG005
 191+ 02D0                                      ;CALL    Print_String
 192+ 02D0                                      ;LD      HL,MSG006
 193+ 02D0                                      ;CALL    Print_String
 194+ 02D0                                      ;LD      HL,MSG007
 195+ 02D0                                      ;CALL    Print_String
 196+ 02D0 21 39 05                             LD      HL,MSG008
 197+ 02D3 CD 9A 52                             CALL    Print_String
 198+ 02D6 21 7E 05                             LD      HL,MSG098
 199+ 02D9 CD 9A 52                             CALL    Print_String
 200+ 02DC CD 00 02                             call    Input_Ret
 201+ 02DF C9                                   RET
 202+ 02E0
 203+ 02E0
 204+ 02E0
 205+ 02E0 42 53 58 20  MSG_STARTUP:            DZ "BSX Version 0.3.1\n\r"
 205+ 02E4 56 65 72 73
 205+ 02E8 69 6F 6E 20
 205+ 02EC 30 2E 33 2E
 205+ 02F0 31 0A 0D 00
 206+ 02F4 0A 0D 0A 0D  MSG_CLEAR:              DZ "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"
 206+ 02F8 0A 0D 0A 0D
 206+ 02FC 0A 0D 0A 0D
 206+ 0300 0A 0D 0A 0D
 206+ 0304 0A 0D 0A 0D
 206+ 0308 0A 0D 0A 0D
 206+ 030C 0A 0D 0A 0D
 206+ 0310 0A 0D 0A 0D
 206+ 0314 0A 0D 0A 0D
 206+ 0318 0A 0D 0A 0D
 206+ 031C 0A 0D 0A 0D
 206+ 0320 0A 0D 0A 0D
 206+ 0324 0A 0D 00
 207+ 0327
 208+ 0327 52 65 61 64  MSG_READY:              DZ "Ready:> "
 208+ 032B 79 3A 3E 20
 208+ 032F 00
 209+ 0330 4D 65 6D 20  MSG_BADRAM:             DZ "Mem Fault\n\r"
 209+ 0334 46 61 75 6C
 209+ 0338 74 0A 0D 00
 210+ 033C 45 72 72 6F  MSG_ERROR:              DZ "Error\n\r"
 210+ 0340 72 0A 0D 00
 211+ 0344 49 6E 76 61  MSG_INVALID_CMD:        DZ "Invalid Command -\n\r"
 211+ 0348 6C 69 64 20
 211+ 034C 43 6F 6D 6D
 211+ 0350 61 6E 64 20
 211+ 0354 2D 0A 0D 00
 212+ 0358 49 6E 76 61  MSG_INVALID_PORT:       DZ "Invalid Port #\n\r"
 212+ 035C 6C 69 64 20
 212+ 0360 50 6F 72 74
 212+ 0364 20 23 0A 0D
 212+ 0368 00
 213+ 0369 56 61 6C 75  MSG_OUT_OF_RANGE:       DZ "Value out of range\n\r"
 213+ 036D 65 20 6F 75
 213+ 0371 74 20 6F 66
 213+ 0375 20 72 61 6E
 213+ 0379 67 65 0A 0D
 213+ 037D 00
 214+ 037E 48 65 6C 70  MSG000: DZ "Help  \n\r"
 214+ 0382 20 20 0A 0D
 214+ 0386 00
 215+ 0387 20 20 2D 20  MSG001: DZ "  - Mnnnn,llll - Memory Hex Dump: Output llll bytes from memory location nnnn \n\r"
 215+ 038B 4D 6E 6E 6E
 215+ 038F 6E 2C 6C 6C
 215+ 0393 6C 6C 20 2D
 215+ 0397 20 4D 65 6D
 215+ 039B 6F 72 79 20
 215+ 039F 48 65 78 20
 215+ 03A3 44 75 6D 70
 215+ 03A7 3A 20 4F 75
 215+ 03AB 74 70 75 74
 215+ 03AF 20 6C 6C 6C
 215+ 03B3 6C 20 62 79
 215+ 03B7 74 65 73 20
 215+ 03BB 66 72 6F 6D
 215+ 03BF 20 6D 65 6D
 215+ 03C3 6F 72 79 20
 215+ 03C7 6C 6F 63 61
 215+ 03CB 74 69 6F 6E
 215+ 03CF 20 6E 6E 6E
 215+ 03D3 6E 20 0A 0D
 215+ 03D7 00
 216+ 03D8 20 20 2D 20  MSG002: DZ "  - Jnnnn - Jump to location nnnn \n\r"
 216+ 03DC 4A 6E 6E 6E
 216+ 03E0 6E 20 2D 20
 216+ 03E4 4A 75 6D 70
 216+ 03E8 20 74 6F 20
 216+ 03EC 6C 6F 63 61
 216+ 03F0 74 69 6F 6E
 216+ 03F4 20 6E 6E 6E
 216+ 03F8 6E 20 0A 0D
 216+ 03FC 00
 217+ 03FD 20 20 2D 20  MSG003: DZ "  - Onn,vv - O(utput) the value vv on Z80 port nn \n\r"
 217+ 0401 4F 6E 6E 2C
 217+ 0405 76 76 20 2D
 217+ 0409 20 4F 28 75
 217+ 040D 74 70 75 74
 217+ 0411 29 20 74 68
 217+ 0415 65 20 76 61
 217+ 0419 6C 75 65 20
 217+ 041D 76 76 20 6F
 217+ 0421 6E 20 5A 38
 217+ 0425 30 20 70 6F
 217+ 0429 72 74 20 6E
 217+ 042D 6E 20 0A 0D
 217+ 0431 00
 218+ 0432 20 20 2D 20  MSG004: DZ "  - Inn,llll - I(nput) llll values from Z80 port nn \n\r"
 218+ 0436 49 6E 6E 2C
 218+ 043A 6C 6C 6C 6C
 218+ 043E 20 2D 20 49
 218+ 0442 28 6E 70 75
 218+ 0446 74 29 20 6C
 218+ 044A 6C 6C 6C 20
 218+ 044E 76 61 6C 75
 218+ 0452 65 73 20 66
 218+ 0456 72 6F 6D 20
 218+ 045A 5A 38 30 20
 218+ 045E 70 6F 72 74
 218+ 0462 20 6E 6E 20
 218+ 0466 0A 0D 00
 219+ 0469 20 20 2D 20  MSG005: DZ "  - L - Put the monitor into Load mode; it will wait for a binary stream of data on port 0 \n\r"
 219+ 046D 4C 20 2D 20
 219+ 0471 50 75 74 20
 219+ 0475 74 68 65 20
 219+ 0479 6D 6F 6E 69
 219+ 047D 74 6F 72 20
 219+ 0481 69 6E 74 6F
 219+ 0485 20 4C 6F 61
 219+ 0489 64 20 6D 6F
 219+ 048D 64 65 3B 20
 219+ 0491 69 74 20 77
 219+ 0495 69 6C 6C 20
 219+ 0499 77 61 69 74
 219+ 049D 20 66 6F 72
 219+ 04A1 20 61 20 62
 219+ 04A5 69 6E 61 72
 219+ 04A9 79 20 73 74
 219+ 04AD 72 65 61 6D
 219+ 04B1 20 6F 66 20
 219+ 04B5 64 61 74 61
 219+ 04B9 20 6F 6E 20
 219+ 04BD 70 6F 72 74
 219+ 04C1 20 30 20 0A
 219+ 04C5 0D 00
 220+ 04C7 20 20 2D 20  MSG006: DZ "  - B - Jump to address 0x4000 (where BBC Basic can be loaded) \n\r"
 220+ 04CB 42 20 2D 20
 220+ 04CF 4A 75 6D 70
 220+ 04D3 20 74 6F 20
 220+ 04D7 61 64 64 72
 220+ 04DB 65 73 73 20
 220+ 04DF 30 78 34 30
 220+ 04E3 30 30 20 28
 220+ 04E7 77 68 65 72
 220+ 04EB 65 20 42 42
 220+ 04EF 43 20 42 61
 220+ 04F3 73 69 63 20
 220+ 04F7 63 61 6E 20
 220+ 04FB 62 65 20 6C
 220+ 04FF 6F 61 64 65
 220+ 0503 64 29 20 0A
 220+ 0507 0D 00
 221+ 0509 20 20 2D 20  MSG007: DZ "  - 2nn - Send this data to standard I2C chip\n\r"
 221+ 050D 32 6E 6E 20
 221+ 0511 2D 20 53 65
 221+ 0515 6E 64 20 74
 221+ 0519 68 69 73 20
 221+ 051D 64 61 74 61
 221+ 0521 20 74 6F 20
 221+ 0525 73 74 61 6E
 221+ 0529 64 61 72 64
 221+ 052D 20 49 32 43
 221+ 0531 20 63 68 69
 221+ 0535 70 0A 0D 00
 222+ 0539 20 20 2D 20  MSG008: DZ "  - Dnnnn,llll - Disassemble llll bytes from memory location nnnn \n\r"
 222+ 053D 44 6E 6E 6E
 222+ 0541 6E 2C 6C 6C
 222+ 0545 6C 6C 20 2D
 222+ 0549 20 44 69 73
 222+ 054D 61 73 73 65
 222+ 0551 6D 62 6C 65
 222+ 0555 20 6C 6C 6C
 222+ 0559 6C 20 62 79
 222+ 055D 74 65 73 20
 222+ 0561 66 72 6F 6D
 222+ 0565 20 6D 65 6D
 222+ 0569 6F 72 79 20
 222+ 056D 6C 6F 63 61
 222+ 0571 74 69 6F 6E
 222+ 0575 20 6E 6E 6E
 222+ 0579 6E 20 0A 0D
 222+ 057D 00
 223+ 057E 20 20 2D 20  MSG098: DZ "  - ? or H - Show this help \n\r"
 223+ 0582 3F 20 6F 72
 223+ 0586 20 48 20 2D
 223+ 058A 20 53 68 6F
 223+ 058E 77 20 74 68
 223+ 0592 69 73 20 68
 223+ 0596 65 6C 70 20
 223+ 059A 0A 0D 00
 224+ 059D
# file closed: start.asm
  31  059D                  include "ppi.asm"
# file opened: ppi.asm
   1+ 059D
   2+ 059D              PIO_A	equ	0xA8		; CA80 user 8255 base address 	  (port A)
   3+ 059D              PIO_B	equ	0xA9		; CA80 user 8255 base address + 1 (port B)
   4+ 059D              PIO_C	equ	0xAA		; CA80 user 8255 base address + 2 (fport C)
   5+ 059D              PIO_M	equ	0xAB		; CA80 user 8255 control register
   6+ 059D
   7+ 059D
   8+ 059D              INIT_PIO:
   9+ 059D 3E 80                	LD      A, 0x80 			; All ports output A,B and C
  10+ 059F D3 AB        	        OUT     (PIO_M), A		;
  11+ 05A1 C9                       RET
  12+ 05A2
  13+ 05A2              WRITE_PORTA:
  14+ 05A2 D3 A8                    OUT     (PIO_A), A
  15+ 05A4 C9                       RET
  16+ 05A5
  17+ 05A5              WRITE_PORTB:
  18+ 05A5 D3 A9                    OUT     (PIO_B), A
  19+ 05A7 C9                       RET
  20+ 05A8
  21+ 05A8              WRITE_PORTC:
  22+ 05A8 D3 AA                    OUT     (PIO_C), A
  23+ 05AA C9                       RET
# file closed: ppi.asm
  32  05AB                  include "uart.asm"
# file opened: uart.asm
   1+ 05AB              ; uart routines
   2+ 05AB              ; These are routines connected with the 16C550 uart.
   3+ 05AB
   4+ 05AB              unimplemented_start_monitor:
   5+ 05AB              ; Not implemented yet
   6+ 05AB C9           	ret
   7+ 05AC
   8+ 05AC              ; Initialises the 16c550c UART for input/output
   9+ 05AC              configure_uart:
  10+ 05AC              ; Configure the UART 16550 after a reset.
  11+ 05AC              ; For the sake of definitely getting the job done, let's pause here for ages before doing it.
  12+ 05AC              ; Without this pause the Z80 can get started before the UART is ready.
  13+ 05AC              ; Don't ask me how I know this.
  14+ 05AC              ;
  15+ 05AC              ; Pass in the required BAUD rate divisor in b.
  16+ 05AC              ; Pass in the required hardware flow control in c.
  17+ 05AC C5           	push bc
  18+ 05AD CD 04 06     	call medium_pause
  19+ 05B0 C1           	pop bc
  20+ 05B1
  21+ 05B1 3E 80        	ld a, 80H                     ; Go into "Divisor Latch Setting mode"
  22+ 05B3 D3 BB        	out (uart_LCR), a             ; by writing 1 into bit 7 of the Line Control register
  23+ 05B5 00           	nop                           ; These tiny "nop" pauses probably do nothing. TODO: Try removing them!
  24+ 05B6
  25+ 05B6              ; Configure UART baud rate divisor for 7.3728 MHz xtal
  26+ 05B6              ; $01 = 460,800 (My favourite baud rate!)
  27+ 05B6              ; $02 = 230,400
  28+ 05B6              ; $04 = 115,200
  29+ 05B6              ; $08 =  57,600
  30+ 05B6              ; $0C =  38,400
  31+ 05B6              ; $18 =  19,200
  32+ 05B6              ; $20 =  14,400
  33+ 05B6              ; $30 =   9,600
  34+ 05B6
  35+ 05B6 78           	ld a, b                       ; low byte of divisor
  36+ 05B7 D3 B8        	out (uart_tx_rx), a
  37+ 05B9 00           	nop
  38+ 05BA 3E 00        	ld a, 0                       ; high byte
  39+ 05BC D3 B9        	out (uart_IER), a
  40+ 05BE 00           	nop
  41+ 05BF
  42+ 05BF 3E 03        	ld a, 03H                     ; Configure stop bits etc, and exit
  43+ 05C1              ; "Divisor latch setting mode"
  44+ 05C1
  45+ 05C1 D3 BB        	out (uart_LCR), a             ; 8 bits, no parity, 1 stop bit, bit 7 = 0
  46+ 05C3 00           	nop                           ; a slight pause to allow the UART to get going
  47+ 05C4
  48+ 05C4 3E 81        	ld a, %10000001               ; Turn on FIFO, with trigger level of 8.
  49+ 05C6 D3 BA        	out (uart_ISR), a             ; This definitely helps receive 16 chars very fast!
  50+ 05C8
  51+ 05C8 79           	ld a, c
  52+ 05C9 FE 00        	cp 0
  53+ 05CB 28 04        	jr z, flowcontrol_done
  54+ 05CD
  55+ 05CD 3E 22        	ld a, %00100010
  56+ 05CF D3 BC        	out (uart_MCR), a             ; Enable auto flow control for /RTS and /CTS
  57+ 05D1
  58+ 05D1              flowcontrol_done:
  59+ 05D1 00           	nop
  60+ 05D2 00           	nop
  61+ 05D3 C9           	ret
  62+ 05D4
  63+ 05D4              ; Print A to the screen as an ASCII character, preserving all registers.
  64+ 05D4              ;print_a:
  65+ 05D4              ;	call	UART_TX
  66+ 05D4              ;	ret
  67+ 05D4
  68+ 05D4
  69+ 05D4              newline:
  70+ 05D4 3E 0D        	ld a, 13
  71+ 05D6 CD 6A 06     	call print_a
  72+ 05D9 3E 0A        	ld a, 10
  73+ 05DB CD 6A 06     	call print_a
  74+ 05DE C9           	ret
  75+ 05DF
  76+ 05DF              space:
  77+ 05DF 3E 20        	ld a, 32
  78+ 05E1 CD 6A 06     	call print_a
  79+ 05E4 C9           	ret
  80+ 05E5
  81+ 05E5              ; To receive a char over Serial we need to check if there is one. If not we return 0.
  82+ 05E5              ; If there is, we get it and return it (in a).
  83+ 05E5              char_in:
  84+ 05E5 DB BD        	in a, (uart_LSR)              ; get status from Line Status Register
  85+ 05E7 CB 47        	bit 0, a                      ; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
  86+ 05E9              ; "logic 0 = no data in receive holding register."
  87+ 05E9 CA EF 05     	jp z, char_in1                ; zero = no char received
  88+ 05EC DB B8        	in a, (uart_tx_rx)            ; Get the incoming char
  89+ 05EE C9           	ret                           ; Return it in A
  90+ 05EF              char_in1:
  91+ 05EF 3E 00        	ld a, 0                       ; Return a zero in A
  92+ 05F1 C9           	ret
  93+ 05F2
  94+ 05F2              char_available:
  95+ 05F2 DB BD        	in a, (uart_LSR)              ; get status from Line Status Register
  96+ 05F4 CB 47        	bit 0, a                      ; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
  97+ 05F6              ; "logic 0 = no data in receive holding register."
  98+ 05F6 CA FC 05     	jp z, char_available1         ; zero = no char received
  99+ 05F9 3E FF        	ld a, $FF                     ; return true
 100+ 05FB C9           	ret                           ; in A
 101+ 05FC              char_available1:
 102+ 05FC 3E 00        	ld a, 0                       ; Return a zero in A
 103+ 05FE C9           	ret
 104+ 05FF
 105+ 05FF
 106+ 05FF              long_pause:
 107+ 05FF 01 E8 FD     	ld bc, 65000
 108+ 0602 18 08        	jr pause0
 109+ 0604              medium_pause:
 110+ 0604 01 C8 AF     	ld bc, 45000
 111+ 0607 18 03        	jr pause0
 112+ 0609              short_pause:
 113+ 0609 01 64 00     	ld bc, 100
 114+ 060C              pause0:
 115+ 060C 0B           	dec bc
 116+ 060D 78           	ld a, b
 117+ 060E B1           	or c
 118+ 060F C2 0C 06     	jp nz, pause0
 119+ 0612 C9           	ret
 120+ 0613
 121+ 0613              disk_toggle:
 122+ 0613 DB BC        	in a, (uart_MCR)
 123+ 0615 E6 04        	and %00000100
 124+ 0617 28 07        	jr z, disk_on
 125+ 0619              ; fall through to...
 126+ 0619              disk_off:
 127+ 0619              ; disk light off
 128+ 0619 DB BC        	in a, (uart_MCR)
 129+ 061B E6 FB        	and %11111011
 130+ 061D D3 BC        	out (uart_MCR), a
 131+ 061F C9           	ret
 132+ 0620
 133+ 0620              disk_on:
 134+ 0620              ; disk light on
 135+ 0620 DB BC        	in a, (uart_MCR)
 136+ 0622 F6 04        	or %00000100
 137+ 0624 D3 BC        	out (uart_MCR), a
 138+ 0626 C9           	ret
 139+ 0627
 140+ 0627              user_on:
 141+ 0627              ; user light on
 142+ 0627 DB BC        	in a, (uart_MCR)
 143+ 0629 F6 01        	or %00000001
 144+ 062B D3 BC        	out (uart_MCR), a
 145+ 062D C9           	ret
 146+ 062E
 147+ 062E              user_toggle:
 148+ 062E              ; user1 light invert
 149+ 062E DB BC        	in a, (uart_MCR)
 150+ 0630 E6 01        	and %00000001
 151+ 0632 28 F3        	jr z, user_on
 152+ 0634              ; fall through to...
 153+ 0634              user_off:
 154+ 0634              ; user light off
 155+ 0634 DB BC        	in a, (uart_MCR)
 156+ 0636 E6 FE        	and %11111110
 157+ 0638 D3 BC        	out (uart_MCR), a
 158+ 063A C9           	ret
 159+ 063B
 160+ 063B              rom_toggle:
 161+ 063B DB BC        	in a, (uart_MCR)
 162+ 063D E6 08        	and %00001000
 163+ 063F 28 07        	jr z, rom_off
 164+ 0641              ; fall through to...
 165+ 0641              rom_on:
 166+ 0641              ; rom light on
 167+ 0641 DB BC        	in a, (uart_MCR)
 168+ 0643 E6 F7        	and %11110111
 169+ 0645 D3 BC        	out (uart_MCR), a
 170+ 0647 C9           	ret
 171+ 0648
 172+ 0648              rom_off:
 173+ 0648              ; rom light off
 174+ 0648 DB BC        	in a, (uart_MCR)
 175+ 064A F6 08        	or %00001000
 176+ 064C D3 BC        	out (uart_MCR), a
 177+ 064E C9           	ret
 178+ 064F
 179+ 064F              	include "port_numbers.asm"
# file opened: port_numbers.asm
   1++064F              ; port_numbers.asm
   2++064F
   3++064F              ; Here are the port numbers for various UART registers:
   4++064F              uart_tx_rx 		equ   0xB8 	;8
   5++064F              uart_IER 		equ   0xB9 	;9
   6++064F              uart_ISR 		equ   0xBA  ;10           ; Also known as FCR
   7++064F              uart_LCR 		equ   0xBB  ;11
   8++064F              uart_MCR 		equ   0xBC  ;12           ; modem control reg
   9++064F              uart_LSR 		equ   0xBD  ;13
  10++064F              uart_MSR 		equ   0xBE  ;14
  11++064F              uart_scratch 	equ   0xBF  ;15
  12++064F
# file closed: port_numbers.asm
 180+ 064F
# file closed: uart.asm
  33  064F                  include "uart1.asm"
# file opened: uart1.asm
   1+ 064F              ;
   2+ 064F              ; Title:	TL16C550CN UART code
   3+ 064F              ; Author:       Dean Belfield
   4+ 064F              ; Created:      12/05/2020
   5+ 064F              ; Co Author:	Paulo da Silva(pdsilva | pgordao)
   6+ 064F              ; Since:		03/07/2022
   7+ 064F              ; Last Updated:	03/07/2022
   8+ 064F              ;
   9+ 064F              ; Modinfo:
  10+ 064F              ;
  11+ 064F
  12+ 064F              UART_PORT:		EQU	0xB8		; UART Z80 port base address
  13+ 064F              UART_BAUD:		EQU	115200		; Maximum baud rate
  14+ 064F              UART_FREQUENCY: EQU 19660800	; 82C50 | 16C550 CLOCK
  15+ 064F
  16+ 064F              UART_REG_RBR:		EQU	UART_PORT+0	; Receive buffer
  17+ 064F              UART_REG_THR:		EQU	UART_PORT+0	; Transmitter holding
  18+ 064F              UART_REG_DLL:		EQU	UART_PORT+0	; Divisor latch low
  19+ 064F              UART_REG_IER:		EQU	UART_PORT+1	; Interrupt enable
  20+ 064F              UART_REG_DLH:		EQU	UART_PORT+1	; Divisor latch high
  21+ 064F              UART_REG_IIR:		EQU	UART_PORT+2	; Interrupt identification
  22+ 064F              UART_REG_LCR:		EQU	UART_PORT+3	; Line control
  23+ 064F              UART_REG_MCR:		EQU	UART_PORT+4	; Modem control
  24+ 064F              UART_REG_LSR:		EQU	UART_PORT+5	; Line status
  25+ 064F              UART_REG_MSR:		EQU	UART_PORT+6	; Modem status
  26+ 064F              UART_REG_SCR:		EQU UART_PORT+7	; Scratch
  27+ 064F
  28+ 064F              UART_TX_WAIT		EQU	600		; Count before a TX times out
  29+ 064F
  30+ 064F              ; HL: Address in baud rate table
  31+ 064F              ;  A: Flow control bits
  32+ 064F              ;
  33+ 064F F5           UART_INIT:	PUSH	AF
  34+ 0650 7E           			LD		A,(HL)
  35+ 0651 23           			INC 	HL
  36+ 0652 66           			LD		H,(HL)
  37+ 0653 6F           			LD 		L,A
  38+ 0654 3E 00        			LD		A,0x00
  38+ 0656 D3 B9          OUT (UART_REG_IER),A	; Disable interrupts
  39+ 0658 3E 80        			LD		A,0x80
  39+ 065A D3 BB          OUT (UART_REG_LCR),A 	; Turn DLAB on
  40+ 065C 7D           			LD		A,L
  40+ 065D D3 B8         	OUT (UART_REG_DLL),A	; Set divisor low
  41+ 065F 7C           			LD		A,H
  41+ 0660 D3 B9         	OUT (UART_REG_DLH),A	; Set divisor high
  42+ 0662 F1           			POP		AF
  42+ 0663 D3 BB         		OUT (UART_REG_LCR),A	; Write out flow control bits
  43+ 0665 3E 81        			LD 		A, 0x81							; Turn on FIFO, with trigger level of 8.
  44+ 0667 D3 BA        			OUT (UART_REG_IIR), A					; This turn on the 16bytes buffer!
  45+ 0669 C9           			RET
  46+ 066A
  47+ 066A              ; A: Data to write
  48+ 066A              ; Returns:
  49+ 066A              ; F = C if written
  50+ 066A              ; F = NC if timed out
  51+ 066A              ;
  52+ 066A              print_a:
  53+ 066A E5           UART_TX:	PUSH 	HL
  54+ 066B D5           			PUSH 	DE
  55+ 066C C5           			PUSH	BC						; Stack BC
  56+ 066D F5           			PUSH	AF 						; Stack AF
  57+ 066E 06 58        			LD	B,low  UART_TX_WAIT			; Set CB to the transmit timeout
  58+ 0670 0E 02        			LD	C,high UART_TX_WAIT
  59+ 0672 DB BD        1:			IN	A,(UART_REG_LSR)			; Get the line status register
  60+ 0674 E6 60        			AND 	0x60					; Check for TX empty
  61+ 0676 20 0B        			JR	NZ,2F						; If set, then TX is empty, goto transmit
  62+ 0678 10 F8        			DJNZ	1B
  62+ 067A 0D             DEC	C
  62+ 067B 20 F5          JR NZ,1B		; Otherwise loop
  63+ 067D F1           			POP	AF							; We've timed out at this point so
  64+ 067E B7           			OR	A							; Clear the carry flag and preserve A
  65+ 067F C1           			POP	BC							; Restore the stack
  66+ 0680 D1           			POP DE
  67+ 0681 E1           			POP	HL
  68+ 0682 C9           			RET
  69+ 0683 F1           2:			POP	AF							; Good to send at this point, so
  70+ 0684 D3 B8        			OUT	(UART_REG_THR),A			; Write the character to the UART transmit buffer
  71+ 0686 CD 8E 06     			call	delay2
  72+ 0689 C1           			POP	BC							; Restore the stack
  73+ 068A D1           			POP DE
  74+ 068B E1           			POP	HL
  75+ 068C 37           			SCF								; Set the carry flag
  76+ 068D C9           			RET
  77+ 068E
  78+ 068E              ;******************************************************************
  79+ 068E              ; This routine delay 746us
  80+ 068E              delay2:
  81+ 068E F5           			PUSH   AF
  82+ 068F 3E FF        			LD     A, 0xFF
  83+ 0691 3D           delay2loop: DEC    A
  84+ 0692 C2 91 06     			JP     NZ, delay2loop  ; JUMP TO DELAYLOOP2 IF A <> 0.
  85+ 0695 F1           			POP    AF
  86+ 0696 C9           			RET
  87+ 0697
  88+ 0697              ; A: Data read
  89+ 0697              ; Returns:
  90+ 0697              ; F = C if character read
  91+ 0697              ; F = NC if no character read
  92+ 0697              ;
  93+ 0697 DB BD        UART_RX:	IN	A,(UART_REG_LSR)		; Get the line status register
  94+ 0699 E6 01        			AND 	0x01				; Check for characters in buffer
  95+ 069B C8           			ret	Z					; Just ret (with carry clear) if no characters
  96+ 069C DB B8        			IN	A,(UART_REG_RBR)		; Read the character from the UART receive buffer
  97+ 069E 37           			SCF 						; Set the carry flag
  98+ 069F C9           			RET
  99+ 06A0
 100+ 06A0              ; Baudrates
 101+ 06A0              ;
 102+ 06A0 80 00        UART_BAUD_9600:		DW	UART_FREQUENCY/(9600 * 16)
 103+ 06A2 55 00        UART_BAUD_14400:	DW	UART_FREQUENCY/(14400 * 16)
 104+ 06A4 40 00        UART_BAUD_19200:	DW	UART_FREQUENCY/(19200 * 16)
 105+ 06A6 20 00        UART_BAUD_38400:	DW	UART_FREQUENCY/(38400 * 16)
 106+ 06A8 15 00        UART_BAUD_57600:	DW	UART_FREQUENCY/(57600 * 16)
 107+ 06AA 0A 00        UART_BAUD_115200:	DW	UART_FREQUENCY/(115200 * 16)
 108+ 06AC
 109+ 06AC
 110+ 06AC
 111+ 06AC              ; Read a character - waits for input
 112+ 06AC              ; NB is the non-blocking variant
 113+ 06AC              ;  A: ASCII character read
 114+ 06AC              ;  F: NC if no character read (non-blocking)
 115+ 06AC              ;  F:  C if character read (non-blocking)
 116+ 06AC              ;
 117+ 06AC CD 97 06     Read_Char:              CALL    UART_RX
 118+ 06AF 30 FB                                JR      NC,Read_Char
 119+ 06B1 C9                                   RET
 120+ 06B2              ; Read a character - NO waits for input
 121+ 06B2              ; NB is the non-blocking variant
 122+ 06B2              ;  A: ASCII character read
 123+ 06B2              ;  F: NC if no character read (non-blocking)
 124+ 06B2              ;  F:  C if character read (non-blocking)
 125+ 06B2 C3 97 06     Read_Char_NB:           JP      UART_RX
# file closed: uart1.asm
  34  06B5                  include "message.asm"
# file opened: message.asm
   1+ 06B5              ; message
   2+ 06B5
   3+ 06B5              ; -------------------------------------------------------------------------------------------------
   4+ 06B5
   5+ 06B5              message:
   6+ 06B5 E3           	ex (sp), hl                   ; top of stack is now mangled, but hl is pointing to our message
   7+ 06B6 F5           	push	af
   8+ 06B7 C5           	push	bc
   9+ 06B8 D5           	push	de
  10+ 06B9
  11+ 06B9              message_loop_001:
  12+ 06B9 7E           	ld a, (hl)
  13+ 06BA FE 00        	cp 0
  14+ 06BC 28 06        	jr z, message_complete_001
  15+ 06BE 23           	inc hl
  16+ 06BF CD 6A 06     	call print_a                  ; print a character (Mangles 2 items below top of stack)
  17+ 06C2 18 F5        	jr message_loop_001               ; Loop until done
  18+ 06C4
  19+ 06C4              message_complete_001:
  20+ 06C4 D1           	pop de
  21+ 06C5 C1           	pop bc
  22+ 06C6 F1           	pop af
  23+ 06C7 23           	inc hl
  24+ 06C8 E3           	ex (sp), hl
  25+ 06C9 C9           	ret
  26+ 06CA
  27+ 06CA
  28+ 06CA
  29+ 06CA
  30+ 06CA
  31+ 06CA              ; Use this handy helper function to display an inline message easily.
  32+ 06CA              ; It preserves all registers (which was tricky to do).
  33+ 06CA              ; This expects to be called from code where the message follows the "call debug" in-line, like this:
  34+ 06CA              ;
  35+ 06CA              ; ld a, 10 ; (or whatever code you like)
  36+ 06CA              ; call message
  37+ 06CA              ; db "my message", 0
  38+ 06CA              ; ld b, 10 ; (or whatever code you like)
  39+ 06CA              ;
  40+ 06CA              ; When we return we make sure sp is pointing to the next line of code after the message.
  41+ 06CA
  42+ 06CA              ; sp -> ret-addr
  43+ 06CA
  44+ 06CA F5           	push af                       ; We have stored af
  45+ 06CB F5           	push af                       ; We do this 3 times
  46+ 06CC F5           	push af                       ; to allow spare stack space.
  47+ 06CD              ; sp -> AF, AF, AF, ret-addr
  48+ 06CD C5           	push bc                       ; sp -> BC, AF, AF, AF, ret-addr
  49+ 06CE D5           	push de                       ; sp -> DE, BC, AF, AF, AF, ret-addr
  50+ 06CF E5           	push hl                       ; sp -> HL, DE, BC, AF, AF, AF, ret-addr
  51+ 06D0
  52+ 06D0 33           	inc sp
  53+ 06D1 33           	inc sp                        ; adjust the stack to overlook the stored afx3, BC, DE & HL
  54+ 06D2              ; HL, sp -> DE, BC, AF, AF, AF, ret-addr
  55+ 06D2 33           	inc sp
  56+ 06D3 33           	inc sp                        ; HL, DE, sp -> BC, AF, AF, AF, ret-addr
  57+ 06D4
  58+ 06D4 33           	inc sp
  59+ 06D5 33           	inc sp                        ; HL, DE, BC, sp -> AF, AF, AF, ret-addr
  60+ 06D6
  61+ 06D6 33           	inc sp
  62+ 06D7 33           	inc sp
  63+ 06D8
  64+ 06D8 33           	inc sp
  65+ 06D9 33           	inc sp
  66+ 06DA
  67+ 06DA 33           	inc sp
  68+ 06DB 33           	inc sp                        ; HL, DE, BC, AF, AF, AF, sp -> ret-addr
  69+ 06DC
  70+ 06DC E3           	ex (sp), hl                   ; top of stack is now mangled, but hl is pointing to our message
  71+ 06DD              ; HL, DE, BC, AF, AF, AF, sp -> HL
  72+ 06DD
  73+ 06DD              message_loop:
  74+ 06DD 7E           	ld a, (hl)
  75+ 06DE FE 00        	cp 0
  76+ 06E0 28 06        	jr z, message_complete
  77+ 06E2 23           	inc hl
  78+ 06E3 CD 6A 06     	call print_a                  ; print a character (Mangles 2 items below top of stack)
  79+ 06E6 18 F5        	jr message_loop               ; Loop until done
  80+ 06E8              ; HL, DE, BC, AF, XX, XX, sp -> HL
  81+ 06E8
  82+ 06E8              message_complete:
  83+ 06E8 23           	inc hl
  84+ 06E9 E3           	ex (sp), hl                   ; restore top of stack, after we have incremented it so it points to the subsequent instruction
  85+ 06EA              ; HL, DE, BC, AF, XX, XX, sp -> new-ret-addr
  86+ 06EA 3B           	dec sp
  87+ 06EB 3B           	dec sp
  88+ 06EC
  89+ 06EC 3B           	dec sp
  90+ 06ED 3B           	dec sp
  91+ 06EE
  92+ 06EE 3B           	dec sp
  93+ 06EF 3B           	dec sp                        ; adjust stack because of our pushed "af"
  94+ 06F0              ; HL, DE, BC, sp -> AF, XX, XX, new-ret-addr
  95+ 06F0 3B           	dec sp
  96+ 06F1 3B           	dec sp                        ; adjust stack because of our pushed "BC"
  97+ 06F2              ; HL, DE, sp -> BC, AF, XX, XX, new-ret-addr
  98+ 06F2 3B           	dec sp
  99+ 06F3 3B           	dec sp                        ; adjust stack because of our pushed "DE"
 100+ 06F4              ; HL, sp -> DE, BC, AF, XX, XX, new-ret-addr
 101+ 06F4 3B           	dec sp
 102+ 06F5 3B           	dec sp                        ; adjust stack because of our pushed "HL"
 103+ 06F6              ; sp -> HL, DE, BC, AF, XX, XX, new-ret-addr
 104+ 06F6
 105+ 06F6 E1           	pop hl                        ; HL is restored
 106+ 06F7              ; sp -> DE, BC, AF, XX, XX, new-ret-addr
 107+ 06F7 D1           	pop de                        ; DE is restored
 108+ 06F8              ; sp -> BC, AF, XX, XX, new-ret-addr
 109+ 06F8 C1           	pop bc                        ; BC is restored
 110+ 06F9              ; sp -> AF, XX, XX, new-ret-addr
 111+ 06F9 F1           	pop af                        ; we have restored af
 112+ 06FA              ; sp -> XX, XX, new-ret-addr
 113+ 06FA
 114+ 06FA 33           	inc sp
 115+ 06FB 33           	inc sp
 116+ 06FC 33           	inc sp
 117+ 06FD 33           	inc sp
 118+ 06FE              ; sp -> new-ret-addr
 119+ 06FE
 120+ 06FE C9           	ret                           ; return to the instruction after the message
 121+ 06FF
 122+ 06FF
 123+ 06FF              msg:
 124+ 06FF C5           	push bc
 125+ 0700 D5           	push de
 126+ 0701 F5           	push af
 127+ 0702              message_loop1:
 128+ 0702 7E           	ld a, (hl)
 129+ 0703 FE 00        	cp 0
 130+ 0705 28 06        	jr z, msg_complete
 131+ 0707 23           	inc hl
 132+ 0708 CD 6A 06     	call UART_TX                  ; print a character (Mangles 2 items below top of stack)
 133+ 070B 18 F5        	jr message_loop1               ; Loop until done
 134+ 070D              msg_complete:
 135+ 070D F1           	pop af
 136+ 070E D1           	pop de
 137+ 070F C1           	pop bc
 138+ 0710 C9           	ret
 139+ 0711
 140+ 0711
 141+ 0711              show_hl_as_hex:
 142+ 0711 CD B5 06     	call message
 143+ 0714 5B 41 20 56  	db '[A VLR] ', 13, 10
 143+ 0718 4C 52 5D 20
 143+ 071C 0D 0A
 144+ 071E 7C           	ld a, h
 145+ 071F CD 27 07     	call show_a_as_hex
 146+ 0722 7D           	ld a, l
 147+ 0723 CD 27 07     	call show_a_as_hex
 148+ 0726 C9           	ret
 149+ 0727
 150+ 0727              show_a_as_hex:
 151+ 0727 F5           	push af
 152+ 0728 CB 3F        	srl a
 153+ 072A CB 3F        	srl a
 154+ 072C CB 3F        	srl a
 155+ 072E CB 3F        	srl a
 156+ 0730 C6 30        	add a, '0'
 157+ 0732 FE 3A        	cp ':'
 158+ 0734 38 02        	jr c, show_a_as_hex1
 159+ 0736 C6 07        	add a, 7
 160+ 0738              show_a_as_hex1:
 161+ 0738 CD 6A 06     	call print_a
 162+ 073B F1           	pop af
 163+ 073C E6 0F        	and %00001111
 164+ 073E C6 30        	add a, '0'
 165+ 0740 FE 3A        	cp ':'
 166+ 0742 38 02        	jr c, show_a_as_hex2
 167+ 0744 C6 07        	add a, 7
 168+ 0746              show_a_as_hex2:
 169+ 0746 CD 6A 06     	call print_a
 170+ 0749 C9           	ret
 171+ 074A
 172+ 074A              ; ---------------------------------------------------
 173+ 074A              ; show_all shows all the CPU registers!
 174+ 074A
 175+ 074A              show_all:
 176+ 074A ED 73 A9 07  	ld (store_sp), sp
 177+ 074E F5           	push af
 178+ 074F E5           	push hl
 179+ 0750 D5           	push de
 180+ 0751 C5           	push bc
 181+ 0752
 182+ 0752 CD B5 06     	call message
 183+ 0755 41 3D 00     	db 'A=', 0
 184+ 0758 CD 27 07     	call show_a_as_hex
 185+ 075B
 186+ 075B E1           	pop hl
 187+ 075C CD B5 06     	call message
 188+ 075F 2C 20 42 43  	db ', BC=', 0
 188+ 0763 3D 00
 189+ 0765 CD 11 07     	call show_hl_as_hex
 190+ 0768 C5           	push bc
 191+ 0769
 192+ 0769 C1           	pop bc
 193+ 076A E1           	pop hl
 194+ 076B CD B5 06     	call message
 195+ 076E 2C 20 44 45  	db ', DE=', 0
 195+ 0772 3D 00
 196+ 0774 CD 11 07     	call show_hl_as_hex
 197+ 0777 D5           	push de
 198+ 0778 C5           	push bc
 199+ 0779
 200+ 0779 C1           	pop bc
 201+ 077A D1           	pop de
 202+ 077B E1           	pop hl
 203+ 077C CD B5 06     	call message
 204+ 077F 2C 20 48 4C  	db ', HL=', 0
 204+ 0783 3D 00
 205+ 0785 CD 11 07     	call show_hl_as_hex
 206+ 0788 E5           	push hl
 207+ 0789 D5           	push de
 208+ 078A C5           	push bc
 209+ 078B
 210+ 078B CD B5 06     	call message
 211+ 078E 2C 20 53 50  	db ', SP=', 0
 211+ 0792 3D 00
 212+ 0794 2A A9 07     	ld hl, (store_sp)
 213+ 0797 CD 11 07     	call show_hl_as_hex
 214+ 079A
 215+ 079A 3E 0D        	ld a, 13
 216+ 079C CD 6A 06     	call print_a
 217+ 079F 3E 0A        	ld a, 10
 218+ 07A1 CD 6A 06     	call print_a
 219+ 07A4
 220+ 07A4 C1           	pop bc
 221+ 07A5 D1           	pop de
 222+ 07A6 E1           	pop hl
 223+ 07A7 F1           	pop af
 224+ 07A8 C9           	ret
 225+ 07A9
 226+ 07A9              store_sp:
 227+ 07A9 00 00        	ds 2
 228+ 07AB
# file closed: message.asm
  35  07AB
  36  07AB                  include "cpm.asm"
# file opened: cpm.asm
   1+ 07AB              ; This monitor & loader has two functions:
   2+ 07AB              ; (1) The monitor part enables you to view ram, rom and various config parameters.
   3+ 07AB              ; (2) The Loader part loads CP/M
   4+ 07AB
   5+ 07AB              ; CP/M v2.2 was implemented at the BDOS level by John Squires.
   6+ 07AB              ; The CORE, BIOS & BDOS are my own work.
   7+ 07AB              ;
   8+ 07AB              ; How the CP/M loader works:
   9+ 07AB              ; The 4 main sections need to end up at the top of memory.
  10+ 07AB              ; For now let's say at $C000, $D000 and $E000 & $F000.
  11+ 07AB              ; The CORE goes at the top of ram. This contains the routines to use the hardware.
  12+ 07AB              ; The BIOS is just a stub of a BIOS and does very little.
  13+ 07AB              ; The BDOS is the heart of CP/M and implements all the function.
  14+ 07AB              ; The CCP is the face of CP/M. The current one is the original from Digital Research 1978.
  15+ 07AB              ; In order to load CP/M we need a loader that grabs them from somewhere and copies them
  16+ 07AB              ; to those locations. That loader is this program, and is located in ROM at $0000.
  17+ 07AB              ; The CP/M loader's job is to:
  18+ 07AB              ; (1) Configure the Z80 Playground.
  19+ 07AB              ; (2) Load the CORE and BIOS from disk and put them in their corresponding locations.
  20+ 07AB              ; (3) Put the tiny jump table in place at the bottom of memory.
  21+ 07AB              ; (4) Switch off the ROM.
  22+ 07AB              ; (5) Jump into CP/M by calling BIOS cold boot.
  23+ 07AB              ; From there the BIOS loads the BDOS & CCP.
  24+ 07AB
  25+ 07AB                  ;org $0000
  26+ 07AB
  27+ 07AB              loader_entry:
  28+ 07AB F3               di
  29+ 07AC 31 6A C0         ld sp, loader_stack
  30+ 07AF C3 CB 07         jp skip_over_int_and_nmi
  31+ 07B2
  32+ 07B2              ; INT routine. This runs when you press the /INT button. All it does is toggle the USER led.
  33+ 07B2              ;	org $0038
  34+ 07B2              int:
  35+ 07B2 08           	ex af, af'
  36+ 07B3 D9           	exx
  37+ 07B4 CD 13 06     	call disk_toggle
  38+ 07B7 CD 09 06     	call short_pause
  39+ 07BA D9           	exx
  40+ 07BB 08           	ex af, af'
  41+ 07BC FB           	ei
  42+ 07BD ED 4D        	reti
  43+ 07BF
  44+ 07BF              ; NMI routine
  45+ 07BF              ;	org $0066
  46+ 07BF              nmi:
  47+ 07BF 08           	ex af, af'
  48+ 07C0 D9           	exx
  49+ 07C1 CD 2E 06     	call user_toggle
  50+ 07C4 CD 09 06     	call short_pause
  51+ 07C7 D9           	exx
  52+ 07C8 08           	ex af, af'
  53+ 07C9 ED 45        	retn
  54+ 07CB
  55+ 07CB              skip_over_int_and_nmi:
  56+ 07CB 06 20            ld b, $20                   ; 34,800 baud
  57+ 07CD 0E 00            ld c, $00                   ; No flow control
  58+ 07CF CD AC 05         call configure_uart         ; Put these settings into the UART
  59+ 07D2              start2:
  60+ 07D2 CD B5 06         call message
  61+ 07D5 1B 5B 32 4A     	db 27,'[2J',27,'[H'
  61+ 07D9 1B 5B 48
  62+ 07DC 5A 38 30 20      db 'Z80 Playground Monitor & CP/M Loader v1.03',13,10,0
  62+ 07E0 50 6C 61 79
  62+ 07E4 67 72 6F 75
  62+ 07E8 6E 64 20 4D
  62+ 07EC 6F 6E 69 74
  62+ 07F0 6F 72 20 26
  62+ 07F4 20 43 50 2F
  62+ 07F8 4D 20 4C 6F
  62+ 07FC 61 64 65 72
  62+ 0800 20 76 31 2E
  62+ 0804 30 33 0D 0A
  62+ 0808 00
  63+ 0809
  64+ 0809                  ; Check MCR
  65+ 0809 3E 22            ld a, %00100010
  66+ 080B D3 BC            out (uart_MCR), a
  67+ 080D CD B5 06         call message
  68+ 0810 31 36 43 35      db '16C550: ',0
  68+ 0814 35 30 3A 20
  68+ 0818 00
  69+ 0819 DB BC            in a, (uart_MCR)
  70+ 081B CD 27 07         call show_a_as_hex
  71+ 081E CD D4 05         call newline
  72+ 0821
  73+ 0821 CD B5 06         call message
  74+ 0824 43 6F 6E 66      db 'Configure USB Drive...',13,10,0
  74+ 0828 69 67 75 72
  74+ 082C 65 20 55 53
  74+ 0830 42 20 44 72
  74+ 0834 69 76 65 2E
  74+ 0838 2E 2E 0D 0A
  74+ 083C 00
  75+ 083D              s
  76+ 083D
  77+ 083D                  ; Now read the baud rate configuration from uart.cfg
  78+ 083D               ;   ld a, $FF
  79+ 083D               ;   ld (baud_rate_divisor), a           ; Reset the two UART parameters
  80+ 083D               ;   ld (flow_control_value), a
  81+ 083D               ;   ld a, 0
  82+ 083D               ;   ld (auto_run_char), a               ; Reset the auto-run character
  83+ 083D               ;   ld hl, UART_CFG_NAME
  84+ 083D               ;   call load_config_file
  85+ 083D               ;   call parse_uart_config_file         ; this gets b=baud and c=flowcontrol;
  86+ 083D              ;
  87+ 083D               ;   ld a, (baud_rate_divisor)           ; Check if we managed to get both baudrate and flowcontrol
  88+ 083D               ;   cp $FF
  89+ 083D               ;   jr z, failed_to_read_uart_config    ; If not, don't reconfigure uart
  90+ 083D               ;   ld b, a;
  91+ 083D              ;
  92+ 083D              ;    ld a, (flow_control_value)
  93+ 083D              ;    cp $FF
  94+ 083D              ;    jr z, failed_to_read_uart_config
  95+ 083D              ;    ld c, a
  96+ 083D              ;
  97+ 083D              ;    call message
  98+ 083D              ;    db 'Configuring UART to settings in UART.CFG',13,10,0
  99+ 083D              ;
 100+ 083D              ;    push bc
 101+ 083D              ;    call message
 102+ 083D              ;    db 'BAUD ',0
 103+ 083D              ;    ld a, b
 104+ 083D              ;    call show_a_as_hex
 105+ 083D              ;    pop bc
 106+ 083D              ;
 107+ 083D              ;    push bc
 108+ 083D              ;    call message
 109+ 083D              ;    db ', FLOW ',0
 110+ 083D              ;    ld a, c
 111+ 083D              ;    call show_a_as_hex
 112+ 083D              ;    call newline
 113+ 083D              ;    pop bc
 114+ 083D
 115+ 083D              ;    call configure_uart                 ; Put these settings into the UART
 116+ 083D
 117+ 083D                  ; Report on the AUTO-RUN-CHAR and start the monitor
 118+ 083D 3A FF 8F         ld a, (auto_run_char)
 119+ 0840 FE 00            cp 0
 120+ 0842 CA 74 08         jp z, start_monitor
 121+ 0845 CD B5 06         call message
 122+ 0848 41 55 54 4F      db 'AUTO ',0
 122+ 084C 20 00
 123+ 084E CD 1C 22         call show_a_safe
 124+ 0851 CD D4 05         call newline
 125+ 0854 C3 74 08         jp start_monitor
 126+ 0857
 127+ 0857              failed_to_read_uart_config:
 128+ 0857 CD B5 06         call message
 129+ 085A 43 6F 75 6C      db 'Could not read UART.CFG',13,10,0
 129+ 085E 64 20 6E 6F
 129+ 0862 74 20 72 65
 129+ 0866 61 64 20 55
 129+ 086A 41 52 54 2E
 129+ 086E 43 46 47 0D
 129+ 0872 0A 00
 130+ 0874
 131+ 0874              start_monitor:
 132+ 0874 C3 2F 16         jp monitor_start
 133+ 0877
 134+ 0877              start_cpm:
 135+ 0877 CD B5 06         call message
 136+ 087A 43 68 65 63      db 'Checking disks...',13,10,0
 136+ 087E 6B 69 6E 67
 136+ 0882 20 64 69 73
 136+ 0886 6B 73 2E 2E
 136+ 088A 2E 0D 0A 00
 137+ 088E CD 0D 10         call check_cpmdisks_structure
 138+ 0891
 139+ 0891              ;********************************************************************************************
 140+ 0891              ;********************************************************************************************
 141+ 0891              ;      PAULO         NAO ESQUECA DE TIRAR ESSE RET
 142+ 0891              ;********************************************************************************************
 143+ 0891              ;********************************************************************************************
 144+ 0891
 145+ 0891              	;JP MenuReturn
 146+ 0891
 147+ 0891                  ; Copy 8 byte bootstrap sequence into Low Storage at location 0
 148+ 0891                  ; but note that we patch it up in a bit with the real jump locations.
 149+ 0891 11 00 00         ld de, 0
 150+ 0894 21 47 0D         ld hl, first_eight_bytes
 151+ 0897 01 08 00         ld bc, 8
 152+ 089A ED B0            ldir
 153+ 089C
 154+ 089C                  ; Load CPM config file into memory
 155+ 089C 21 36 0D         ld hl, CPM_CFG_NAME
 156+ 089F CD FD 08         call load_config_file
 157+ 08A2                  ; Parse it to get out the locations
 158+ 08A2 CD 28 09         call parse_cpm_config_file
 159+ 08A5 CD 6D 0C         call show_config
 160+ 08A8 CD D3 0C         call validate_config
 161+ 08AB
 162+ 08AB                  ; Load CORE.BIN into its proper location
 163+ 08AB 21 24 0D         ld hl, NAME_OF_CORE
 164+ 08AE CD BB 13         call copy_filename_to_buffer
 165+ 08B1 ED 5B C4 BF      ld de, (core_location)
 166+ 08B5 CD 64 0E         call load_bin_file
 167+ 08B8 CD B5 06         call message
 168+ 08BB 43 4F 52 45      db 'CORE loaded!',13,10,0
 168+ 08BF 20 6C 6F 61
 168+ 08C3 64 65 64 21
 168+ 08C7 0D 0A 00
 169+ 08CA
 170+ 08CA                  ; Load the BIOS to the proper location
 171+ 08CA 21 1B 0D         ld hl, NAME_OF_BIOS
 172+ 08CD CD BB 13         call copy_filename_to_buffer
 173+ 08D0 ED 5B C2 BF      ld de, (bios_location)
 174+ 08D4 CD 64 0E         call load_bin_file
 175+ 08D7 CD B5 06         call message
 176+ 08DA 42 49 4F 53      db 'BIOS loaded!',13,10,0
 176+ 08DE 20 6C 6F 61
 176+ 08E2 64 65 64 21
 176+ 08E6 0D 0A 00
 177+ 08E9
 178+ 08E9                  ; copy bios_start into bytes 1 & 2 after adding 3 to it
 179+ 08E9 2A C2 BF         ld hl, (bios_location)
 180+ 08EC 23               inc hl
 181+ 08ED 23               inc hl
 182+ 08EE 23               inc hl                              ; hl now point to BIOS warm boot
 183+ 08EF 22 01 00         ld (1), hl
 184+ 08F2
 185+ 08F2                  ; copy bdos_start into bytes 6 & 7
 186+ 08F2 2A C0 BF         ld hl, (bdos_location)
 187+ 08F5 22 06 00         ld (6), hl
 188+ 08F8
 189+ 08F8                  ; OK, let's go!
 190+ 08F8 2A C2 BF         ld hl, (bios_location)
 191+ 08FB E9               jp (hl) ; BIOS COLD BOOT - Note that this is PC=HL not PC=(HL). Confusing eh?
 192+ 08FC 76               halt    ; Just in case we ever get back here somehow
 193+ 08FD
 194+ 08FD
 195+ 08FD              load_config_file:
 196+ 08FD CD B5 06         call message
 197+ 0900 4C 6F 61 64      db 'Loading config file...',13,10,0
 197+ 0904 69 6E 67 20
 197+ 0908 63 6F 6E 66
 197+ 090C 69 67 20 66
 197+ 0910 69 6C 65 2E
 197+ 0914 2E 2E 0D 0A
 197+ 0918 00
 198+ 0919                  ; Opens the file such as /CPM/cpm.cfg or /CPM/uart.cfg. Point to one of these names in hl.
 199+ 0919                  ; Read it into an area of memory starting at config_file_loc
 200+ 0919                  ; and puts \0 at the end so we can spot the end of the file later
 201+ 0919 CD BB 13         call copy_filename_to_buffer
 202+ 091C 11 00 90         ld de, config_file_loc
 203+ 091F CD 64 0E         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 204+ 0922 C2 A7 09         jp nz, load_config_file_error
 205+ 0925 36 00            ld (hl), 0
 206+ 0927 C9               ret
 207+ 0928
 208+ 0928              parse_cpm_config_file:
 209+ 0928 CD B5 06         call message
 210+ 092B 50 61 72 73      db 'Parsing the CPM config file...',13,10,0
 210+ 092F 69 6E 67 20
 210+ 0933 74 68 65 20
 210+ 0937 43 50 4D 20
 210+ 093B 63 6F 6E 66
 210+ 093F 69 67 20 66
 210+ 0943 69 6C 65 2E
 210+ 0947 2E 2E 0D 0A
 210+ 094B 00
 211+ 094C                  ; Go through the config file one line at a time.
 212+ 094C                  ; If we encounter a \0 then the file has ended.
 213+ 094C                  ; If a line starts with ";" then ignore it.
 214+ 094C                  ; If a line starts with "CORE" then read in the bex value for CORE_START
 215+ 094C 21 00 90         ld hl, config_file_loc
 216+ 094F
 217+ 094F              parse_cpm_config_file_loop:
 218+ 094F CD 45 0C         call has_file_ended
 219+ 0952 CA A6 09         jp z, parse_config_file_end
 220+ 0955
 221+ 0955 CD EB 0A         call is_this_line_a_comment
 222+ 0958 C2 60 09         jp nz, not_a_comment
 223+ 095B CD 50 0C         call go_to_next_line
 224+ 095E 18 EF            jr parse_cpm_config_file_loop
 225+ 0960
 226+ 0960              not_a_comment:
 227+ 0960 CD F3 0A         call is_this_line_the_core_location
 228+ 0963 20 0B            jr nz, not_core_location
 229+ 0965 11 C4 BF         ld de, core_location
 230+ 0968              consume_location:
 231+ 0968 CD 5D 0A         call parse_4_digit_hex_value
 232+ 096B CD 50 0C         call go_to_next_line
 233+ 096E 18 DF            jr parse_cpm_config_file_loop
 234+ 0970
 235+ 0970              not_core_location:
 236+ 0970 CD 9F 0B         call is_this_line_the_bios_location
 237+ 0973 20 05            jr nz, not_bios_location
 238+ 0975 11 C2 BF         ld de, bios_location
 239+ 0978 18 EE            jr consume_location
 240+ 097A
 241+ 097A              not_bios_location:
 242+ 097A CD CA 0B         call is_this_line_the_bdos_location
 243+ 097D 20 05            jr nz, not_bdos_location
 244+ 097F 11 C0 BF         ld de, bdos_location
 245+ 0982 18 E4            jr consume_location
 246+ 0984
 247+ 0984              not_bdos_location:
 248+ 0984 CD F5 0B         call is_this_line_the_ccp_location
 249+ 0987 20 05            jr nz, not_ccp_location
 250+ 0989 11 BE BF         ld de, ccp_location
 251+ 098C 18 DA            jr consume_location
 252+ 098E
 253+ 098E              not_ccp_location:
 254+ 098E CD 1B 0C         call is_this_line_the_ccp_name
 255+ 0991 20 05            jr nz, not_ccp_name
 256+ 0993 11 B1 BF         ld de, ccp_name
 257+ 0996 18 06            jr consume_name
 258+ 0998
 259+ 0998              not_ccp_name:
 260+ 0998                  ; Unknown line so ignore it
 261+ 0998 CD 50 0C         call go_to_next_line
 262+ 099B C3 4F 09         jp parse_cpm_config_file_loop
 263+ 099E
 264+ 099E              consume_name:
 265+ 099E                  ; hl points to the name in the file
 266+ 099E                  ; de points to where we want to store it
 267+ 099E CD C7 09         call parse_name
 268+ 09A1 CD 50 0C         call go_to_next_line
 269+ 09A4 18 A9            jr parse_cpm_config_file_loop
 270+ 09A6
 271+ 09A6              parse_config_file_end:
 272+ 09A6 C9               ret
 273+ 09A7
 274+ 09A7              load_config_file_error:
 275+ 09A7 CD B5 06         call message
 276+ 09AA 45 72 72 6F      db 'Error loading config file',13,10,0
 276+ 09AE 72 20 6C 6F
 276+ 09B2 61 64 69 6E
 276+ 09B6 67 20 63 6F
 276+ 09BA 6E 66 69 67
 276+ 09BE 20 66 69 6C
 276+ 09C2 65 0D 0A 00
 277+ 09C6 76               halt
 278+ 09C7
 279+ 09C7              parse_name:
 280+ 09C7                  ; hl = current location in file
 281+ 09C7                  ; de = where we want to put the parsed filename
 282+ 09C7 06 09            ld b, 9                 ; max 8 chars in filename
 283+ 09C9              parse_name_loop:
 284+ 09C9 CD 49 0C         call get_cfg_char
 285+ 09CC FE 21            cp ' '+1
 286+ 09CE DA E8 0A         jp c, bad_hex_digit
 287+ 09D1 FE 2E            cp '.'
 288+ 09D3 28 07            jr z, parse_extension
 289+ 09D5 12               ld (de), a
 290+ 09D6 13               inc de
 291+ 09D7 10 F0            djnz parse_name_loop
 292+ 09D9 C3 E8 0A         jp bad_hex_digit
 293+ 09DC              parse_extension:
 294+ 09DC 3E 2E            ld a, '.'
 295+ 09DE 12               ld (de), a
 296+ 09DF 13               inc de
 297+ 09E0
 298+ 09E0 06 03            ld b, 3                 ; max 3 chars in filename
 299+ 09E2              parse_extension_loop:
 300+ 09E2 CD 49 0C         call get_cfg_char
 301+ 09E5 FE 21            cp ' '+1
 302+ 09E7 38 04            jr c, parse_name_done
 303+ 09E9 12               ld (de), a
 304+ 09EA 13               inc de
 305+ 09EB 10 F5            djnz parse_extension_loop
 306+ 09ED                  ; fall through to...
 307+ 09ED
 308+ 09ED              parse_name_done:
 309+ 09ED 3E 00            ld a, 0                         ; null terminator for the name
 310+ 09EF 12               ld (de), a
 311+ 09F0 BF               cp a                            ; Set zero flag for success
 312+ 09F1 C9               ret
 313+ 09F2
 314+ 09F2              parse_uart_config_file:
 315+ 09F2 CD B5 06         call message
 316+ 09F5 50 61 72 73      db 'Parsing the UART config file...',13,10,0
 316+ 09F9 69 6E 67 20
 316+ 09FD 74 68 65 20
 316+ 0A01 55 41 52 54
 316+ 0A05 20 63 6F 6E
 316+ 0A09 66 69 67 20
 316+ 0A0D 66 69 6C 65
 316+ 0A11 2E 2E 2E 0D
 316+ 0A15 0A 00
 317+ 0A17                  ; Go through the config file one line at a time.
 318+ 0A17                  ; If we encounter a \0 then the file has ended.
 319+ 0A17                  ; If a line starts with ";" then ignore it.
 320+ 0A17                  ; If a line starts with "BAUD" or "FLOW" then read in the hex value.
 321+ 0A17                  ; If a line starts with "AUTO" then read in a char.
 322+ 0A17 21 00 90         ld hl, config_file_loc
 323+ 0A1A              parse_uart_config_file_loop:
 324+ 0A1A CD 45 0C         call has_file_ended
 325+ 0A1D CA A6 09         jp z, parse_config_file_end
 326+ 0A20
 327+ 0A20 CD EB 0A         call is_this_line_a_comment
 328+ 0A23 C2 2B 0A         jp nz, not_a_uart_comment
 329+ 0A26 CD 50 0C         call go_to_next_line
 330+ 0A29 18 EF            jr parse_uart_config_file_loop
 331+ 0A2B
 332+ 0A2B              not_a_uart_comment:
 333+ 0A2B CD 1E 0B         call is_this_line_the_baud_rate
 334+ 0A2E 20 13            jr nz, not_baud_rate
 335+ 0A30 11 B0 BF         ld de, baud_rate_divisor
 336+ 0A33              consume_uart_value:
 337+ 0A33 CD A5 0A         call parse_2_digit_hex_value
 338+ 0A36 CD 50 0C         call go_to_next_line
 339+ 0A39 18 DF            jr parse_uart_config_file_loop
 340+ 0A3B
 341+ 0A3B              consume_char:
 342+ 0A3B                  ; hl points to the char in the file
 343+ 0A3B                  ; de points to where we want to store it
 344+ 0A3B CD 9A 0A         call parse_char
 345+ 0A3E CD 50 0C         call go_to_next_line
 346+ 0A41 18 D7            jr parse_uart_config_file_loop
 347+ 0A43
 348+ 0A43
 349+ 0A43              not_baud_rate:
 350+ 0A43 CD 49 0B         call is_this_line_the_flow_control
 351+ 0A46 20 05            jr nz, not_flow_control
 352+ 0A48 11 AF BF         ld de, flow_control_value
 353+ 0A4B 18 E6            jr consume_uart_value
 354+ 0A4D
 355+ 0A4D              not_flow_control:
 356+ 0A4D CD 74 0B         call is_this_line_the_auto_char
 357+ 0A50 20 05            jr nz, not_auto_char
 358+ 0A52 11 FF 8F         ld de, auto_run_char
 359+ 0A55 18 E4            jr consume_char
 360+ 0A57
 361+ 0A57              not_auto_char:
 362+ 0A57                  ; Unknown line so ignore it
 363+ 0A57 CD 50 0C         call go_to_next_line
 364+ 0A5A C3 1A 0A         jp parse_uart_config_file_loop
 365+ 0A5D
 366+ 0A5D              parse_4_digit_hex_value:
 367+ 0A5D                  ; hl = current location in file
 368+ 0A5D                  ; de = where we want to put the parsed value
 369+ 0A5D 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 370+ 0A5F 12               ld (de), a
 371+ 0A60 13               inc de
 372+ 0A61 12               ld (de), a                              ; de now pointing to high byte of result area
 373+ 0A62
 374+ 0A62 CD 49 0C         call get_cfg_char
 375+ 0A65 CD C4 0A         call parse_hex_digit
 376+ 0A68 C2 A7 09         jp nz, load_config_file_error
 377+ 0A6B 87               add a, a                                ; a = a * 2
 378+ 0A6C 87               add a, a                                ; a = a * 4
 379+ 0A6D 87               add a, a                                ; a = a * 8
 380+ 0A6E 87               add a, a                                ; a = a * 16
 381+ 0A6F 12               ld (de), a                              ; Store highest 4 bits of high byte
 382+ 0A70
 383+ 0A70 CD 49 0C         call get_cfg_char
 384+ 0A73 CD C4 0A         call parse_hex_digit
 385+ 0A76 C2 A7 09         jp nz, load_config_file_error
 386+ 0A79 47               ld b, a
 387+ 0A7A 1A               ld a, (de)
 388+ 0A7B 80               add a, b
 389+ 0A7C 12               ld (de), a                              ; Stored all of high byte now
 390+ 0A7D 1B               dec de                                  ; de now points to low byte of result
 391+ 0A7E
 392+ 0A7E CD 49 0C         call get_cfg_char
 393+ 0A81 CD C4 0A         call parse_hex_digit
 394+ 0A84 C2 A7 09         jp nz, load_config_file_error
 395+ 0A87 87               add a, a                                ; a = a * 2
 396+ 0A88 87               add a, a                                ; a = a * 4
 397+ 0A89 87               add a, a                                ; a = a * 8
 398+ 0A8A 87               add a, a                                ; a = a * 16
 399+ 0A8B 12               ld (de), a                              ; Store highest 4 bits of low byte
 400+ 0A8C
 401+ 0A8C CD 49 0C         call get_cfg_char
 402+ 0A8F CD C4 0A         call parse_hex_digit
 403+ 0A92 C2 A7 09         jp nz, load_config_file_error
 404+ 0A95 47               ld b, a
 405+ 0A96 1A               ld a, (de)
 406+ 0A97 80               add a, b
 407+ 0A98 12               ld (de), a                              ; Stored all of low byte now
 408+ 0A99
 409+ 0A99 C9               ret
 410+ 0A9A
 411+ 0A9A              parse_char:
 412+ 0A9A 7E               ld a, (hl)
 413+ 0A9B FE 20            cp 32
 414+ 0A9D 38 02            jr c, parse_char_blank
 415+ 0A9F 12               ld (de), a
 416+ 0AA0 C9               ret
 417+ 0AA1              parse_char_blank:
 418+ 0AA1 3E 00            ld a, 0
 419+ 0AA3 12               ld (de), a
 420+ 0AA4 C9               ret
 421+ 0AA5
 422+ 0AA5              parse_2_digit_hex_value:
 423+ 0AA5                  ; hl = current location in file
 424+ 0AA5                  ; de = where we want to put the parsed value
 425+ 0AA5 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 426+ 0AA7 12               ld (de), a
 427+ 0AA8
 428+ 0AA8 CD 49 0C         call get_cfg_char
 429+ 0AAB CD C4 0A         call parse_hex_digit
 430+ 0AAE C2 A7 09         jp nz, load_config_file_error
 431+ 0AB1 87               add a, a                                ; a = a * 2
 432+ 0AB2 87               add a, a                                ; a = a * 4
 433+ 0AB3 87               add a, a                                ; a = a * 8
 434+ 0AB4 87               add a, a                                ; a = a * 16
 435+ 0AB5 12               ld (de), a                              ; Store highest 4 bits of byte
 436+ 0AB6
 437+ 0AB6 CD 49 0C         call get_cfg_char
 438+ 0AB9 CD C4 0A         call parse_hex_digit
 439+ 0ABC C2 A7 09         jp nz, load_config_file_error
 440+ 0ABF 47               ld b, a
 441+ 0AC0 1A               ld a, (de)
 442+ 0AC1 80               add a, b
 443+ 0AC2 12               ld (de), a                              ; Stored all of byte now
 444+ 0AC3 C9               ret
 445+ 0AC4
 446+ 0AC4              parse_hex_digit:
 447+ 0AC4                  ; Parses the hex ascii char in A into a hex value 0-15 in A
 448+ 0AC4                  ; returns NZ if not valid
 449+ 0AC4                  ; Preserves hl & de
 450+ 0AC4 FE 30            cp '0'
 451+ 0AC6 38 20            jr c, bad_hex_digit
 452+ 0AC8 FE 3A            cp '9'+1
 453+ 0ACA 30 04            jr nc, not_09
 454+ 0ACC D6 30            sub '0'
 455+ 0ACE 18 16            jr parse_hex_digit_done
 456+ 0AD0              not_09:
 457+ 0AD0 FE 41            cp 'A'
 458+ 0AD2 38 14            jr c, bad_hex_digit
 459+ 0AD4 FE 47            cp 'F'+1
 460+ 0AD6 30 04            jr nc, not_AZ_uppercase
 461+ 0AD8 D6 37            sub 55
 462+ 0ADA 18 0A            jr parse_hex_digit_done
 463+ 0ADC              not_AZ_uppercase:
 464+ 0ADC FE 61            cp 'a'
 465+ 0ADE 38 08            jr c, bad_hex_digit
 466+ 0AE0 FE 67            cp 'f'+1
 467+ 0AE2 30 04            jr nc, bad_hex_digit
 468+ 0AE4 D6 57            sub 87
 469+ 0AE6                  ; fall through to...
 470+ 0AE6              parse_hex_digit_done:
 471+ 0AE6 BF               cp a                            ; Set zero flag for success
 472+ 0AE7 C9               ret
 473+ 0AE8
 474+ 0AE8              bad_hex_digit:
 475+ 0AE8 F6 01            or 1                            ; clear zero flag for failure
 476+ 0AEA C9               ret
 477+ 0AEB
 478+ 0AEB              is_this_line_a_comment:
 479+ 0AEB                  ; Check if the line starts with ";"
 480+ 0AEB                  ; Returns Z if so.
 481+ 0AEB                  ; Always leaves hl at the start of the line
 482+ 0AEB E5               push hl
 483+ 0AEC CD 49 0C         call get_cfg_char
 484+ 0AEF E1               pop hl
 485+ 0AF0 FE 3B            cp ';'
 486+ 0AF2 C9               ret
 487+ 0AF3
 488+ 0AF3              is_this_line_the_core_location:
 489+ 0AF3                  ; Checks if the line starts with "CORE"
 490+ 0AF3                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 491+ 0AF3                  ; If not returns NZ and leaves hl pointing to the start of the line
 492+ 0AF3 E5               push hl
 493+ 0AF4 CD 49 0C         call get_cfg_char
 494+ 0AF7 FE 43            cp 'C'
 495+ 0AF9 C2 41 0C         jp nz, is_this_line_NO
 496+ 0AFC
 497+ 0AFC CD 49 0C         call get_cfg_char
 498+ 0AFF FE 4F            cp 'O'
 499+ 0B01 C2 41 0C         jp nz, is_this_line_NO
 500+ 0B04
 501+ 0B04 CD 49 0C         call get_cfg_char
 502+ 0B07 FE 52            cp 'R'
 503+ 0B09 C2 41 0C         jp nz, is_this_line_NO
 504+ 0B0C
 505+ 0B0C CD 49 0C         call get_cfg_char
 506+ 0B0F FE 45            cp 'E'
 507+ 0B11 C2 41 0C         jp nz, is_this_line_NO
 508+ 0B14
 509+ 0B14 CD 49 0C         call get_cfg_char
 510+ 0B17 FE 20            cp ' '
 511+ 0B19 C2 41 0C         jp nz, is_this_line_NO
 512+ 0B1C D1               pop de                          ; throw away the value we pushed
 513+ 0B1D C9               ret                             ; returns Z
 514+ 0B1E
 515+ 0B1E              is_this_line_the_baud_rate:
 516+ 0B1E                  ; Checks if the line starts with "BAUD"
 517+ 0B1E                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 518+ 0B1E                  ; If not returns NZ and leaves hl pointing to the start of the line
 519+ 0B1E E5               push hl
 520+ 0B1F CD 49 0C         call get_cfg_char
 521+ 0B22 FE 42            cp 'B'
 522+ 0B24 C2 41 0C         jp nz, is_this_line_NO
 523+ 0B27
 524+ 0B27 CD 49 0C         call get_cfg_char
 525+ 0B2A FE 41            cp 'A'
 526+ 0B2C C2 41 0C         jp nz, is_this_line_NO
 527+ 0B2F
 528+ 0B2F CD 49 0C         call get_cfg_char
 529+ 0B32 FE 55            cp 'U'
 530+ 0B34 C2 41 0C         jp nz, is_this_line_NO
 531+ 0B37
 532+ 0B37 CD 49 0C         call get_cfg_char
 533+ 0B3A FE 44            cp 'D'
 534+ 0B3C C2 41 0C         jp nz, is_this_line_NO
 535+ 0B3F
 536+ 0B3F CD 49 0C         call get_cfg_char
 537+ 0B42 FE 20            cp ' '
 538+ 0B44 C2 41 0C         jp nz, is_this_line_NO
 539+ 0B47 D1               pop de                          ; throw away the value we pushed
 540+ 0B48 C9               ret                             ; returns Z
 541+ 0B49
 542+ 0B49              is_this_line_the_flow_control:
 543+ 0B49                  ; Checks if the line starts with "FLOW"
 544+ 0B49                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 545+ 0B49                  ; If not returns NZ and leaves hl pointing to the start of the line
 546+ 0B49 E5               push hl
 547+ 0B4A CD 49 0C         call get_cfg_char
 548+ 0B4D FE 46            cp 'F'
 549+ 0B4F C2 41 0C         jp nz, is_this_line_NO
 550+ 0B52
 551+ 0B52 CD 49 0C         call get_cfg_char
 552+ 0B55 FE 4C            cp 'L'
 553+ 0B57 C2 41 0C         jp nz, is_this_line_NO
 554+ 0B5A
 555+ 0B5A CD 49 0C         call get_cfg_char
 556+ 0B5D FE 4F            cp 'O'
 557+ 0B5F C2 41 0C         jp nz, is_this_line_NO
 558+ 0B62
 559+ 0B62 CD 49 0C         call get_cfg_char
 560+ 0B65 FE 57            cp 'W'
 561+ 0B67 C2 41 0C         jp nz, is_this_line_NO
 562+ 0B6A
 563+ 0B6A CD 49 0C         call get_cfg_char
 564+ 0B6D FE 20            cp ' '
 565+ 0B6F C2 41 0C         jp nz, is_this_line_NO
 566+ 0B72 D1               pop de                          ; throw away the value we pushed
 567+ 0B73 C9               ret                             ; returns Z
 568+ 0B74
 569+ 0B74              is_this_line_the_auto_char:
 570+ 0B74                  ; Checks if the line starts with "AUTO"
 571+ 0B74                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 572+ 0B74                  ; If not returns NZ and leaves hl pointing to the start of the line
 573+ 0B74 E5               push hl
 574+ 0B75 CD 49 0C         call get_cfg_char
 575+ 0B78 FE 41            cp 'A'
 576+ 0B7A C2 41 0C         jp nz, is_this_line_NO
 577+ 0B7D
 578+ 0B7D CD 49 0C         call get_cfg_char
 579+ 0B80 FE 55            cp 'U'
 580+ 0B82 C2 41 0C         jp nz, is_this_line_NO
 581+ 0B85
 582+ 0B85 CD 49 0C         call get_cfg_char
 583+ 0B88 FE 54            cp 'T'
 584+ 0B8A C2 41 0C         jp nz, is_this_line_NO
 585+ 0B8D
 586+ 0B8D CD 49 0C         call get_cfg_char
 587+ 0B90 FE 4F            cp 'O'
 588+ 0B92 C2 41 0C         jp nz, is_this_line_NO
 589+ 0B95
 590+ 0B95 CD 49 0C         call get_cfg_char
 591+ 0B98 FE 20            cp ' '
 592+ 0B9A C2 41 0C         jp nz, is_this_line_NO
 593+ 0B9D D1               pop de                          ; throw away the value we pushed
 594+ 0B9E C9               ret                             ; returns Z
 595+ 0B9F
 596+ 0B9F              is_this_line_the_bios_location:
 597+ 0B9F                  ; Checks if the line starts with "BIOS "
 598+ 0B9F                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 599+ 0B9F                  ; If not returns NZ and leaves hl pointing to the start of the line
 600+ 0B9F E5               push hl
 601+ 0BA0 CD 49 0C         call get_cfg_char
 602+ 0BA3 FE 42            cp 'B'
 603+ 0BA5 C2 41 0C         jp nz, is_this_line_NO
 604+ 0BA8
 605+ 0BA8 CD 49 0C         call get_cfg_char
 606+ 0BAB FE 49            cp 'I'
 607+ 0BAD C2 41 0C         jp nz, is_this_line_NO
 608+ 0BB0
 609+ 0BB0 CD 49 0C         call get_cfg_char
 610+ 0BB3 FE 4F            cp 'O'
 611+ 0BB5 C2 41 0C         jp nz, is_this_line_NO
 612+ 0BB8
 613+ 0BB8 CD 49 0C         call get_cfg_char
 614+ 0BBB FE 53            cp 'S'
 615+ 0BBD C2 41 0C         jp nz, is_this_line_NO
 616+ 0BC0
 617+ 0BC0 CD 49 0C         call get_cfg_char
 618+ 0BC3 FE 20            cp ' '
 619+ 0BC5 C2 41 0C         jp nz, is_this_line_NO
 620+ 0BC8 D1               pop de
 621+ 0BC9 C9               ret                             ; returns Z
 622+ 0BCA
 623+ 0BCA              is_this_line_the_bdos_location:
 624+ 0BCA                  ; Checks if the line starts with "BDOS "
 625+ 0BCA                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 626+ 0BCA                  ; If not returns NZ and leaves hl pointing to the start of the line
 627+ 0BCA E5               push hl
 628+ 0BCB CD 49 0C         call get_cfg_char
 629+ 0BCE FE 42            cp 'B'
 630+ 0BD0 C2 41 0C         jp nz, is_this_line_NO
 631+ 0BD3
 632+ 0BD3 CD 49 0C         call get_cfg_char
 633+ 0BD6 FE 44            cp 'D'
 634+ 0BD8 C2 41 0C         jp nz, is_this_line_NO
 635+ 0BDB
 636+ 0BDB CD 49 0C         call get_cfg_char
 637+ 0BDE FE 4F            cp 'O'
 638+ 0BE0 C2 41 0C         jp nz, is_this_line_NO
 639+ 0BE3
 640+ 0BE3 CD 49 0C         call get_cfg_char
 641+ 0BE6 FE 53            cp 'S'
 642+ 0BE8 C2 41 0C         jp nz, is_this_line_NO
 643+ 0BEB
 644+ 0BEB CD 49 0C         call get_cfg_char
 645+ 0BEE FE 20            cp ' '
 646+ 0BF0 C2 41 0C         jp nz, is_this_line_NO
 647+ 0BF3 D1               pop de
 648+ 0BF4 C9               ret                             ; returns Z
 649+ 0BF5
 650+ 0BF5              is_this_line_the_ccp_location:
 651+ 0BF5                  ; Checks if the line starts with "CCPL "
 652+ 0BF5                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 653+ 0BF5                  ; If not returns NZ and leaves hl pointing to the start of the line
 654+ 0BF5 E5               push hl
 655+ 0BF6 CD 49 0C         call get_cfg_char
 656+ 0BF9 FE 43            cp 'C'
 657+ 0BFB 20 44            jr nz, is_this_line_NO
 658+ 0BFD
 659+ 0BFD CD 49 0C         call get_cfg_char
 660+ 0C00 FE 43            cp 'C'
 661+ 0C02 20 3D            jr nz, is_this_line_NO
 662+ 0C04
 663+ 0C04 CD 49 0C         call get_cfg_char
 664+ 0C07 FE 50            cp 'P'
 665+ 0C09 20 36            jr nz, is_this_line_NO
 666+ 0C0B
 667+ 0C0B CD 49 0C         call get_cfg_char
 668+ 0C0E FE 4C            cp 'L'
 669+ 0C10 20 2F            jr nz, is_this_line_NO
 670+ 0C12
 671+ 0C12 CD 49 0C         call get_cfg_char
 672+ 0C15 FE 20            cp ' '
 673+ 0C17 20 28            jr nz, is_this_line_NO
 674+ 0C19 D1               pop de
 675+ 0C1A C9               ret                             ; returns Z
 676+ 0C1B
 677+ 0C1B              is_this_line_the_ccp_name:
 678+ 0C1B                  ; Checks if the line starts with "CCPN "
 679+ 0C1B                  ; Returns Z if so and leaves hl pointing to the start of the filename after the word.
 680+ 0C1B                  ; If not returns NZ and leaves hl pointing to the start of the line
 681+ 0C1B E5               push hl
 682+ 0C1C CD 49 0C         call get_cfg_char
 683+ 0C1F FE 43            cp 'C'
 684+ 0C21 20 1E            jr nz, is_this_line_NO
 685+ 0C23
 686+ 0C23 CD 49 0C         call get_cfg_char
 687+ 0C26 FE 43            cp 'C'
 688+ 0C28 20 17            jr nz, is_this_line_NO
 689+ 0C2A
 690+ 0C2A CD 49 0C         call get_cfg_char
 691+ 0C2D FE 50            cp 'P'
 692+ 0C2F 20 10            jr nz, is_this_line_NO
 693+ 0C31
 694+ 0C31 CD 49 0C         call get_cfg_char
 695+ 0C34 FE 4E            cp 'N'
 696+ 0C36 20 09            jr nz, is_this_line_NO
 697+ 0C38
 698+ 0C38 CD 49 0C         call get_cfg_char
 699+ 0C3B FE 20            cp ' '
 700+ 0C3D 20 02            jr nz, is_this_line_NO
 701+ 0C3F D1               pop de
 702+ 0C40 C9               ret                             ; returns Z
 703+ 0C41
 704+ 0C41              is_this_line_NO:
 705+ 0C41 E1               pop hl
 706+ 0C42 F6 01            or 1                            ; clear zero flag for failure
 707+ 0C44 C9               ret
 708+ 0C45
 709+ 0C45              has_file_ended:
 710+ 0C45                  ; The file has ended if the next char is a \0
 711+ 0C45 7E               ld a, (hl)
 712+ 0C46 FE 00            cp 0
 713+ 0C48 C9               ret
 714+ 0C49
 715+ 0C49              get_cfg_char:
 716+ 0C49                  ; Gets A from the next location in the config file, pointed to by HL.
 717+ 0C49                  ; Increases hl so we skip over the char.
 718+ 0C49                  ; If the char is a \0 then we are at the end of the file, so return \0 and don't increase hl
 719+ 0C49 7E               ld a, (hl)
 720+ 0C4A FE 00            cp 0                            ; Have we found the end of the file?
 721+ 0C4C C8               ret z                           ; and return
 722+ 0C4D              get_cfg_char1:
 723+ 0C4D 23               inc hl
 724+ 0C4E BF               cp a                            ; Set zero flag for success
 725+ 0C4F C9               ret
 726+ 0C50
 727+ 0C50              go_to_next_line:
 728+ 0C50 7E               ld a, (hl)
 729+ 0C51 FE 00            cp 0                            ; Have we found the end of the file?
 730+ 0C53 C8               ret z                           ; if so return
 731+ 0C54
 732+ 0C54 FE 20            cp 32
 733+ 0C56 30 0A            jr nc, skip_letters
 734+ 0C58              skip_control_chars:
 735+ 0C58 23               inc hl
 736+ 0C59 7E               ld a, (hl)
 737+ 0C5A FE 00            cp 0
 738+ 0C5C C8               ret z
 739+ 0C5D FE 20            cp 32
 740+ 0C5F 38 F7            jr c, skip_control_chars
 741+ 0C61 C9               ret
 742+ 0C62
 743+ 0C62              skip_letters:
 744+ 0C62 23               inc hl
 745+ 0C63 7E               ld a, (hl)
 746+ 0C64 FE 00            cp 0
 747+ 0C66 C8               ret z
 748+ 0C67 FE 20            cp 32
 749+ 0C69 30 F7            jr nc, skip_letters
 750+ 0C6B 18 EB            jr skip_control_chars
 751+ 0C6D
 752+ 0C6D              show_config:
 753+ 0C6D CD B5 06         call message
 754+ 0C70 43 4F 52 45      db 'CORE: ',0
 754+ 0C74 3A 20 00
 755+ 0C77 2A C4 BF         ld hl, (core_location)
 756+ 0C7A CD 11 07         call show_hl_as_hex
 757+ 0C7D
 758+ 0C7D CD B5 06         call message
 759+ 0C80 2C 20 42 49      db ', BIOS: ',0
 759+ 0C84 4F 53 3A 20
 759+ 0C88 00
 760+ 0C89 2A C2 BF         ld hl, (bios_location)
 761+ 0C8C CD 11 07         call show_hl_as_hex
 762+ 0C8F
 763+ 0C8F CD B5 06         call message
 764+ 0C92 2C 20 42 44      db ', BDOS: ',0
 764+ 0C96 4F 53 3A 20
 764+ 0C9A 00
 765+ 0C9B 2A C0 BF         ld hl, (bdos_location)
 766+ 0C9E CD 11 07         call show_hl_as_hex
 767+ 0CA1
 768+ 0CA1 CD B5 06         call message
 769+ 0CA4 2C 20 43 43      db ', CCPL: ',0
 769+ 0CA8 50 4C 3A 20
 769+ 0CAC 00
 770+ 0CAD 2A BE BF         ld hl, (ccp_location)
 771+ 0CB0 CD 11 07         call show_hl_as_hex
 772+ 0CB3
 773+ 0CB3 CD B5 06         call message
 774+ 0CB6 2C 20 43 43      db ', CCPN: ',0
 774+ 0CBA 50 4E 3A 20
 774+ 0CBE 00
 775+ 0CBF 21 B1 BF         ld hl, ccp_name
 776+ 0CC2              show_name_loop:
 777+ 0CC2 7E               ld a, (hl)
 778+ 0CC3 FE 00            cp 0
 779+ 0CC5 28 08            jr z, finished_showing_name
 780+ 0CC7 E5               push hl
 781+ 0CC8 CD 6A 06         call print_a
 782+ 0CCB E1               pop hl
 783+ 0CCC 23               inc hl
 784+ 0CCD 18 F3            jr show_name_loop
 785+ 0CCF              finished_showing_name:
 786+ 0CCF CD D4 05         call newline
 787+ 0CD2 C9               ret
 788+ 0CD3
 789+ 0CD3              validate_config:
 790+ 0CD3 21 C4 BF         ld hl, core_location
 791+ 0CD6 CD EC 0C         call must_not_be_zero
 792+ 0CD9 21 C2 BF         ld hl, bios_location
 793+ 0CDC CD EC 0C         call must_not_be_zero
 794+ 0CDF 21 C0 BF         ld hl, bdos_location
 795+ 0CE2 CD EC 0C         call must_not_be_zero
 796+ 0CE5 21 BE BF         ld hl, ccp_location
 797+ 0CE8 CD EC 0C         call must_not_be_zero
 798+ 0CEB C9               ret
 799+ 0CEC
 800+ 0CEC              must_not_be_zero:
 801+ 0CEC 7E               ld a, (hl)
 802+ 0CED FE 00            cp 0
 803+ 0CEF C0               ret nz
 804+ 0CF0 23               inc hl
 805+ 0CF1 7E               ld a, (hl)
 806+ 0CF2 FE 00            cp 0
 807+ 0CF4 C0               ret nz
 808+ 0CF5 CD B5 06         call message
 809+ 0CF8 49 6E 76 61      db 'Invalid configuration',13,10,0
 809+ 0CFC 6C 69 64 20
 809+ 0D00 63 6F 6E 66
 809+ 0D04 69 67 75 72
 809+ 0D08 61 74 69 6F
 809+ 0D0C 6E 0D 0A 00
 810+ 0D10 76               halt
 811+ 0D11
 812+ 0D11
 813+ 0D11
 814+ 0D11              NAME_OF_BDOS:
 815+ 0D11 2F 42 44 4F      db '/BDOS.BIN',0
 815+ 0D15 53 2E 42 49
 815+ 0D19 4E 00
 816+ 0D1B              NAME_OF_BIOS:
 817+ 0D1B 42 49 4F 53      db 'BIOS.BIN',0
 817+ 0D1F 2E 42 49 4E
 817+ 0D23 00
 818+ 0D24              NAME_OF_CORE:
 819+ 0D24 43 4F 52 45      db 'CORE.BIN',0
 819+ 0D28 2E 42 49 4E
 819+ 0D2C 00
 820+ 0D2D              NAME_OF_CCP:
 821+ 0D2D 2F 43 43 50      db '/CCP.BIN',0
 821+ 0D31 2E 42 49 4E
 821+ 0D35 00
 822+ 0D36
 823+ 0D36              CPM_CFG_NAME:
 824+ 0D36 43 50 4D 2E      db 'CPM.CFG',0
 824+ 0D3A 43 46 47 00
 825+ 0D3E              UART_CFG_NAME:
 826+ 0D3E 55 41 52 54      db 'UART.CFG',0
 826+ 0D42 2E 43 46 47
 826+ 0D46 00
 827+ 0D47
 828+ 0D47
 829+ 0D47              first_eight_bytes:
 830+ 0D47 C3 03 F4 00      db $C3, $03, $F4, $00, $00, $C3, $00, $EA
 830+ 0D4B 00 C3 00 EA
 831+ 0D4F              ; JP BIOS-warm-boot, 0, 0, JP BDOS
 832+ 0D4F
 833+ 0D4F
 834+ 0D4F              filesize_buffer equ $C000
 835+ 0D4F
 836+ 0D4F              filesize_buffer_copy equ filesize_buffer+6
 837+ 0D4F
 838+ 0D4F              loader_stack equ filesize_buffer_copy+100
 839+ 0D4F
 840+ 0D4F
 841+ 0D4F              filesize_units:
 842+ 0D4F 00               ds 1
 843+ 0D50
 844+ 0D50              dma_address:
 845+ 0D50 00 00            ds 2
 846+ 0D52
 847+ 0D52              config_file_loc equ $9000
 848+ 0D52              auto_run_char   equ $8FFF
 849+ 0D52
 850+ 0D52              filename_buffer equ 49152-20      ;65535-20
 851+ 0D52              DRIVE_NAME equ filename_buffer-2
 852+ 0D52              disk_buffer equ DRIVE_NAME-36
 853+ 0D52
 854+ 0D52              core_location equ disk_buffer-2         ; Stores the core_start location
 855+ 0D52              bios_location equ core_location-2       ; Stores the bios_start location
 856+ 0D52              bdos_location equ bios_location-2       ; Stores the bdos_start location
 857+ 0D52              ccp_location equ bdos_location-2        ; Stores the ccp_start location
 858+ 0D52              ccp_name equ ccp_location-13            ; stores the name of the ccp file, e.g. MYCCP.BIN with a zero terminator
 859+ 0D52
 860+ 0D52              baud_rate_divisor equ ccp_name-1
 861+ 0D52              flow_control_value equ baud_rate_divisor-1
 862+ 0D52
 863+ 0D52                  ;include "rom.asm"
 864+ 0D52                  ;include "start.asm"
 865+ 0D52                  ;include "ppi.asm"
 866+ 0D52                  ;include "uart.asm"
 867+ 0D52                  ;include "uart1.asm"
 868+ 0D52                  ;include "message.asm"
 869+ 0D52                  ;include "memorystick.asm"
 870+ 0D52                  ;include "filesize.asm"
 871+ 0D52                  ;include "monitor.asm"
 872+ 0D52
 873+ 0D52                  ;include "tiny-basic.asm"
 874+ 0D52                  ;include "GOFL.asm"
# file closed: cpm.asm
  37  0D52                  include "memorystick.asm"
# file opened: memorystick.asm
   1+ 0D52              ; memorystick.asm
   2+ 0D52
   3+ 0D52              store_de:
   4+ 0D52 00 00        	dw 0
   5+ 0D54              store_a:
   6+ 0D54 00           	db 0
   7+ 0D55              ; -----------------------------------------------------------------
   8+ 0D55              ; For DIRectory listing, the filename is passed in the filename_buffer.
   9+ 0D55              ; DE -> DMA AREA
  10+ 0D55              ; a = Current User
  11+ 0D55              ; It will be something like A/ffffffff.xxx
  12+ 0D55              ; A result gets put into the area pointed to by DE, normally the DMA area, in 8.3 format
  13+ 0D55              dir:
  14+ 0D55 ED 53 52 0D  	ld (store_de), de
  15+ 0D59 32 54 0D     	ld (store_a), a
  16+ 0D5C
  17+ 0D5C CD 20 06     	call disk_on
  18+ 0D5F
  19+ 0D5F 21 90 14     	ld hl, CPM_FOLDER_NAME        ; Start at /CPM
  20+ 0D62 CD 33 13     	call open_file
  21+ 0D65 21 9D 14     	ld hl, CPM_DISKS_NAME         ; Then DISKS
  22+ 0D68 CD 33 13     	call open_file
  23+ 0D6B
  24+ 0D6B 21 EC BF     	ld hl, filename_buffer
  25+ 0D6E 7E           	ld a, (hl)
  26+ 0D6F 21 EA BF     	ld hl, DRIVE_NAME             ; Move to "A" .. "P" for required disk
  27+ 0D72 77           	ld (hl), a
  28+ 0D73 23           	inc hl
  29+ 0D74 36 00        	ld (hl), 0
  30+ 0D76 2B           	dec hl
  31+ 0D77 CD 33 13     	call open_file
  32+ 0D7A
  33+ 0D7A              ; Now user number (if greater than 0)
  34+ 0D7A 3A 54 0D     	ld a, (store_a)
  35+ 0D7D FE 00        	cp 0
  36+ 0D7F 28 0E        	jr z, ignore_user
  37+ 0D81
  38+ 0D81 CD 23 11     	call convert_user_number_to_folder_name
  39+ 0D84 21 EA BF     	ld hl, DRIVE_NAME             ; Move to "1" .. "F" for required user
  40+ 0D87 77           	ld (hl), a
  41+ 0D88 23           	inc hl
  42+ 0D89 36 00        	ld (hl), 0
  43+ 0D8B 2B           	dec hl
  44+ 0D8C CD 33 13     	call open_file
  45+ 0D8F
  46+ 0D8F              ignore_user:
  47+ 0D8F 21 8E 14     	ld hl, STAR_DOT_STAR          ; Specify search pattern "*"
  48+ 0D92 CD 33 13     	call open_file
  49+ 0D95
  50+ 0D95              ; Read a file if there is something to read
  51+ 0D95              dir_loop:
  52+ 0D95              ; at this point DE is in store_de, containing address of dma-area
  53+ 0D95 FE 1D        	cp USB_INT_DISK_READ
  54+ 0D97 28 2E        	jr z, dir_loop_good
  55+ 0D99
  56+ 0D99 FE 42        	cp ERR_MISS_FILE              ; This is what you normally get at the end of a dir listing
  57+ 0D9B 28 24        	jr z, dir_no_file
  58+ 0D9D
  59+ 0D9D FE A1        	cp ERR_BPB_ERROR              ; This means a disk format error
  60+ 0D9F 20 20        	jr nz, dir_no_file
  61+ 0DA1
  62+ 0DA1 CD B5 06     	call message
  63+ 0DA4 55 53 42 20  	db 'USB Drive ERROR: FAT only!', 13, 10, 0
  63+ 0DA8 44 72 69 76
  63+ 0DAC 65 20 45 52
  63+ 0DB0 52 4F 52 3A
  63+ 0DB4 20 46 41 54
  63+ 0DB8 20 6F 6E 6C
  63+ 0DBC 79 21 0D 0A
  63+ 0DC0 00
  64+ 0DC1              dir_no_file:
  65+ 0DC1 CD 19 06     	call disk_off
  66+ 0DC4 3E FF        	ld a, 255
  67+ 0DC6 C9           	ret
  68+ 0DC7
  69+ 0DC7              dir_loop_good:
  70+ 0DC7              ; at this point DE is on stack, containing address of dma-area
  71+ 0DC7 3E 27        	ld a, RD_USB_DATA0
  72+ 0DC9 CD 3A 14     	call send_command_byte
  73+ 0DCC CD 43 14     	call read_data_byte           ; Find out how many bytes there are to read
  74+ 0DCF
  75+ 0DCF CD 49 14     	call read_data_bytes_into_buffer ; read them into disk_buffer
  76+ 0DD2 FE 20        	cp 32                         ; Did we read at least 32 bytes?
  77+ 0DD4 30 03        	jr nc, good_length
  78+ 0DD6 C3 59 0E     	jp dir_next
  79+ 0DD9
  80+ 0DD9              good_length:
  81+ 0DD9              ; at this point DE is in store_de, containing address of dma-area
  82+ 0DD9              ; Get the attributes for this entry. $02 = system, $04 = hidden, $10 = directory
  83+ 0DD9 CD 19 06     	call disk_off
  84+ 0DDC 3A D1 BF     	ld a, (disk_buffer+11)
  85+ 0DDF E6 16        	and $16                       ; Check for hidden or system files, or directories
  86+ 0DE1 CA E7 0D     	jp z, it_is_not_system
  87+ 0DE4 C3 59 0E     	jp dir_next                   ; and skip accordingly.
  88+ 0DE7
  89+ 0DE7              it_is_not_system:
  90+ 0DE7              ; Does it match the search pattern?
  91+ 0DE7 06 0B        	ld b, 11
  92+ 0DE9 21 C6 BF     	ld hl, disk_buffer
  93+ 0DEC 11 EE BF     	ld de, filename_buffer+2
  94+ 0DEF              matching_loop:
  95+ 0DEF              ; If the filename_buffer has a '.' then skip over it
  96+ 0DEF              ; and move disk_buffer to start of extension
  97+ 0DEF 1A           	ld a, (de)
  98+ 0DF0 FE 2E        	cp '.'
  99+ 0DF2 20 06        	jr nz, matching_loop1
 100+ 0DF4
 101+ 0DF4 13           	inc de
 102+ 0DF5 21 CE BF     	ld hl, disk_buffer+8
 103+ 0DF8 06 03        	ld b, 3
 104+ 0DFA
 105+ 0DFA              matching_loop1:
 106+ 0DFA 1A           	ld a, (de)
 107+ 0DFB FE 3F        	cp '?'
 108+ 0DFD 28 05        	jr z, matching_loop_good
 109+ 0DFF BE           	cp (hl)
 110+ 0E00 28 02        	jr z, matching_loop_good
 111+ 0E02 18 55        	jr dir_next
 112+ 0E04
 113+ 0E04              matching_loop_good:
 114+ 0E04 13           	inc de
 115+ 0E05 23           	inc hl
 116+ 0E06 10 E7        	djnz matching_loop
 117+ 0E08
 118+ 0E08              ; Copy 11 byte filename + extension
 119+ 0E08 01 0B 00     	ld bc, 11
 120+ 0E0B 21 C6 BF     	ld hl, disk_buffer
 121+ 0E0E ED 5B 52 0D  	ld de, (store_de)
 122+ 0E12
 123+ 0E12              ; The Usernumber goes into the first byte of the FCB
 124+ 0E12 3A 54 0D     	ld a, (store_a)
 125+ 0E15 E6 0F        	and %00001111
 126+ 0E17 12           	ld (de), a                    ; Store user number in FCB result
 127+ 0E18 13           	inc de
 128+ 0E19 ED B0        	ldir                          ; Copy filename & extension
 129+ 0E1B
 130+ 0E1B              ; Fill in a few more details. File size into normal place, plus random record info.
 131+ 0E1B              ; The filesize is a 32 bit number in FAT_DIR_INFO at loc $1C, 1D, 1E and 1F.
 132+ 0E1B              ; We want it in 128 byte sectors, so need to divide by 128.
 133+ 0E1B 21 E2 BF     	ld hl, disk_buffer+$1C
 134+ 0E1E 5E           	ld e, (hl)
 135+ 0E1F 23           	inc hl
 136+ 0E20 56           	ld d, (hl)
 137+ 0E21 23           	inc hl
 138+ 0E22 4E           	ld c, (hl)
 139+ 0E23 23           	inc hl
 140+ 0E24 46           	ld b, (hl)                    ; BCDE has file size
 141+ 0E25 EB           	ex de, hl                     ; 32-bit filesize now in BCHL
 142+ 0E26
 143+ 0E26              ; Divide by 128
 144+ 0E26 CB 25        	sla l                         ; Shift all left by 1 bit
 145+ 0E28 CB 14        	rl h
 146+ 0E2A CB 11        	rl c
 147+ 0E2C CB 10        	rl b
 148+ 0E2E
 149+ 0E2E 6C           	ld l, h
 150+ 0E2F 61           	ld h, c
 151+ 0E30 48           	ld c, b
 152+ 0E31 06 00        	ld b, 0                       ; We've shifted right 8 bits, so effectively divided by 128!
 153+ 0E33
 154+ 0E33 ED 5B 52 0D  	ld de, (store_de)
 155+ 0E37
 156+ 0E37 C5           	push bc                       ; Store the size that is in bchl
 157+ 0E38 E5           	push hl
 158+ 0E39 CD D3 10     	call set_random_pointer_in_fcb ; store hl in FCB random pointer (bc is thrown away!)
 159+ 0E3C E1           	pop hl
 160+ 0E3D C1           	pop bc                        ; restore bchl
 161+ 0E3E
 162+ 0E3E EB           	ex de, hl                     ; hl = fcb, bcde = filesize
 163+ 0E3F 2A 52 0D     	ld hl, (store_de)
 164+ 0E42 CD E2 10     	call set_file_size_in_fcb
 165+ 0E45
 166+ 0E45              ; Clear all 16 disk allocation bytes. TODO: Actually, fill with sensible values
 167+ 0E45 ED 5B 52 0D  	ld de, (store_de)
 168+ 0E49 21 10 00     	ld hl, 16
 169+ 0E4C 19           	add hl, de
 170+ 0E4D EB           	ex de, hl
 171+ 0E4E 06 14        	ld b, 16+4
 172+ 0E50 3E 00        	ld a, 0
 173+ 0E52              clear_allocation_loop:
 174+ 0E52 12           	ld (de), a
 175+ 0E53 13           	inc de
 176+ 0E54 10 FC        	djnz clear_allocation_loop
 177+ 0E56              good_length1:
 178+ 0E56 3E 00        	ld a, 0                       ; 0 = success
 179+ 0E58 C9           	ret
 180+ 0E59
 181+ 0E59              dir_next:
 182+ 0E59 3E 33        	ld a, FILE_ENUM_GO            ; Go to next entry in the directory
 183+ 0E5B CD 3A 14     	call send_command_byte
 184+ 0E5E CD 7F 14     	call read_status_byte
 185+ 0E61 C3 95 0D     	jp dir_loop
 186+ 0E64
 187+ 0E64              ; -----------------------------------------
 188+ 0E64              ; Load bin File
 189+ 0E64              ; The filename needs to be in the filename buffer.
 190+ 0E64              ; The file must be in the /CPM folder.
 191+ 0E64              ; DE points to the location to load it into.
 192+ 0E64              ; The file is loaded into the workspace.
 193+ 0E64              ; There is no check whether the file is too big!!!!
 194+ 0E64              ; Returns zero flag set if success, zero flag cleared on file-not-found.
 195+ 0E64
 196+ 0E64              load_bin_file:
 197+ 0E64 D5           	push de                       ; Store target location for later
 198+ 0E65 CD 20 06     	call disk_on
 199+ 0E68 CD 2C 12     	call connect_to_disk
 200+ 0E6B CD 75 12     	call mount_disk
 201+ 0E6E
 202+ 0E6E 21 90 14     	ld hl, CPM_FOLDER_NAME        ; Start at /CPM
 203+ 0E71 CD 33 13     	call open_file
 204+ 0E74
 205+ 0E74 21 EC BF     	ld hl, filename_buffer        ; Specify filename
 206+ 0E77 CD 33 13     	call open_file
 207+ 0E7A
 208+ 0E7A 28 2B        	jr z, load_file_found
 209+ 0E7C CD 19 06     	call disk_off
 210+ 0E7F CD B5 06     	call message
 211+ 0E82 46 69 6C 65  	db 'File not found ', 0
 211+ 0E86 20 6E 6F 74
 211+ 0E8A 20 66 6F 75
 211+ 0E8E 6E 64 20 00
 212+ 0E92 21 EC BF     	ld hl, filename_buffer
 213+ 0E95              load_file1:
 214+ 0E95 7E           	ld a, (hl)
 215+ 0E96 FE 00        	cp 0
 216+ 0E98 28 06        	jr z, load_file2
 217+ 0E9A CD 6A 06     	call print_a
 218+ 0E9D 23           	inc hl
 219+ 0E9E 18 F5        	jr load_file1
 220+ 0EA0              load_file2:
 221+ 0EA0 CD D4 05     	call newline
 222+ 0EA3 D1           	pop de                        ; Keep stack clear!
 223+ 0EA4 F6 01        	or 1                          ; Clear zero flag for failure
 224+ 0EA6 C9           	ret
 225+ 0EA7              load_file_found:
 226+ 0EA7 CD 19 06     	call disk_off
 227+ 0EAA 3E 3A        	ld a, BYTE_READ
 228+ 0EAC CD 3A 14     	call send_command_byte
 229+ 0EAF 3E FF        	ld a, 255                     ; Request all of the file
 230+ 0EB1 CD 1E 14     	call send_data_byte
 231+ 0EB4 3E FF        	ld a, 255                     ; Yes, all!
 232+ 0EB6 CD 1E 14     	call send_data_byte
 233+ 0EB9
 234+ 0EB9 3E 22        	ld a, GET_STATUS
 235+ 0EBB CD 3A 14     	call send_command_byte
 236+ 0EBE CD 43 14     	call read_data_byte
 237+ 0EC1 E1           	pop hl                        ; Get back the target address
 238+ 0EC2              load_loop1:
 239+ 0EC2 FE 1D        	cp USB_INT_DISK_READ
 240+ 0EC4 20 25        	jr nz, load_finished
 241+ 0EC6
 242+ 0EC6 E5           	push hl
 243+ 0EC7 CD 20 06     	call disk_on
 244+ 0ECA 3E 27        	ld a, RD_USB_DATA0
 245+ 0ECC CD 3A 14     	call send_command_byte
 246+ 0ECF CD 43 14     	call read_data_byte
 247+ 0ED2 E1           	pop hl
 248+ 0ED3 CD 4C 14     	call read_data_bytes_into_hl  ; Read this block of data
 249+ 0ED6 E5           	push hl
 250+ 0ED7 CD 19 06     	call disk_off
 251+ 0EDA 3E 3B        	ld a, BYTE_RD_GO
 252+ 0EDC CD 3A 14     	call send_command_byte
 253+ 0EDF 3E 22        	ld a, GET_STATUS
 254+ 0EE1 CD 3A 14     	call send_command_byte
 255+ 0EE4 CD 43 14     	call read_data_byte
 256+ 0EE7 E1           	pop hl
 257+ 0EE8 C3 C2 0E     	jp load_loop1
 258+ 0EEB              load_finished:
 259+ 0EEB E5           	push hl
 260+ 0EEC CD 46 13     	call close_file
 261+ 0EEF E1           	pop hl
 262+ 0EF0 BF           	cp a                          ; set zero flag for success
 263+ 0EF1 C9           	ret
 264+ 0EF2
 265+ 0EF2              ; ---------------------------------
 266+ 0EF2              ; Directory info read.
 267+ 0EF2              ; Reads a directory entry (of the currently open file) into disk_buffer
 268+ 0EF2              ; Returns ZERO FLAG = set if ok
 269+ 0EF2              dir_info_read:
 270+ 0EF2 3E 37        	ld a, DIR_INFO_READ
 271+ 0EF4 CD 3A 14     	call send_command_byte
 272+ 0EF7 3E FF        	ld a, $FF                     ; Current open file
 273+ 0EF9 CD 1E 14     	call send_data_byte
 274+ 0EFC
 275+ 0EFC CD 7F 14     	call read_status_byte
 276+ 0EFF FE 14        	cp USB_INT_SUCCESS
 277+ 0F01 C0           	ret nz
 278+ 0F02
 279+ 0F02 3E 27        	ld a, RD_USB_DATA0
 280+ 0F04 CD 3A 14     	call send_command_byte
 281+ 0F07 CD 43 14     	call read_data_byte           ; Find out how many bytes there are to read
 282+ 0F0A
 283+ 0F0A CD 49 14     	call read_data_bytes_into_buffer
 284+ 0F0D FE 20        	cp $20                        ; Must have read 32 bytes
 285+ 0F0F C0           	ret nz                        ; or else it is an error
 286+ 0F10              ; call message
 287+ 0F10              ; db 'Read this many bytes: ',0
 288+ 0F10              ; call show_a_as_hex
 289+ 0F10              ; call newline
 290+ 0F10
 291+ 0F10              ; ld b, $20
 292+ 0F10              ; ld hl, disk_buffer
 293+ 0F10              ; dir_info_read1:
 294+ 0F10              ; ld a, (hl)
 295+ 0F10              ; push hl
 296+ 0F10              ; push bc
 297+ 0F10              ; call show_a_as_hex
 298+ 0F10              ; ld a, ','
 299+ 0F10              ; call print_a
 300+ 0F10              ; pop bc
 301+ 0F10              ; pop hl
 302+ 0F10              ; inc hl
 303+ 0F10              ; djnz dir_info_read1
 304+ 0F10              ; call newline
 305+ 0F10
 306+ 0F10 BF           	cp a                          ; set zero flag for success
 307+ 0F11 C9           	ret
 308+ 0F12
 309+ 0F12              ; DIR_INFO_WRITE
 310+ 0F12              ; writes a dir_info block from disk_buffer to the USB drive
 311+ 0F12              ; for the currently open file
 312+ 0F12              dir_info_write:
 313+ 0F12 3E 37        	ld a, DIR_INFO_READ
 314+ 0F14 CD 3A 14     	call send_command_byte
 315+ 0F17 3E FF        	ld a, $FF                     ; Current open file
 316+ 0F19 CD 1E 14     	call send_data_byte
 317+ 0F1C
 318+ 0F1C CD 7F 14     	call read_status_byte
 319+ 0F1F              ; call report_on_status
 320+ 0F1F FE 14        	cp USB_INT_SUCCESS
 321+ 0F21 20 28        	jr nz, dir_info_write2
 322+ 0F23
 323+ 0F23 3E 2E        	ld a, WR_OFS_DATA
 324+ 0F25 CD 3A 14     	call send_command_byte
 325+ 0F28 3E 00        	ld a, 0
 326+ 0F2A CD 1E 14     	call send_data_byte
 327+ 0F2D 3E 20        	ld a, $20
 328+ 0F2F CD 1E 14     	call send_data_byte
 329+ 0F32 06 20        	ld b, $20
 330+ 0F34 21 C6 BF     	ld hl, disk_buffer
 331+ 0F37              dir_info_write1:
 332+ 0F37 7E           	ld a, (hl)
 333+ 0F38 E5           	push hl
 334+ 0F39 C5           	push bc
 335+ 0F3A CD 1E 14     	call send_data_byte
 336+ 0F3D C1           	pop bc
 337+ 0F3E E1           	pop hl
 338+ 0F3F 23           	inc hl
 339+ 0F40 10 F5        	djnz dir_info_write1
 340+ 0F42
 341+ 0F42 3E 38        	ld a, DIR_INFO_SAVE
 342+ 0F44 CD 3A 14     	call send_command_byte
 343+ 0F47 CD 43 14     	call read_data_byte
 344+ 0F4A              ; call report_on_status
 345+ 0F4A C9           	ret
 346+ 0F4B
 347+ 0F4B              dir_info_write2:
 348+ 0F4B C9           	ret
 349+ 0F4C
 350+ 0F4C              ; ----------------------------------
 351+ 0F4C              ; WRITE TO FILE
 352+ 0F4C
 353+ 0F4C              write_to_file:
 354+ 0F4C              ; writes 128 bytes from current location pointed to by DE, to the open file
 355+ 0F4C D5           	push de
 356+ 0F4D 3E 3C        	ld a, BYTE_WRITE
 357+ 0F4F CD 3A 14     	call send_command_byte
 358+ 0F52
 359+ 0F52              ; Send number of bytes we are about to write, as 16 bit number, low first
 360+ 0F52 3E 80        	ld a, 128
 361+ 0F54 CD 1E 14     	call send_data_byte
 362+ 0F57 3E 00        	ld a, 0
 363+ 0F59 CD 1E 14     	call send_data_byte
 364+ 0F5C
 365+ 0F5C E1           	pop hl                        ; hl -> the data
 366+ 0F5D
 367+ 0F5D              write_loop:
 368+ 0F5D CD 7F 14     	call read_status_byte
 369+ 0F60 FE 1E        	cp USB_INT_DISK_WRITE
 370+ 0F62 20 24        	jr nz, write_finished
 371+ 0F64
 372+ 0F64 E5           	push hl
 373+ 0F65              ; Ask if we can send some bytes
 374+ 0F65 3E 2D        	ld a, WR_REQ_DATA
 375+ 0F67 CD 3A 14     	call send_command_byte
 376+ 0F6A CD 43 14     	call read_data_byte
 377+ 0F6D E1           	pop hl
 378+ 0F6E FE 00        	cp 0
 379+ 0F70 28 16        	jr z, write_finished
 380+ 0F72
 381+ 0F72              ; push hl
 382+ 0F72              ; push af
 383+ 0F72              ; call message
 384+ 0F72              ; db 'Bytes to send: ',0
 385+ 0F72              ; pop af
 386+ 0F72              ; push af
 387+ 0F72              ; call show_a_as_hex
 388+ 0F72              ; call newline
 389+ 0F72              ; pop af
 390+ 0F72              ; pop hl
 391+ 0F72
 392+ 0F72 47           	ld b, a
 393+ 0F73              block_loop:
 394+ 0F73 7E           	ld a, (hl)
 395+ 0F74 E5           	push hl
 396+ 0F75 C5           	push bc
 397+ 0F76 CD 1E 14     	call send_data_byte
 398+ 0F79 C1           	pop bc
 399+ 0F7A E1           	pop hl
 400+ 0F7B 23           	inc hl
 401+ 0F7C 10 F5        	djnz block_loop
 402+ 0F7E
 403+ 0F7E E5           	push hl
 404+ 0F7F 3E 3D        	ld a, BYTE_WR_GO
 405+ 0F81 CD 3A 14     	call send_command_byte
 406+ 0F84 E1           	pop hl
 407+ 0F85 C3 5D 0F     	jp write_loop
 408+ 0F88
 409+ 0F88              write_finished:
 410+ 0F88 C9           	ret
 411+ 0F89
 412+ 0F89
 413+ 0F89              ; -------------------------------------------
 414+ 0F89              ; ERASE FILE
 415+ 0F89
 416+ 0F89              erase_file:
 417+ 0F89 3E 2F        	ld a, SET_FILE_NAME
 418+ 0F8B CD 3A 14     	call send_command_byte
 419+ 0F8E 21 EC BF     	ld hl, filename_buffer
 420+ 0F91 CD 24 14     	call send_data_string
 421+ 0F94 3E 35        	ld a, FILE_ERASE
 422+ 0F96 CD 3A 14     	call send_command_byte
 423+ 0F99 CD 7F 14     	call read_status_byte
 424+ 0F9C C9           	ret
 425+ 0F9D
 426+ 0F9D              show_filename_buffer:
 427+ 0F9D 21 EC BF     	ld hl, filename_buffer
 428+ 0FA0 06 14        	ld b, 20
 429+ 0FA2              show_filename_buffer1:
 430+ 0FA2 7E           	ld a, (hl)
 431+ 0FA3 FE 20        	cp 32
 432+ 0FA5 38 0A        	jr c, control_char
 433+ 0FA7              show_filename_buffer2:
 434+ 0FA7 CD 6A 06     	call print_a
 435+ 0FAA 23           	inc hl
 436+ 0FAB 10 F5        	djnz show_filename_buffer1
 437+ 0FAD CD D4 05     	call newline
 438+ 0FB0 C9           	ret
 439+ 0FB1
 440+ 0FB1              control_char:
 441+ 0FB1 C6 40        	add a, 64
 442+ 0FB3 4F           	ld c, a
 443+ 0FB4 3E 5E        	ld a, '^'
 444+ 0FB6 CD 6A 06     	call print_a
 445+ 0FB9 79           	ld a, c
 446+ 0FBA 18 EB        	jr show_filename_buffer2
 447+ 0FBC
 448+ 0FBC              check_tbasic_structure:
 449+ 0FBC              ; Check that there is a /TBASIC folder
 450+ 0FBC              ; and if not, make it!
 451+ 0FBC CD B5 06     	call message
 452+ 0FBF 43 68 65 63  	db 'Checking /TBASIC', 13, 10, 0
 452+ 0FC3 6B 69 6E 67
 452+ 0FC7 20 2F 54 42
 452+ 0FCB 41 53 49 43
 452+ 0FCF 0D 0A 00
 453+ 0FD2
 454+ 0FD2 21 95 14     	ld hl, TINY_BASIC_FOLDER_NAME
 455+ 0FD5 CD BB 13     	call copy_filename_to_buffer
 456+ 0FD8 21 EC BF     	ld hl, filename_buffer
 457+ 0FDB CD 33 13     	call open_file
 458+ 0FDE FE 41        	cp YES_OPEN_DIR               ; This is NOT an error, it is a badly named success code!!!!!!
 459+ 0FE0 C8           	ret z                         ; If found, job done.
 460+ 0FE1 CD 54 13     	call create_directory
 461+ 0FE4 C8           	ret z                         ; If created ok, job done.
 462+ 0FE5 CD B5 06     	call message
 463+ 0FE8 45 52 52 4F  	db 'ERROR creating Tiny Basic folder!', 13, 10, 0
 463+ 0FEC 52 20 63 72
 463+ 0FF0 65 61 74 69
 463+ 0FF4 6E 67 20 54
 463+ 0FF8 69 6E 79 20
 463+ 0FFC 42 61 73 69
 463+ 1000 63 20 66 6F
 463+ 1004 6C 64 65 72
 463+ 1008 21 0D 0A 00
 464+ 100C C9           	ret
 465+ 100D
 466+ 100D              check_cpmdisks_structure:
 467+ 100D              ; Check that we have a disk structure like this:
 468+ 100D              ; /CPMDISKS
 469+ 100D              ; /A
 470+ 100D              ; /B
 471+ 100D              ; /C
 472+ 100D              ; :
 473+ 100D              ; /P
 474+ 100D
 475+ 100D              ; Loop over A..P
 476+ 100D 06 10        	ld b, 16
 477+ 100F              check_cpmdisk_loop:
 478+ 100F C5           	push bc
 479+ 1010              ; Go to /CPM
 480+ 1010 CD B5 06     	call message
 481+ 1013 43 68 65 63  	db 'Checking /CPM', 13, 10, 0
 481+ 1017 6B 69 6E 67
 481+ 101B 20 2F 43 50
 481+ 101F 4D 0D 0A 00
 482+ 1023
 483+ 1023 21 90 14     	ld hl, CPM_FOLDER_NAME
 484+ 1026 CD BB 13     	call copy_filename_to_buffer
 485+ 1029
 486+ 1029              ;********************************************************************************************
 487+ 1029              ;********************************************************************************************
 488+ 1029              ;      PAULO         NAO ESQUECA DE TIRAR ESSE RET
 489+ 1029              ;********************************************************************************************
 490+ 1029              ;********************************************************************************************
 491+ 1029
 492+ 1029              	;JP MenuReturn
 493+ 1029
 494+ 1029
 495+ 1029
 496+ 1029 21 EC BF     	ld hl, filename_buffer
 497+ 102C CD 33 13     	call open_file
 498+ 102F FE 41        	cp YES_OPEN_DIR               ; This is NOT an error, it is a badly named success code!!!!!!
 499+ 1031 20 42        	jr nz, check_cpmdisks_structure2
 500+ 1033
 501+ 1033 CD B5 06     	call message
 502+ 1036 43 68 65 63  	db 'Checking /CPM/DISKS', 13, 10, 0
 502+ 103A 6B 69 6E 67
 502+ 103E 20 2F 43 50
 502+ 1042 4D 2F 44 49
 502+ 1046 53 4B 53 0D
 502+ 104A 0A 00
 503+ 104C
 504+ 104C 21 9D 14     	ld hl, CPM_DISKS_NAME
 505+ 104F CD BB 13     	call copy_filename_to_buffer
 506+ 1052 21 EC BF     	ld hl, filename_buffer
 507+ 1055 CD 33 13     	call open_file
 508+ 1058 FE 41        	cp YES_OPEN_DIR               ; This is NOT an error, it is a badly named success code!!!!!!
 509+ 105A 20 19        	jr nz, check_cpmdisks_structure2
 510+ 105C
 511+ 105C C1           	pop bc
 512+ 105D C5           	push bc
 513+ 105E 78           	ld a, b
 514+ 105F C6 40        	add a, 'A'-1
 515+ 1061 32 EC BF     	ld (filename_buffer), a
 516+ 1064 3E 00        	ld a, 0
 517+ 1066 32 ED BF     	ld (filename_buffer+1), a
 518+ 1069 21 EC BF     	ld hl, filename_buffer
 519+ 106C CD 33 13     	call open_file
 520+ 106F FE 41        	cp YES_OPEN_DIR               ; This is NOT an error, it is a badly named success code!!!!!!
 521+ 1071 20 0B        	jr nz, check_cpmdisks_structure3
 522+ 1073
 523+ 1073 C1           	pop bc                        ; Let's say if we find disk "P" then they are all there!!!
 524+ 1074              ; djnz check_cpmdisk_loop
 525+ 1074
 526+ 1074 C9           	ret
 527+ 1075
 528+ 1075              check_cpmdisks_structure2:
 529+ 1075 C1           	pop bc
 530+ 1076              ; Try to create the missing folder
 531+ 1076              ; ld hl, CPMDISKS_NAME
 532+ 1076              ; call copy_filename_to_buffer
 533+ 1076 CD 54 13     	call create_directory
 534+ 1079 20 0D        	jr nz, check_cpmdisks_structure_fail
 535+ 107B
 536+ 107B              ; Start all over again
 537+ 107B C3 0D 10     	jp check_cpmdisks_structure
 538+ 107E
 539+ 107E              check_cpmdisks_structure3:
 540+ 107E CD 54 13     	call create_directory
 541+ 1081 20 04        	jr nz, check_cpmdisks_subdir_fail
 542+ 1083 C1           	pop bc                        ; All good, so do the next subdir
 543+ 1084 C3 0F 10     	jp check_cpmdisk_loop
 544+ 1087
 545+ 1087              check_cpmdisks_subdir_fail:
 546+ 1087 C1           	pop bc
 547+ 1088              ; Continue through to the next bit...
 548+ 1088              check_cpmdisks_structure_fail:
 549+ 1088 CD B5 06     	call message
 550+ 108B 45 52 52 4F  	db 'ERROR creating CP/M disks!', 13, 10, 0
 550+ 108F 52 20 63 72
 550+ 1093 65 61 74 69
 550+ 1097 6E 67 20 43
 550+ 109B 50 2F 4D 20
 550+ 109F 64 69 73 6B
 550+ 10A3 73 21 0D 0A
 550+ 10A7 00
 551+ 10A8 C9           	ret
 552+ 10A9
 553+ 10A9              move_to_file_pointer:
 554+ 10A9              ; Set the BYTE_LOCATE file position in the currently open file.
 555+ 10A9              ; Value is passed in bcde.
 556+ 10A9 C5           	push bc
 557+ 10AA D5           	push de
 558+ 10AB 3E 39        	ld a, BYTE_LOCATE
 559+ 10AD CD 3A 14     	call send_command_byte
 560+ 10B0 D1           	pop de
 561+ 10B1 D5           	push de
 562+ 10B2 7B           	ld a, e
 563+ 10B3 CD 1E 14     	call send_data_byte
 564+ 10B6 D1           	pop de
 565+ 10B7 7A           	ld a, d
 566+ 10B8 CD 1E 14     	call send_data_byte
 567+ 10BB C1           	pop bc
 568+ 10BC C5           	push bc
 569+ 10BD 79           	ld a, c
 570+ 10BE CD 1E 14     	call send_data_byte
 571+ 10C1 C1           	pop bc
 572+ 10C2 78           	ld a, b
 573+ 10C3 CD 1E 14     	call send_data_byte
 574+ 10C6 CD 7F 14     	call read_status_byte
 575+ 10C9 FE 14        	cp USB_INT_SUCCESS
 576+ 10CB 20 03        	jr nz, move_to_file_pointer_fail ; We expect USB_INT_SUCCESS here
 577+ 10CD
 578+ 10CD 3E 14        	ld a, USB_INT_SUCCESS         ; Return success
 579+ 10CF C9           	ret
 580+ 10D0              move_to_file_pointer_fail:
 581+ 10D0 3E 1F        	ld a, USB_INT_DISK_ERR        ; Return fail
 582+ 10D2 C9           	ret
 583+ 10D3
 584+ 10D3              set_random_pointer_in_fcb:
 585+ 10D3              ; pass in de -> fcb
 586+ 10D3              ; Pass hl = random pointer value
 587+ 10D3              ; Random pointer goes to fcb + 33 & 34. fcb + 35 gets 0.
 588+ 10D3              ; preserve de
 589+ 10D3 D5           	push de
 590+ 10D4 EB           	ex de, hl
 591+ 10D5 01 21 00     	ld bc, 33
 592+ 10D8 09           	add hl, bc
 593+ 10D9 73           	ld (hl), e
 594+ 10DA 23           	inc hl
 595+ 10DB 72           	ld (hl), d
 596+ 10DC 23           	inc hl
 597+ 10DD 36 00        	ld (hl), 0
 598+ 10DF EB           	ex de, hl
 599+ 10E0 D1           	pop de
 600+ 10E1 C9           	ret
 601+ 10E2
 602+ 10E2              set_file_size_in_fcb:
 603+ 10E2              ; Pass HL -> FCB (Note that this is an unusual way to pass it in)
 604+ 10E2              ; Pass file pointer (in 128-byte records) in bcde.
 605+ 10E2              ; Preserves hl
 606+ 10E2
 607+ 10E2              ; The following details are from http://www.primrosebank.net/computers/cpm/cpm_software_mfs.htm
 608+ 10E2              ; RC = record counter, goes from 0 to $80. $80 means full, and represents 128*128=16K.
 609+ 10E2              ; EX = 0 for files < 16K, otherwise 1 - 31 for Extents of 16K each.
 610+ 10E2              ; S2 = high byte for the EXc ounter, so if EX wants to be bigger than 31, overflow it into here.
 611+ 10E2
 612+ 10E2              ; Split bcde into S2, EX & RC.
 613+ 10E2              ; To do this:
 614+ 10E2              ; RC = e & %0111 1111               (i.e. a number 0..127)
 615+ 10E2              ; Divide bcde by 128                (Shift right 7 bits, or shift left 1 bit then right 8)
 616+ 10E2              ; EX = e & %0001 1111               (i.e. it has a max of 31)
 617+ 10E2              ; Shift left 3 places
 618+ 10E2              ; S2 = d
 619+ 10E2
 620+ 10E2              ; RC = e & %0111 1111
 621+ 10E2 E5           	push hl
 622+ 10E3 7B           	ld a, e
 623+ 10E4 E6 7F        	and %01111111                 ; RC is in A
 624+ 10E6
 625+ 10E6 CB 23        	sla e                         ; Shift all left by 1 bit
 626+ 10E8 CB 12        	rl d
 627+ 10EA CB 11        	rl c
 628+ 10EC CB 10        	rl b
 629+ 10EE
 630+ 10EE 5A           	ld e, d                       ; Shift all right by 8 bits
 631+ 10EF 51           	ld d, c
 632+ 10F0 48           	ld c, b
 633+ 10F1 06 00        	ld b, 0                       ; We've effectively shifted right by 7 bits
 634+ 10F3
 635+ 10F3 01 0F 00     	ld bc, 15                     ; ex is as FCB+12, s2 is at FCB+14, rc is at FCB + 15
 636+ 10F6 09           	add hl, bc                    ; hl -> FCB.RC
 637+ 10F7 77           	ld (hl), a                    ; RC is now stored in FCB
 638+ 10F8
 639+ 10F8 2B           	dec hl
 640+ 10F9 2B           	dec hl
 641+ 10FA 2B           	dec hl                        ; hl -> FCB.EX
 642+ 10FB 7B           	ld a, e
 643+ 10FC E6 1F        	and %00011111                 ; EX is in A
 644+ 10FE 77           	ld (hl), a
 645+ 10FF
 646+ 10FF CB 23        	sla e                         ; Shift all left by 1 bit
 647+ 1101 CB 12        	rl d
 648+ 1103 CB 11        	rl c
 649+ 1105 CB 10        	rl b
 650+ 1107 CB 23        	sla e                         ; Shift all left by 1 bit
 651+ 1109 CB 12        	rl d
 652+ 110B CB 11        	rl c
 653+ 110D CB 10        	rl b
 654+ 110F CB 23        	sla e                         ; Shift all left by 1 bit
 655+ 1111 CB 12        	rl d
 656+ 1113 CB 11        	rl c
 657+ 1115 CB 10        	rl b
 658+ 1117
 659+ 1117 23           	inc hl
 660+ 1118 3E 00        	ld a, 0
 661+ 111A 36 00        	ld (hl), 0                    ; Blank out the mystery byte called "unused"
 662+ 111C 23           	inc hl                        ; hl -> FCB.S2
 663+ 111D
 664+ 111D 7A           	ld a, d
 665+ 111E E6 1F        	and %00011111                 ; S2 is in A
 666+ 1120 77           	ld (hl), a
 667+ 1121
 668+ 1121 E1           	pop hl
 669+ 1122 C9           	ret
 670+ 1123
 671+ 1123              convert_user_number_to_folder_name:
 672+ 1123              ; Pass in 1 to 15 in A.
 673+ 1123              ; This returns "1" to "F"
 674+ 1123 E6 0F        	and %00001111
 675+ 1125 C6 30        	add a, '0'                    ; Convert 1-9 => "1".."9"
 676+ 1127 FE 3A        	cp ':'
 677+ 1129 D8           	ret c
 678+ 112A C6 07        	add a, 7
 679+ 112C C9           	ret
 680+ 112D
 681+ 112D              	include "memorystick_low_level.asm"
# file opened: memorystick_low_level.asm
   1++112D              ; memorystick_low_level.asm
   2++112D              ;--------------------;
   3++112D              ; LOW LEVEL ROUTINES ;
   4++112D              ;--------------------;
   5++112D
   6++112D              configure_memorystick:
   7++112D 06 05            ld b, 5                                 ; Have 5 attempts at configuring the module before giving up
   8++112F              configure_memorystick1:
   9++112F C5               push bc
  10++1130 CD 02 13         call connect_to_usb_drive
  11++1133 30 08            jr nc, failed_to_setup
  12++1135 CD 2C 12         call connect_to_disk
  13++1138 CD 75 12         call mount_disk
  14++113B C1               pop bc
  15++113C C9               ret
  16++113D              failed_to_setup:
  17++113D CD FF 05         call long_pause
  18++1140 CD FF 05         call long_pause
  19++1143 CD FF 05         call long_pause
  20++1146 CD FF 05         call long_pause
  21++1149 C1               pop bc
  22++114A 10 E3            djnz configure_memorystick1
  23++114C CD B5 06         call message
  24++114F 45 72 72 6F      db 'Error: CH376S not connected.',13,10,0
  24++1153 72 3A 20 43
  24++1157 48 33 37 36
  24++115B 53 20 6E 6F
  24++115F 74 20 63 6F
  24++1163 6E 6E 65 63
  24++1167 74 65 64 2E
  24++116B 0D 0A 00
  25++116E C3 00 00     	jp	0
  26++1171 C9               ret
  27++1172
  28++1172              ;----------------------------------------------------------------
  29++1172              ; Call this once at startup
  30++1172              reset_ch376_module:
  31++1172 3E 05            ld a, RESET_ALL
  32++1174 CD 3A 14         call send_command_byte
  33++1177 CD FF 05         call long_pause
  34++117A CD FF 05         call long_pause
  35++117D C9               ret
  36++117E
  37++117E              ;-----------------------------------------------------------------
  38++117E              check_module_exists:
  39++117E 3E 06            ld a, CHECK_EXIST
  40++1180 CD 3A 14         call send_command_byte
  41++1183
  42++1183 3E 7B            ld a, 123               ; We send an arbitrary number
  43++1185 CD 1E 14         call send_data_byte
  44++1188
  45++1188 CD 43 14         call read_data_byte
  46++118B
  47++118B FE 84            cp 255-123      ; The result is 255 minus what we sent in
  48++118D CA B6 11     	jp	z, check_module_exists_OK
  49++1190                  ;ret z
  50++1190 CD B5 06         call message
  51++1193 45 52 52 4F      db 'ERROR: CH376S module not found.',13,10,0
  51++1197 52 3A 20 43
  51++119B 48 33 37 36
  51++119F 53 20 6D 6F
  51++11A3 64 75 6C 65
  51++11A7 20 6E 6F 74
  51++11AB 20 66 6F 75
  51++11AF 6E 64 2E 0D
  51++11B3 0A 00
  52++11B5 C9               ret
  53++11B6              check_module_exists_OK:
  54++11B6 CD B5 06         call message
  55++11B9 43 48 33 37      db 'CH376S module FOUND.',13,10,0
  55++11BD 36 53 20 6D
  55++11C1 6F 64 75 6C
  55++11C5 65 20 46 4F
  55++11C9 55 4E 44 2E
  55++11CD 0D 0A 00
  56++11D0 C9           	ret
  57++11D1              ;-----------------------------------------------------------------
  58++11D1              get_module_version:
  59++11D1 3E 01            ld a, GET_IC_VER
  60++11D3 CD 3A 14         call send_command_byte
  61++11D6
  62++11D6 CD 43 14         call read_data_byte
  63++11D9 E6 1F            and %00011111
  64++11DB
  65++11DB CD B5 06         call message
  66++11DE 46 6F 75 6E      db 'Found CH376S Version ',0 ; Mine is v3!!!
  66++11E2 64 20 43 48
  66++11E6 33 37 36 53
  66++11EA 20 56 65 72
  66++11EE 73 69 6F 6E
  66++11F2 20 00
  67++11F4 CD 27 07         call show_a_as_hex
  68++11F7 CD D4 05         call newline
  69++11FA C9               ret
  70++11FB
  71++11FB              ;-----------------------------------------------------------------
  72++11FB              set_usb_host_mode:
  73++11FB 3E 15            ld a, SET_USB_MODE
  74++11FD CD 3A 14         call send_command_byte
  75++1200 3E 06            ld a, 6
  76++1202 CD 1E 14         call send_data_byte
  77++1205 3E 22            ld a, GET_STATUS
  78++1207 CD 7F 14         call read_status_byte
  79++120A              	;push	af
  80++120A              	;call show_a_as_hex
  81++120A              	;call newline
  82++120A              	;pop		af
  83++120A FE 15            cp USB_INT_CONNECT
  84++120C C8               ret z
  85++120D CD B5 06         call message
  86++1210 45 52 52 4F      db 'ERROR: No USB Disk: ',0
  86++1214 52 3A 20 4E
  86++1218 6F 20 55 53
  86++121C 42 20 44 69
  86++1220 73 6B 3A 20
  86++1224 00
  87++1225 CD 27 07     	call show_a_as_hex
  88++1228 CD D4 05     	call newline
  89++122B
  90++122B C9               ret
  91++122C
  92++122C              ;-----------------------------------------------------------------
  93++122C              connect_to_disk:
  94++122C 3E 30            ld a, DISK_CONNECT
  95++122E CD 3A 14         call send_command_byte
  96++1231 3E 22            ld a, GET_STATUS
  97++1233 CD 7F 14         call read_status_byte
  98++1236 CA 5D 12         jp z, connect_to_disk_OK
  99++1239 CD B5 06         call message
 100++123C 45 52 52 4F      db 'ERROR connecting to USB Disk.',13,10,0
 100++1240 52 20 63 6F
 100++1244 6E 6E 65 63
 100++1248 74 69 6E 67
 100++124C 20 74 6F 20
 100++1250 55 53 42 20
 100++1254 44 69 73 6B
 100++1258 2E 0D 0A 00
 101++125C C9               ret
 102++125D              connect_to_disk_OK:
 103++125D CD B5 06         call message
 104++1260 43 48 33 37      db 'CH376S connected.',13,10,0
 104++1264 36 53 20 63
 104++1268 6F 6E 6E 65
 104++126C 63 74 65 64
 104++1270 2E 0D 0A 00
 105++1274 C9           	ret
 106++1275              ;-----------------------------------------------------------------
 107++1275              mount_disk:
 108++1275 3E 31            ld a, DISK_MOUNT
 109++1277 CD 3A 14         call send_command_byte
 110++127A 3E 22            ld a, GET_STATUS
 111++127C CD 7F 14         call read_status_byte
 112++127F C8               ret z
 113++1280 CD B5 06         call message
 114++1283 45 52 52 4F      db 'ERROR mounting USB Disk.',13,10,0
 114++1287 52 20 6D 6F
 114++128B 75 6E 74 69
 114++128F 6E 67 20 55
 114++1293 53 42 20 44
 114++1297 69 73 6B 2E
 114++129B 0D 0A 00
 115++129E C9               ret
 116++129F
 117++129F              ;-----------------------------------------------------------------
 118++129F              read_disk_signature:
 119++129F 3E 27            ld a, RD_USB_DATA0
 120++12A1 CD 3A 14         call send_command_byte
 121++12A4 CD 43 14         call read_data_byte                 ; A = length of bytes to now read
 122++12A7 FE 24            cp 36
 123++12A9 20 39            jr nz, could_not_read_disk_sig
 124++12AB
 125++12AB                  ; Ignore the first 8 bytes
 126++12AB 06 08            ld b, 8
 127++12AD              read_disk_signature1:
 128++12AD C5               push bc
 129++12AE CD 46 14         call read_data_byte_silent
 130++12B1 C1               pop bc
 131++12B2 10 F9            djnz read_disk_signature1
 132++12B4
 133++12B4                  ; Display the next 8 bytes (Manufacturer)
 134++12B4 06 08            ld b, 8
 135++12B6              read_disk_signature2:
 136++12B6 C5               push bc
 137++12B7 CD 46 14         call read_data_byte_silent
 138++12BA CD 6A 06         call print_a
 139++12BD C1               pop bc
 140++12BE 10 F6            djnz read_disk_signature2
 141++12C0 CD D4 05         call newline
 142++12C3
 143++12C3                  ; Display the next 16 bytes (Model)
 144++12C3 06 10            ld b, 16
 145++12C5              read_disk_signature3:
 146++12C5 C5               push bc
 147++12C6 CD 46 14         call read_data_byte_silent
 148++12C9 CD 6A 06         call print_a
 149++12CC C1               pop bc
 150++12CD 10 F6            djnz read_disk_signature3
 151++12CF
 152++12CF 3E 20            ld a, ' '
 153++12D1 CD 6A 06         call print_a
 154++12D4
 155++12D4                  ; Display the next 4 bytes (Version)
 156++12D4 06 04            ld b, 4
 157++12D6              read_disk_signature4:
 158++12D6 C5               push bc
 159++12D7 CD 46 14         call read_data_byte_silent
 160++12DA CD 6A 06         call print_a
 161++12DD C1               pop bc
 162++12DE 10 F6            djnz read_disk_signature4
 163++12E0 CD D4 05         call newline
 164++12E3 C9               ret
 165++12E4
 166++12E4              could_not_read_disk_sig:
 167++12E4 CD B5 06         call message
 168++12E7 45 52 52 4F      db 'ERROR reading disk sig.',13,10,0
 168++12EB 52 20 72 65
 168++12EF 61 64 69 6E
 168++12F3 67 20 64 69
 168++12F7 73 6B 20 73
 168++12FB 69 67 2E 0D
 168++12FF 0A 00
 169++1301 C9               ret
 170++1302
 171++1302              connect_to_usb_drive:
 172++1302                  ; Connects us up to the USB Drive.
 173++1302                  ; Returns Zero flag = true if we can connect ok.
 174++1302                  ;call message
 175++1302                  ;db 'Calling reset',13,10,0
 176++1302 00           	nop
 177++1303 00           	nop
 178++1304 00           	nop
 179++1305 CD 72 11         call reset_ch376_module
 180++1308                  ;call message
 181++1308                  ;db 'Calling set usb mode',13,10,0
 182++1308 00           	nop
 183++1309 00           	nop
 184++130A 00           	nop
 185++130B 00           	nop
 186++130C CD FB 11     	call set_usb_host_mode
 187++130F FE 15            cp USB_INT_CONNECT
 188++1311 CA 1C 13     	jp		Z, fim_ok_connect_to_usb_drive
 189++1314              	;call show_a_as_hex
 190++1314              	;call newline
 191++1314 FE 16        	cp USB_INT_DISCONNECT
 192++1316 CA 1C 13     	jp		Z, fim_ok_connect_to_usb_drive
 193++1319 37           	scf
 194++131A 3F           	ccf
 195++131B C9               ret
 196++131C              fim_ok_connect_to_usb_drive:
 197++131C 37           	scf
 198++131D C9           	ret
 199++131E
 200++131E              create_file:
 201++131E                  ; pass in DE = pointer to filename
 202++131E D5               push de
 203++131F 3E 2F            ld a, SET_FILE_NAME
 204++1321 CD 3A 14         call send_command_byte
 205++1324 E1               pop hl
 206++1325 CD 24 14         call send_data_string
 207++1328
 208++1328 3E 34            ld a, FILE_CREATE
 209++132A CD 3A 14         call send_command_byte
 210++132D
 211++132D CD 7F 14         call read_status_byte
 212++1330 FE 14            cp USB_INT_SUCCESS
 213++1332 C9               ret
 214++1333
 215++1333              open_file:
 216++1333                  ; Tells the module to use the filename from the filename_buffer.
 217++1333                  ; Returns z=true if ok to proceed.
 218++1333                  ; Pass in hl -> directory string, e.g. "/folder"
 219++1333              ;      push hl
 220++1333              ;      call message
 221++1333              ;      db 'open_file:[',0
 222++1333              ;  open_file1:
 223++1333              ;      ld a, (hl)
 224++1333              ;      cp 0
 225++1333              ;      jr z, open_file2
 226++1333              ;      call print_a
 227++1333              ;      inc hl
 228++1333              ;      jr open_file1
 229++1333
 230++1333              ;  open_file2:
 231++1333              ;      ld a, ']'
 232++1333              ;      call print_a
 233++1333              ;      call newline
 234++1333              ;      pop hl
 235++1333
 236++1333 3E 2F            ld a, SET_FILE_NAME
 237++1335 CD 3A 14         call send_command_byte
 238++1338 CD 24 14         call send_data_string
 239++133B 3E 32            ld a, FILE_OPEN
 240++133D CD 3A 14         call send_command_byte
 241++1340 CD 7F 14         call read_status_byte
 242++1343 FE 14            cp USB_INT_SUCCESS
 243++1345 C9               ret
 244++1346
 245++1346              close_file:
 246++1346 3E 36            ld a, FILE_CLOSE
 247++1348 CD 3A 14         call send_command_byte
 248++134B 3E 01            ld a, 1                             ; 1 = update file size if necessary
 249++134D CD 1E 14         call send_data_byte
 250++1350 CD 7F 14         call read_status_byte
 251++1353 C9               ret
 252++1354
 253++1354              create_directory:
 254++1354                  ; Tells the module to use the filename from the filename_buffer to create a directory of that name.
 255++1354                  ; Returns z=true if ok to proceed.
 256++1354 21 EC BF         ld hl, filename_buffer
 257++1357              ; create_directory1:
 258++1357              ;     ld a, (hl)
 259++1357              ;     cp 0
 260++1357              ;     jr z, create_directory2
 261++1357              ;     inc hl
 262++1357              ;     call print_a
 263++1357              ;     jr create_directory1
 264++1357
 265++1357              create_directory2:
 266++1357
 267++1357 3E 2F            ld a, SET_FILE_NAME
 268++1359 CD 3A 14         call send_command_byte
 269++135C 21 EC BF         ld hl, filename_buffer
 270++135F CD 24 14         call send_data_string
 271++1362 3E 40            ld a, DIR_CREATE
 272++1364 CD 3A 14         call send_command_byte
 273++1367 CD 7F 14         call read_status_byte
 274++136A FE 14            cp USB_INT_SUCCESS
 275++136C C9               ret
 276++136D
 277++136D              read_from_file:
 278++136D                  ; Ask to read 128 bytes from the current file into the dma_address area pointed to by DE.
 279++136D                  ; Returns Zero flag set for success, clear for fail.
 280++136D D5               push de
 281++136E 3E 3A            ld a, BYTE_READ
 282++1370 CD 3A 14         call send_command_byte
 283++1373 3E 80            ld a, 128                           ; Request 128 bytes
 284++1375 CD 1E 14         call send_data_byte
 285++1378 3E 00            ld a, 0
 286++137A CD 1E 14         call send_data_byte
 287++137D
 288++137D CD 7F 14         call read_status_byte
 289++1380              read_from_file1:
 290++1380 FE 1D            cp USB_INT_DISK_READ                    ; This means "go ahead and read"
 291++1382 28 07            jr z, read_from_file3
 292++1384 FE 14            cp USB_INT_SUCCESS                      ; Bizarrely this means we are finished
 293++1386 CA B7 13         jp z, read_from_file_cannot
 294++1389 18 2C            jr read_from_file_cannot
 295++138B
 296++138B              read_from_file3:
 297++138B 3E 27            ld a, RD_USB_DATA0                      ; Find out how many bytes are available to read
 298++138D CD 3A 14         call send_command_byte
 299++1390 CD 43 14         call read_data_byte                     ; A = number of bytes available to read
 300++1393
 301++1393                  ; If there are less than 128 bytes to read, fill the buffer with 0s first
 302++1393 FE 80            cp 128
 303++1395 30 0B            jr nc, read_from_file_128
 304++1397 E1               pop hl
 305++1398 E5               push hl
 306++1399 F5               push af
 307++139A 06 80            ld b, 128
 308++139C              read_from_file_padding:
 309++139C 36 00            ld (hl), 0
 310++139E 23               inc hl
 311++139F 10 FB            djnz read_from_file_padding
 312++13A1 F1               pop af
 313++13A2
 314++13A2              read_from_file_128:
 315++13A2 E1               pop hl
 316++13A3 CD 4C 14         call read_data_bytes_into_hl        ; Read this block of data
 317++13A6 E5               push hl
 318++13A7 3E 3B            ld a, BYTE_RD_GO
 319++13A9 CD 3A 14         call send_command_byte
 320++13AC 3E 22            ld a, GET_STATUS
 321++13AE CD 3A 14         call send_command_byte
 322++13B1 CD 43 14         call read_data_byte
 323++13B4 E1               pop hl
 324++13B5                  ; All done, so return ZERO for success
 325++13B5 BF               cp a                                ; set zero flag for success
 326++13B6 C9               ret
 327++13B7
 328++13B7              read_from_file_cannot:
 329++13B7 D1               pop de
 330++13B8 F6 01            or 1                                ; clear zero flag
 331++13BA C9               ret
 332++13BB
 333++13BB              copy_filename_to_buffer:
 334++13BB                  ; Enter with hl->zero-terminated-filename-string
 335++13BB                  ; Copies this to filename_buffer
 336++13BB CD B5 06         call message
 337++13BE 63 6F 6E 74      db 'conteudo HL ',0
 337++13C2 65 75 64 6F
 337++13C6 20 48 4C 20
 337++13CA 00
 338++13CB E5               push    hl
 339++13CC CD 9A 52         call    Print_String
 340++13CF CD 90 52         call    Print_CR
 341++13D2 E1               pop     hl
 342++13D3 11 EC BF         ld de, filename_buffer
 343++13D6 D5               push de
 344++13D7
 345++13D7 7A               ld   a, d
 346++13D8 CD 27 07         call show_a_as_hex
 347++13DB CD D4 05         call newline
 348++13DE 7B               ld   a, e
 349++13DF CD 27 07         call show_a_as_hex
 350++13E2 CD D4 05         call newline
 351++13E5
 352++13E5 D1               pop de
 353++13E6              copy_filename_to_buffer1:
 354++13E6 7E               ld a, (hl)
 355++13E7 12               ld (de), a
 356++13E8 CD 6A 06         call    print_a
 357++13EB 23               inc hl
 358++13EC 13               inc de
 359++13ED FE 00            cp 0
 360++13EF CA F4 13         jp z, copy_filename_to_buffer_end
 361++13F2 18 F2            jr copy_filename_to_buffer1
 362++13F4              copy_filename_to_buffer_end:
 363++13F4
 364++13F4 CD 90 52         call    Print_CR
 365++13F7 CD B5 06         call message
 366++13FA 63 6F 6E 74      db 'conteudo filename_buffer ',0
 366++13FE 65 75 64 6F
 366++1402 20 66 69 6C
 366++1406 65 6E 61 6D
 366++140A 65 5F 62 75
 366++140E 66 66 65 72
 366++1412 20 00
 367++1414 21 EC BF         ld hl, filename_buffer
 368++1417 CD 9A 52         call    Print_String
 369++141A CD 90 52         call    Print_CR
 370++141D C9               ret
 371++141E
 372++141E
 373++141E
 374++141E              send_data_byte:
 375++141E                  ; push af
 376++141E                  ; call message
 377++141E                  ; db 'send_data_byte ', 0
 378++141E                  ; pop af
 379++141E                  ; push af
 380++141E                  ; call show_a_as_hex
 381++141E                  ; call newline
 382++141E                  ; pop af
 383++141E D3 A0            out (mem_stick_data_port), a
 384++1420                  ;call tiny_pause
 385++1420 CD 54 14         call wait_til_not_busy
 386++1423 C9               ret
 387++1424
 388++1424              send_data_string:
 389++1424                  ; The string is pointed to by HL
 390++1424 7E               ld a, (hl)
 391++1425 FE 00            cp 0
 392++1427 28 0B            jr z, send_data_string_done
 393++1429 F5               push af
 394++142A E5               push hl
 395++142B CD 1E 14         call send_data_byte
 396++142E E1               pop hl
 397++142F F1               pop af
 398++1430 23               inc hl
 399++1431 C3 24 14         jp send_data_string
 400++1434              send_data_string_done:
 401++1434 3E 00            ld a, 0
 402++1436 CD 1E 14         call send_data_byte
 403++1439 C9               ret
 404++143A
 405++143A              send_command_byte:
 406++143A                  ; push af
 407++143A                  ; call message
 408++143A                  ; db 'send_command_byte ',0
 409++143A                  ; pop af
 410++143A                  ; push af
 411++143A                  ; call show_a_as_hex
 412++143A                  ; call newline
 413++143A                  ; pop af
 414++143A D3 A1            out (mem_stick_command_port), a
 415++143C                  ;call tiny_pause
 416++143C CD 54 14         call wait_til_not_busy
 417++143F C9               ret
 418++1440
 419++1440              read_command_byte:
 420++1440                  ; call message
 421++1440                  ; db 'read_command_byte: ', 0
 422++1440 DB A1            in a, (mem_stick_command_port)
 423++1442                  ; push af
 424++1442                  ; call show_a_as_hex
 425++1442                  ; call newline
 426++1442                  ; pop af
 427++1442 C9               ret
 428++1443
 429++1443              read_data_byte:
 430++1443                  ; call message
 431++1443                  ; db 'read_data_byte: ', 0
 432++1443 DB A0            in a, (mem_stick_data_port)
 433++1445                  ; push af
 434++1445                  ; call show_a_as_hex
 435++1445                  ; call newline
 436++1445                  ; pop af
 437++1445 C9               ret
 438++1446
 439++1446              read_data_byte_silent:
 440++1446 DB A0            in a, (mem_stick_data_port)
 441++1448 C9               ret
 442++1449
 443++1449              read_data_bytes_into_buffer:
 444++1449                  ; The number of bytes should be in A.
 445++1449                  ; Read that many bytes into the buffer.
 446++1449                  ; The value of A is retained.
 447++1449 21 C6 BF         ld hl, disk_buffer
 448++144C              read_data_bytes_into_hl:
 449++144C                  ; This entry point will read A bytes into the area pointed to by HL.
 450++144C                  ; On exit HL will point to the location after where the bytes were added.
 451++144C F5               push af
 452++144D 47               ld b, a
 453++144E 0E A0            ld c, mem_stick_data_port
 454++1450              read_data_bytes_into_buffer1:
 455++1450 ED B2            inir                    ; A rare use of In, Increase & Repeat!!!
 456++1452 F1               pop af
 457++1453 C9               ret
 458++1454
 459++1454              wait_til_not_busy:
 460++1454                  ; call message
 461++1454                  ; db 'waiting...', 13, 10, 0
 462++1454 01 60 EA         ld bc, 60000            ; retry max 60000 times!!!
 463++1457              wait_til_not_busy1:
 464++1457 C5               push bc
 465++1458 CD 40 14         call read_command_byte
 466++145B E6 10            and %00010000
 467++145D C2 62 14         jp nz, wait_til_not_busy2
 468++1460 C1               pop bc
 469++1461 C9               ret
 470++1462              wait_til_not_busy2:
 471++1462 CD 09 06         call short_pause
 472++1465 C1               pop bc
 473++1466 0B               dec bc
 474++1467 78               ld a, b
 475++1468 B1               or c
 476++1469 20 EC            jr nz, wait_til_not_busy1
 477++146B CD B5 06         call message
 478++146E 5B 55 53 42      db '[USB TIMEOUT]', 13, 10, 0
 478++1472 20 54 49 4D
 478++1476 45 4F 55 54
 478++147A 5D 0D 0A 00
 479++147E C9               ret
 480++147F
 481++147F              read_status_byte:
 482++147F 3E 22            ld a, GET_STATUS
 483++1481 CD 3A 14         call send_command_byte
 484++1484 CD 43 14         call read_data_byte
 485++1487 C9               ret
 486++1488
 487++1488              ; show_status:
 488++1488              ;     call read_status_byte
 489++1488              ;     push af
 490++1488              ;     call report_on_status
 491++1488              ;     pop af
 492++1488              ;     ret                     ; The status is returned in A
 493++1488
 494++1488              ; report_on_status:
 495++1488              ;     cp USB_INT_SUCCESS
 496++1488              ;     jr nz, ros1
 497++1488              ;     call message
 498++1488              ;     db 'USB_INT_SUCCESS',13,10,0
 499++1488              ;     ret
 500++1488              ; ros1:
 501++1488              ;     cp USB_INT_CONNECT
 502++1488              ;     jr nz, ros2
 503++1488              ;     call message
 504++1488              ;     db 'USB_INT_CONNECT',13,10,0
 505++1488              ;     ret
 506++1488              ; ros2:
 507++1488              ;     cp USB_INT_DISCONNECT
 508++1488              ;     jr nz, ros3
 509++1488              ;     call message
 510++1488              ;     db 'USB_INT_DISCONNECT',13,10,0
 511++1488              ;     ret
 512++1488              ; ros3:
 513++1488              ;     cp USB_INT_BUF_OVER
 514++1488              ;     jr nz, ros4
 515++1488              ;     call message
 516++1488              ;     db 'USB_INT_BUF_OVER',13,10,0
 517++1488              ;     ret
 518++1488              ; ros4:
 519++1488              ;     cp USB_INT_USB_READY
 520++1488              ;     jr nz, ros5
 521++1488              ;     call message
 522++1488              ;     db 'USB_INT_USB_READY',13,10,0
 523++1488              ;     ret
 524++1488              ; ros5:
 525++1488              ;     cp USB_INT_DISK_READ
 526++1488              ;     jr nz, ros6
 527++1488              ;     call message
 528++1488              ;     db 'USB_INT_DISK_READ',13,10,0
 529++1488              ;     ret
 530++1488              ; ros6:
 531++1488              ;     cp USB_INT_DISK_WRITE
 532++1488              ;     jr nz, ros7
 533++1488              ;     call message
 534++1488              ;     db 'USB_INT_DISK_WRITE',13,10,0
 535++1488              ;     ret
 536++1488              ; ros7:
 537++1488              ;     cp USB_INT_DISK_ERR
 538++1488              ;     jr nz, ros8
 539++1488              ;     call message
 540++1488              ;     db 'USB_INT_DISK_ERR',13,10,0
 541++1488              ;     ret
 542++1488              ; ros8:
 543++1488              ;     cp YES_OPEN_DIR
 544++1488              ;     jr nz, ros9
 545++1488              ;     call message
 546++1488              ;     db 'YES_OPEN_DIR',13,10,0
 547++1488              ;     ret
 548++1488              ; ros9:
 549++1488              ;     cp ERR_MISS_FILE
 550++1488              ;     jr nz, ros10
 551++1488              ;     call message
 552++1488              ;     db 'ERR_MISS_FILE',13,10,0
 553++1488              ;     ret
 554++1488              ; ros10:
 555++1488              ;     cp ERR_FOUND_NAME
 556++1488              ;     jr nz, ros11
 557++1488              ;     call message
 558++1488              ;     db 'ERR_FOUND_NAME',13,10,0
 559++1488              ;     ret
 560++1488              ; ros11:
 561++1488              ;     cp ERR_DISK_DISCON
 562++1488              ;     jr nz, ros12
 563++1488              ;     call message
 564++1488              ;     db 'ERR_DISK_DISCON',13,10,0
 565++1488              ;     ret
 566++1488              ; ros12:
 567++1488              ;     cp ERR_LARGE_SECTOR
 568++1488              ;     jr nz, ros13
 569++1488              ;     call message
 570++1488              ;     db 'ERR_LARGE_SECTOR',13,10,0
 571++1488              ;     ret
 572++1488              ; ros13:
 573++1488              ;     cp ERR_TYPE_ERROR
 574++1488              ;     jr nz, ros14
 575++1488              ;     call message
 576++1488              ;     db 'ERR_TYPE_ERROR',13,10,0
 577++1488              ;     ret
 578++1488              ; ros14:
 579++1488              ;     cp ERR_BPB_ERROR
 580++1488              ;     jr nz, ros15
 581++1488              ;     call message
 582++1488              ;     db 'ERR_BPB_ERROR',13,10,0
 583++1488              ;     ret
 584++1488              ; ros15:
 585++1488              ;     cp ERR_DISK_FULL
 586++1488              ;     jr nz, ros16
 587++1488              ;     call message
 588++1488              ;     db 'ERR_DISK_FULL',13,10,0
 589++1488              ;     ret
 590++1488              ; ros16:
 591++1488              ;     cp ERR_FDT_OVER
 592++1488              ;     jr nz, ros17
 593++1488              ;     call message
 594++1488              ;     db 'ERR_FDT_OVER',13,10,0
 595++1488              ;     ret
 596++1488              ; ros17:
 597++1488              ;     cp ERR_FILE_CLOSE
 598++1488              ;     jr nz, ros18
 599++1488              ;     call message
 600++1488              ;     db 'ERR_FILE_CLOSE',13,10,0
 601++1488              ;     ret
 602++1488              ; ros18:
 603++1488              ;     call message
 604++1488              ;     db 'UNKNOWN STATUS: ',0
 605++1488              ;     call show_a_as_hex
 606++1488              ;     call newline
 607++1488              ;     ret
 608++1488
 609++1488
 610++1488              mem_stick_data_port 	equ 	0xA0	;16
 611++1488              mem_stick_command_port 	equ 	0xA1	;17
 612++1488
 613++1488              GET_IC_VER equ $01
 614++1488              SET_BAUDRATE equ $02
 615++1488              RESET_ALL equ $05
 616++1488              CHECK_EXIST equ $06
 617++1488              GET_FILE_SIZE equ $0C
 618++1488              SET_USB_MODE equ $15
 619++1488              GET_STATUS equ $22
 620++1488              RD_USB_DATA0 equ $27
 621++1488              WR_USB_DATA equ $2C
 622++1488              WR_REQ_DATA equ $2D
 623++1488              WR_OFS_DATA equ $2E
 624++1488              SET_FILE_NAME equ $2F
 625++1488              DISK_CONNECT equ $30
 626++1488              DISK_MOUNT equ $31
 627++1488              FILE_OPEN equ $32
 628++1488              FILE_ENUM_GO equ $33
 629++1488              FILE_CREATE equ $34
 630++1488              FILE_ERASE equ $35
 631++1488              FILE_CLOSE equ $36
 632++1488              DIR_INFO_READ equ $37
 633++1488              DIR_INFO_SAVE equ $38
 634++1488              BYTE_LOCATE equ $39
 635++1488              BYTE_READ equ $3A
 636++1488              BYTE_RD_GO equ $3B
 637++1488              BYTE_WRITE equ $3C
 638++1488              BYTE_WR_GO equ $3D
 639++1488              DISK_CAPACITY equ $3E
 640++1488              DISK_QUERY equ $3F
 641++1488              DIR_CREATE equ $40
 642++1488
 643++1488
 644++1488              ; Statuses
 645++1488              USB_INT_SUCCESS equ $14
 646++1488              USB_INT_CONNECT equ $15
 647++1488              USB_INT_DISCONNECT equ $16
 648++1488              USB_INT_BUF_OVER equ $17
 649++1488              USB_INT_USB_READY equ $18
 650++1488              USB_INT_DISK_READ equ $1D
 651++1488              USB_INT_DISK_WRITE equ $1E
 652++1488              USB_INT_DISK_ERR equ $1F
 653++1488              YES_OPEN_DIR equ $41
 654++1488              ERR_MISS_FILE equ $42
 655++1488              ERR_FOUND_NAME equ $43
 656++1488              ERR_DISK_DISCON equ $82
 657++1488              ERR_LARGE_SECTOR equ $84
 658++1488              ERR_TYPE_ERROR equ $92
 659++1488              ERR_BPB_ERROR equ $A1
 660++1488              ERR_DISK_FULL equ $B1
 661++1488              ERR_FDT_OVER equ $B2
 662++1488              ERR_FILE_CLOSE equ $B4
 663++1488
 664++1488              ROOT_DIRECTORY:
 665++1488 2A 00            db '*',0
 666++148A
 667++148A              SLASH:
 668++148A 2F 00            db '/',0
 669++148C
 670++148C              ;SAVE_FILENAME:
 671++148C              ;    db 'TESTING',0
 672++148C
 673++148C              ;TARGET_FILENAME:
 674++148C              ;    db '/TARGET2.TXT',0
 675++148C
 676++148C              ;NO_EXTENSION:
 677++148C              ;    db '   ',0
 678++148C
 679++148C              ;TXT_EXTENSION:
 680++148C              ;    db 'TXT',0
# file closed: memorystick_low_level.asm
 682+ 148C
 683+ 148C              ROOT_NAME:
 684+ 148C 2F 00        	db '/', 0
 685+ 148E
 686+ 148E              STAR_DOT_STAR:
 687+ 148E 2A 00        	db '*', 0
 688+ 1490
 689+ 1490              CPM_FOLDER_NAME:
 690+ 1490 2F 43 50 4D  	db '/CPM', 0
 690+ 1494 00
 691+ 1495
 692+ 1495              TINY_BASIC_FOLDER_NAME:
 693+ 1495 2F 54 42 41  	db '/TBASIC', 0
 693+ 1499 53 49 43 00
 694+ 149D
 695+ 149D              CPM_DISKS_NAME:
 696+ 149D 44 49 53 4B  	db 'DISKS', 0
 696+ 14A1 53 00
 697+ 14A3
# file closed: memorystick.asm
  38  14A3                  include "filesize.asm"
# file opened: filesize.asm
   1+ 14A3              ; Routines to help print file sizes for DIR commands.
   2+ 14A3              ; 1KB = 1024 bytes (00 00 04 00 h)
   3+ 14A3              ; 1MB = 1024 KB = 1,048,576 bytes (00 10 00 00 h)
   4+ 14A3              ; 1GB = 1024 MB = 40 00 00 00 h
   5+ 14A3              ; Largest 32 bit number is FFFFFFFF which is 4,294,967,295 which is 4.2GB
   6+ 14A3              ; So this routine can only display file sizes up to 4.2GB.
   7+ 14A3              ; However, I've allowed a 6 byte buffer to store it in for 2 reasons:
   8+ 14A3              ; (1) In the future I may want to use more digits (but probably not!!!)
   9+ 14A3              ; (2) We multiply in incoming number by 10 to show 1 decimal place later in the process.
  10+ 14A3              ; The largest number we ever need to actually show is 1023 because we
  11+ 14A3              ; always divide the number down into larger units.
  12+ 14A3              ; For example, 1023 would be shown as 1023 bytes
  13+ 14A3              ; but 1024 would be shown as 1K.
  14+ 14A3              ; This means we need a divide-by-1024 routine, which is simply Right Shift 10 times!
  15+ 14A3              ; Which is simplified by shifting the whole number right by one byte, then Right Shift twice.
  16+ 14A3              ; This is of course integer maths, so no decimal places.
  17+ 14A3              ; However, we use a trick! First we multiply the number by 10 so that once we have done all
  18+ 14A3              ; the calculations we can simply insert a dot before the last digit to give ourselves 1 decimal place.
  19+ 14A3              ; Therefore 2000 would be shown as 1.9K, but 2048 would be shown as 2.0K.
  20+ 14A3              ; We also do some post-processing to get rid of the leading zeros.
  21+ 14A3              ;
  22+ 14A3              ; Any number less than 00000400h is shown in bytes.
  23+ 14A3              ; Any number less than 00100000h is shown in KB.
  24+ 14A3              ; Any number less than 40000000h is shown in MB.
  25+ 14A3              ; Higher numbers are show in GB.
  26+ 14A3
  27+ 14A3              show_filesize:
  28+ 14A3              ; Pass in 32 bit filesize in the lowest 4 bytes of the 6 byte filesize_buffer.
  29+ 14A3              ; First work out the units
  30+ 14A3 3A 02 C0     	ld a, (filesize_buffer+2)
  31+ 14A6 67           	ld h, a
  32+ 14A7 3A 03 C0     	ld a, (filesize_buffer+3)
  33+ 14AA 6F           	ld l, a
  34+ 14AB 11 00 40     	ld de, $4000
  35+ 14AE B7           	or a
  36+ 14AF ED 52        	sbc hl, de                    ; Compare hl with de
  37+ 14B1 30 4A        	jr nc, show_gigabytes
  38+ 14B3
  39+ 14B3 3A 02 C0     	ld a, (filesize_buffer+2)
  40+ 14B6 67           	ld h, a
  41+ 14B7 3A 03 C0     	ld a, (filesize_buffer+3)
  42+ 14BA 6F           	ld l, a
  43+ 14BB 11 10 00     	ld de, $0010
  44+ 14BE B7           	or a
  45+ 14BF ED 52        	sbc hl, de                    ; Compare hl with de
  46+ 14C1 30 29        	jr nc, show_megabytes
  47+ 14C3
  48+ 14C3 3A 04 C0     	ld a, (filesize_buffer+4)
  49+ 14C6 67           	ld h, a
  50+ 14C7 3A 05 C0     	ld a, (filesize_buffer+5)
  51+ 14CA 6F           	ld l, a
  52+ 14CB 11 00 04     	ld de, $0400
  53+ 14CE B7           	or a
  54+ 14CF ED 52        	sbc hl, de                    ; Compare hl with de
  55+ 14D1 30 0B        	jr nc, show_kilobytes
  56+ 14D3
  57+ 14D3              show_bytes:
  58+ 14D3 CD 73 15     	call multiply_filesize_by_10
  59+ 14D6 3E 42        	ld a, 'B'
  60+ 14D8 32 4F 0D     	ld (filesize_units), a
  61+ 14DB C3 11 15     	jp show_filesize1
  62+ 14DE              show_kilobytes:
  63+ 14DE CD 73 15     	call multiply_filesize_by_10
  64+ 14E1 3E 4B        	ld a, 'K'
  65+ 14E3 32 4F 0D     	ld (filesize_units), a
  66+ 14E6 CD B3 15     	call divide_filesize_by_1024
  67+ 14E9 C3 11 15     	jp show_filesize1
  68+ 14EC              show_megabytes:
  69+ 14EC CD 73 15     	call multiply_filesize_by_10
  70+ 14EF 3E 4D        	ld a, 'M'
  71+ 14F1 32 4F 0D     	ld (filesize_units), a
  72+ 14F4 CD B3 15     	call divide_filesize_by_1024
  73+ 14F7 CD B3 15     	call divide_filesize_by_1024
  74+ 14FA C3 11 15     	jp show_filesize1
  75+ 14FD              show_gigabytes:
  76+ 14FD CD 73 15     	call multiply_filesize_by_10
  77+ 1500 3E 47        	ld a, 'G'
  78+ 1502 32 4F 0D     	ld (filesize_units), a
  79+ 1505 CD B3 15     	call divide_filesize_by_1024
  80+ 1508 CD B3 15     	call divide_filesize_by_1024
  81+ 150B CD B3 15     	call divide_filesize_by_1024
  82+ 150E C3 11 15     	jp show_filesize1
  83+ 1511
  84+ 1511              show_filesize1:
  85+ 1511              ; We now have a number from 0 to 1023 in the filesize_buffer bytes 4 & 5.
  86+ 1511 3A 04 C0     	ld a, (filesize_buffer+4)
  87+ 1514 67           	ld h, a
  88+ 1515 3A 05 C0     	ld a, (filesize_buffer+5)
  89+ 1518 6F           	ld l, a
  90+ 1519 CD 08 16     	call show_hl_as_decimal_to_buffer
  91+ 151C
  92+ 151C              ; By this point the number is in filesize_buffer as a string of 5 digits with leading zeros
  93+ 151C
  94+ 151C CD 51 15     	call remove_leading_zeros
  95+ 151F
  96+ 151F              ; By this point the number is in filesize_buffer as a string of 5 digits with leading spaces
  97+ 151F
  98+ 151F 11 00 C0     	ld de, filesize_buffer
  99+ 1522 06 04        	ld b, 4                       ; show first 4 digits of filesize
 100+ 1524              show_filesize2:
 101+ 1524 1A           	ld a, (de)
 102+ 1525 CD 6A 06     	call print_a
 103+ 1528 13           	inc de
 104+ 1529 10 F9        	djnz show_filesize2
 105+ 152B 3E 2E        	ld a, '.'                     ; then a dot
 106+ 152D CD 6A 06     	call print_a
 107+ 1530 1A           	ld a, (de)                    ; then the last digit
 108+ 1531 CD 6A 06     	call print_a
 109+ 1534 CD DF 05     	call space
 110+ 1537
 111+ 1537 3A 4F 0D     	ld a, (filesize_units)
 112+ 153A FE 42        	cp 'B'
 113+ 153C 20 0A        	jr nz, show_filesize3
 114+ 153E CD B5 06     	call message
 115+ 1541 62 79 74 65  	db 'bytes', 0
 115+ 1545 73 00
 116+ 1547 C9           	ret
 117+ 1548
 118+ 1548              show_filesize3:
 119+ 1548 CD 6A 06     	call print_a
 120+ 154B 3E 42        	ld a, 'B'
 121+ 154D CD 6A 06     	call print_a
 122+ 1550 C9           	ret
 123+ 1551
 124+ 1551              remove_leading_zeros:
 125+ 1551 3A 00 C0     	ld a, (filesize_buffer)
 126+ 1554 FE 30        	cp '0'
 127+ 1556 C0           	ret nz
 128+ 1557 3E 20        	ld a, ' '
 129+ 1559 32 00 C0     	ld (filesize_buffer), a
 130+ 155C
 131+ 155C 3A 01 C0     	ld a, (filesize_buffer+1)
 132+ 155F FE 30        	cp '0'
 133+ 1561 C0           	ret nz
 134+ 1562 3E 20        	ld a, ' '
 135+ 1564 32 01 C0     	ld (filesize_buffer+1), a
 136+ 1567
 137+ 1567 3A 02 C0     	ld a, (filesize_buffer+2)
 138+ 156A FE 30        	cp '0'
 139+ 156C C0           	ret nz
 140+ 156D 3E 20        	ld a, ' '
 141+ 156F 32 02 C0     	ld (filesize_buffer+2), a
 142+ 1572 C9           	ret
 143+ 1573
 144+ 1573              multiply_filesize_by_10:
 145+ 1573              ; To multiply N by 10 we do this:
 146+ 1573              ; Shift-left to get N x 2
 147+ 1573              ; Shift-left twice more to get N x 8
 148+ 1573              ; Add the two totals together
 149+ 1573 CD F2 15     	call shift_left_filesize_buffer
 150+ 1576 CD A7 15     	call copy_filesize_buffer     ; This is N x 2
 151+ 1579 CD F2 15     	call shift_left_filesize_buffer
 152+ 157C CD F2 15     	call shift_left_filesize_buffer ; Buffer has N x 8
 153+ 157F CD 83 15     	call add_filesize_buffer_copy ; Add N*8 and N*2
 154+ 1582 C9           	ret
 155+ 1583
 156+ 1583              add_filesize_buffer_copy:
 157+ 1583              ; Add the copy of the filesize_buffer back onto the real one
 158+ 1583 11 05 C0     	ld de, filesize_buffer+5
 159+ 1586 21 0B C0     	ld hl, filesize_buffer_copy+5
 160+ 1589 1A           	ld a, (de)
 161+ 158A B7           	or a                          ; clear carry
 162+ 158B 8E           	adc a, (hl)
 163+ 158C 12           	ld (de), a
 164+ 158D 1B           	dec de
 165+ 158E 2B           	dec hl
 166+ 158F
 167+ 158F 1A           	ld a, (de)
 168+ 1590 8E           	adc a, (hl)
 169+ 1591 12           	ld (de), a
 170+ 1592 1B           	dec de
 171+ 1593 2B           	dec hl
 172+ 1594
 173+ 1594 1A           	ld a, (de)
 174+ 1595 8E           	adc a, (hl)
 175+ 1596 12           	ld (de), a
 176+ 1597 1B           	dec de
 177+ 1598 2B           	dec hl
 178+ 1599
 179+ 1599 1A           	ld a, (de)
 180+ 159A 8E           	adc a, (hl)
 181+ 159B 12           	ld (de), a
 182+ 159C 1B           	dec de
 183+ 159D 2B           	dec hl
 184+ 159E
 185+ 159E 1A           	ld a, (de)
 186+ 159F 8E           	adc a, (hl)
 187+ 15A0 12           	ld (de), a
 188+ 15A1 1B           	dec de
 189+ 15A2 2B           	dec hl
 190+ 15A3
 191+ 15A3 1A           	ld a, (de)
 192+ 15A4 8E           	adc a, (hl)
 193+ 15A5 12           	ld (de), a
 194+ 15A6
 195+ 15A6 C9           	ret
 196+ 15A7
 197+ 15A7              copy_filesize_buffer:
 198+ 15A7 11 06 C0     	ld de, filesize_buffer_copy
 199+ 15AA 21 00 C0     	ld hl, filesize_buffer
 200+ 15AD 01 06 00     	ld bc, 6
 201+ 15B0 ED B0        	ldir
 202+ 15B2 C9           	ret
 203+ 15B3
 204+ 15B3              divide_filesize_by_1024:
 205+ 15B3              ; Shift everything right by 1 byte
 206+ 15B3 3A 04 C0     	ld a, (filesize_buffer+4)
 207+ 15B6 32 05 C0     	ld (filesize_buffer+5), a
 208+ 15B9 3A 03 C0     	ld a, (filesize_buffer+3)
 209+ 15BC 32 04 C0     	ld (filesize_buffer+4), a
 210+ 15BF 3A 02 C0     	ld a, (filesize_buffer+2)
 211+ 15C2 32 03 C0     	ld (filesize_buffer+3), a
 212+ 15C5 3A 01 C0     	ld a, (filesize_buffer+1)
 213+ 15C8 32 02 C0     	ld (filesize_buffer+2), a
 214+ 15CB 3A 00 C0     	ld a, (filesize_buffer+0)
 215+ 15CE 32 01 C0     	ld (filesize_buffer+1), a
 216+ 15D1 97           	sub a                         ; Put zero in top byte
 217+ 15D2 32 00 C0     	ld (filesize_buffer+0), a
 218+ 15D5
 219+ 15D5              ; Then SHIFT-RIGHT by two bits
 220+ 15D5 CD DC 15     	call shift_right_filesize_buffer
 221+ 15D8 CD DC 15     	call shift_right_filesize_buffer
 222+ 15DB C9           	ret
 223+ 15DC
 224+ 15DC              shift_right_filesize_buffer:
 225+ 15DC 21 00 C0     	ld hl, filesize_buffer
 226+ 15DF B7           	or a                          ; clear carry
 227+ 15E0 CB 1E        	rr (hl)
 228+ 15E2 23           	inc hl
 229+ 15E3 CB 1E        	rr (hl)
 230+ 15E5 23           	inc hl
 231+ 15E6 CB 1E        	rr (hl)
 232+ 15E8 23           	inc hl
 233+ 15E9 CB 1E        	rr (hl)
 234+ 15EB 23           	inc hl
 235+ 15EC CB 1E        	rr (hl)
 236+ 15EE 23           	inc hl
 237+ 15EF CB 1E        	rr (hl)
 238+ 15F1 C9           	ret
 239+ 15F2
 240+ 15F2              shift_left_filesize_buffer:
 241+ 15F2 21 05 C0     	ld hl, filesize_buffer+5
 242+ 15F5 B7           	or a                          ; clear carry
 243+ 15F6 CB 16        	rl (hl)
 244+ 15F8 2B           	dec hl
 245+ 15F9 CB 16        	rl (hl)
 246+ 15FB 2B           	dec hl
 247+ 15FC CB 16        	rl (hl)
 248+ 15FE 2B           	dec hl
 249+ 15FF CB 16        	rl (hl)
 250+ 1601 2B           	dec hl
 251+ 1602 CB 16        	rl (hl)
 252+ 1604 2B           	dec hl
 253+ 1605 CB 16        	rl (hl)
 254+ 1607 C9           	ret
 255+ 1608
 256+ 1608              show_hl_as_decimal_to_buffer:
 257+ 1608              ; Routine adapted from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 258+ 1608 11 00 C0     	ld de, filesize_buffer        ; We put the result here as a string
 259+ 160B 01 F0 D8     	ld	bc, -10000
 260+ 160E CD 24 16     	call	show_hl_as_decimal_to_buffer1
 261+ 1611 01 18 FC     	ld	bc, -1000
 262+ 1614 CD 24 16     	call	show_hl_as_decimal_to_buffer1
 263+ 1617 01 9C FF     	ld	bc, -100
 264+ 161A CD 24 16     	call	show_hl_as_decimal_to_buffer1
 265+ 161D 0E F6        	ld	c, -10
 266+ 161F CD 24 16     	call	show_hl_as_decimal_to_buffer1
 267+ 1622 0E FF        	ld	c, -1
 268+ 1624              show_hl_as_decimal_to_buffer1:
 269+ 1624 3E 2F        	ld	a, '0'-1
 270+ 1626              show_hl_as_decimal_to_buffer2:
 271+ 1626 3C           	inc	a
 272+ 1627 09           	add	hl, bc
 273+ 1628 38 FC        	jr	c, show_hl_as_decimal_to_buffer2
 274+ 162A ED 42        	sbc	hl, bc
 275+ 162C 12           	ld (de), a
 276+ 162D 13           	inc de
 277+ 162E C9           	ret
 278+ 162F
# file closed: filesize.asm
  39  162F                  include "monitor.asm"
# file opened: monitor.asm
   1+ 162F              ; monitor.asm
   2+ 162F              ; The low-level monitor
   3+ 162F
   4+ 162F              monitor_start:
   5+ 162F CD 1A 1A         call monitor_init
   6+ 1632
   7+ 1632              monitor_restart:
   8+ 1632 CD D7 21     	call clear_screen
   9+ 1635 CD 25 18     	call show_welcome_message
  10+ 1638
  11+ 1638              	; If there is an auto-run-character defined, use that instead of a key press.
  12+ 1638 3A FF 8F     	ld a, (auto_run_char)
  13+ 163B FE 00        	cp 0
  14+ 163D 20 08        	jr nz, monitor_loop2
  15+ 163F
  16+ 163F              monitor_loop:
  17+ 163F 3E 3E        	ld a, '>'
  18+ 1641 CD 6A 06     	call print_a
  19+ 1644              monitor_loop1:
  20+ 1644 CD E5 05     	call char_in			; get a char from keyboard
  21+ 1647              monitor_loop2:
  22+ 1647 FE 00        	cp 0					; If it's null, ignore it
  23+ 1649 28 F9        	jr z,monitor_loop1
  24+ 164B FE 30        	cp '0'					; '0' = go to page 0
  25+ 164D 20 06        	jr nz,not00
  26+ 164F CD C7 1E     	call goto_page_0
  27+ 1652 C3 3F 16     	jp monitor_loop
  28+ 1655              not00:
  29+ 1655 FE 4E        	cp 'N'					; User light toggle
  30+ 1657 20 22        	jr nz,not0
  31+ 1659 CD B5 06     	call message
  32+ 165C 43 68 61 6E  	db 'Changing to a New Menu',13,10,0
  32+ 1660 67 69 6E 67
  32+ 1664 20 74 6F 20
  32+ 1668 61 20 4E 65
  32+ 166C 77 20 4D 65
  32+ 1670 6E 75 0D 0A
  32+ 1674 00
  33+ 1675 CD A7 01     	call InputMenu
  34+ 1678 C3 3F 16     	jp monitor_loop
  35+ 167B              not0:
  36+ 167B FE 75        	cp 'u'					; User light toggle
  37+ 167D 20 1D        	jr nz,notu
  38+ 167F CD B5 06     	call message
  39+ 1682 55 73 65 72  	db 'User LED toggled!',13,10,0
  39+ 1686 20 4C 45 44
  39+ 168A 20 74 6F 67
  39+ 168E 67 6C 65 64
  39+ 1692 21 0D 0A 00
  40+ 1696 CD 2E 06     	call user_toggle
  41+ 1699 C3 3F 16     	jp monitor_loop
  42+ 169C              notu:
  43+ 169C FE 33        	cp '3'					; ROM light on
  44+ 169E 20 1F        	jr nz,not3
  45+ 16A0 CD B5 06     	call message
  46+ 16A3 52 4F 4D 20  	db 'ROM light is now ON',13,10,0
  46+ 16A7 6C 69 67 68
  46+ 16AB 74 20 69 73
  46+ 16AF 20 6E 6F 77
  46+ 16B3 20 4F 4E 0D
  46+ 16B7 0A 00
  47+ 16B9 CD 41 06     	call rom_on
  48+ 16BC C3 3F 16     	jp monitor_loop
  49+ 16BF              not3:
  50+ 16BF FE 34        	cp '4'					; ROM light off
  51+ 16C1 20 20        	jr nz,not4
  52+ 16C3 CD B5 06     	call message
  53+ 16C6 52 4F 4D 20  	db 'ROM light is now OFF',13,10,0
  53+ 16CA 6C 69 67 68
  53+ 16CE 74 20 69 73
  53+ 16D2 20 6E 6F 77
  53+ 16D6 20 4F 46 46
  53+ 16DA 0D 0A 00
  54+ 16DD CD 48 06     	call rom_off
  55+ 16E0 C3 3F 16     	jp monitor_loop
  56+ 16E3              not4:
  57+ 16E3 FE 64        	cp 'd'					; Disk LED toggle
  58+ 16E5 20 1D        	jr nz,notd
  59+ 16E7 CD B5 06     	call message
  60+ 16EA 44 49 53 4B  	db 'DISK LED toggled!',13,10,0
  60+ 16EE 20 4C 45 44
  60+ 16F2 20 74 6F 67
  60+ 16F6 67 6C 65 64
  60+ 16FA 21 0D 0A 00
  61+ 16FE CD 13 06     	call disk_toggle
  62+ 1701 C3 3F 16     	jp monitor_loop
  63+ 1704              notd:
  64+ 1704 FE 68        	cp 'h'					; Higher page
  65+ 1706 20 0D        	jr nz,noth
  66+ 1708 3A 64 EA     	ld a,(current_page)
  67+ 170B 3C           	inc a
  68+ 170C 32 64 EA     	ld (current_page),a
  69+ 170F CD E3 21     	call show_page
  70+ 1712 C3 3F 16     	jp monitor_loop
  71+ 1715              noth:
  72+ 1715 FE 6C        	cp 'l'					; Lower page
  73+ 1717 20 0D        	jr nz,notl
  74+ 1719 3A 64 EA     	ld a,(current_page)
  75+ 171C 3D           	dec a
  76+ 171D 32 64 EA     	ld (current_page),a
  77+ 1720 CD E3 21     	call show_page
  78+ 1723 C3 3F 16     	jp monitor_loop
  79+ 1726              notl:
  80+ 1726 FE 6D        	cp 'm'					; Memory map
  81+ 1728 20 06        	jr nz,notm
  82+ 172A CD 55 1A     	call show_memory_map
  83+ 172D C3 3F 16     	jp monitor_loop
  84+ 1730
  85+ 1730              notm:
  86+ 1730 FE 2F        	cp '/'					; Show Menu
  87+ 1732 20 09        	jr nz,not_slash
  88+ 1734 CD D7 21     	call clear_screen
  89+ 1737 CD 25 18     	call show_welcome_message
  90+ 173A C3 3F 16     	jp monitor_loop
  91+ 173D
  92+ 173D              not_slash:
  93+ 173D FE 36        	cp '6'					; Test Uart
  94+ 173F 20 0F        	jr nz,not6
  95+ 1741 CD D7 21     	call clear_screen
  96+ 1744 CD 71 22     	call test_uart
  97+ 1747 CD D7 21     	call clear_screen
  98+ 174A CD 25 18     	call show_welcome_message
  99+ 174D C3 3F 16     	jp monitor_loop
 100+ 1750
 101+ 1750              not6:
 102+ 1750 FE 23        	cp '#'					; HALT
 103+ 1752 20 3C        	jr nz,not_hash
 104+ 1754 CD B5 06     	call message
 105+ 1757 48 41 4C 54  	db 'HALTing Z80. You will need to press Reset after this!',13,10,0
 105+ 175B 69 6E 67 20
 105+ 175F 5A 38 30 2E
 105+ 1763 20 59 6F 75
 105+ 1767 20 77 69 6C
 105+ 176B 6C 20 6E 65
 105+ 176F 65 64 20 74
 105+ 1773 6F 20 70 72
 105+ 1777 65 73 73 20
 105+ 177B 52 65 73 65
 105+ 177F 74 20 61 66
 105+ 1783 74 65 72 20
 105+ 1787 74 68 69 73
 105+ 178B 21 0D 0A 00
 106+ 178F 76           	halt
 107+ 1790
 108+ 1790              not_hash:
 109+ 1790 FE 63        	cp 'c'					; CP/M
 110+ 1792 20 57        	jr nz, not_c
 111+ 1794 CD B5 06         call message
 112+ 1797 53 74 61 72      db 'Starting CP/M... Make sure you have the "ROM Select" jumper set to "switched".',13,10,0
 112+ 179B 74 69 6E 67
 112+ 179F 20 43 50 2F
 112+ 17A3 4D 2E 2E 2E
 112+ 17A7 20 4D 61 6B
 112+ 17AB 65 20 73 75
 112+ 17AF 72 65 20 79
 112+ 17B3 6F 75 20 68
 112+ 17B7 61 76 65 20
 112+ 17BB 74 68 65 20
 112+ 17BF 22 52 4F 4D
 112+ 17C3 20 53 65 6C
 112+ 17C7 65 63 74 22
 112+ 17CB 20 6A 75 6D
 112+ 17CF 70 65 72 20
 112+ 17D3 73 65 74 20
 112+ 17D7 74 6F 20 22
 112+ 17DB 73 77 69 74
 112+ 17DF 63 68 65 64
 112+ 17E3 22 2E 0D 0A
 112+ 17E7 00
 113+ 17E8 C3 77 08         jp start_cpm
 114+ 17EB
 115+ 17EB              not_c:
 116+ 17EB FE 74        	cp 't'					; Tiny Basic
 117+ 17ED 20 09        	jr nz, not_t
 118+ 17EF CD BC 0F         call check_tbasic_structure
 119+ 17F2 CD 36 2C         call TBSTART
 120+ 17F5 C3 32 16     	jp monitor_restart
 121+ 17F8
 122+ 17F8              not_t:
 123+ 17F8 FE 67        	cp 'g'					; Game-of-Life
 124+ 17FA 20 06        	jr nz, not_g
 125+ 17FC CD 7E 38         call GOFL_Begin
 126+ 17FF C3 32 16     	jp monitor_restart
 127+ 1802
 128+ 1802              not_g:
 129+ 1802 FE 62        	cp 'b'					; Burn-in test
 130+ 1804 20 06        	jr nz, not_b
 131+ 1806 CD D3 1E         call burn_in
 132+ 1809 C3 32 16     	jp monitor_restart
 133+ 180C
 134+ 180C              not_b:
 135+ 180C FE 6A        	cp 'j'					; Load jupiter.bin
 136+ 180E 20 03        	jr nz, unknown_char
 137+ 1810 C3 4E 2B         jp load_jupiter_ace
 138+ 1813
 139+ 1813              unknown_char:
 140+ 1813 CD 6A 06     	call print_a			; If we don't understand it, show it!
 141+ 1816 CD D4 05     	call newline
 142+ 1819 C3 3F 16     	jp monitor_loop
 143+ 181C
 144+ 181C              MenuReturn:
 145+ 181C CD D7 21     	call clear_screen
 146+ 181F CD 25 18     	call show_welcome_message
 147+ 1822 C3 3F 16     	jp monitor_loop
 148+ 1825
 149+ 1825              show_welcome_message:
 150+ 1825 CD B5 06     	call message
 151+ 1828 0D 0A        	db 13,10
 152+ 182A 1B 5B 34 32  	db 27,'[42m','+------------------+',13,10
 152+ 182E 6D 2B 2D 2D
 152+ 1832 2D 2D 2D 2D
 152+ 1836 2D 2D 2D 2D
 152+ 183A 2D 2D 2D 2D
 152+ 183E 2D 2D 2D 2D
 152+ 1842 2B 0D 0A
 153+ 1845 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                  ',27,'[42m','|',13,10
 153+ 1849 6D 7C 1B 5B
 153+ 184D 34 30 6D 20
 153+ 1851 20 20 20 20
 153+ 1855 20 20 20 20
 153+ 1859 20 20 20 20
 153+ 185D 20 20 20 20
 153+ 1861 20 1B 5B 34
 153+ 1865 32 6D 7C 0D
 153+ 1869 0A
 154+ 186A 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','  Z80 Playground  ',27,'[42m','|',13,10
 154+ 186E 6D 7C 1B 5B
 154+ 1872 34 30 6D 20
 154+ 1876 20 5A 38 30
 154+ 187A 20 50 6C 61
 154+ 187E 79 67 72 6F
 154+ 1882 75 6E 64 20
 154+ 1886 20 1B 5B 34
 154+ 188A 32 6D 7C 0D
 154+ 188E 0A
 155+ 188F 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                  ',27,'[42m','|',13,10
 155+ 1893 6D 7C 1B 5B
 155+ 1897 34 30 6D 20
 155+ 189B 20 20 20 20
 155+ 189F 20 20 20 20
 155+ 18A3 20 20 20 20
 155+ 18A7 20 20 20 20
 155+ 18AB 20 1B 5B 34
 155+ 18AF 32 6D 7C 0D
 155+ 18B3 0A
 156+ 18B4 1B 5B 34 32  	db 27,'[42m','+------------------+',27,'[40m',13,10,13,10
 156+ 18B8 6D 2B 2D 2D
 156+ 18BC 2D 2D 2D 2D
 156+ 18C0 2D 2D 2D 2D
 156+ 18C4 2D 2D 2D 2D
 156+ 18C8 2D 2D 2D 2D
 156+ 18CC 2B 1B 5B 34
 156+ 18D0 30 6D 0D 0A
 156+ 18D4 0D 0A
 157+ 18D6 4D 6F 6E 69  	db 'Monitor v1.05 February 2021',13,10,13,10
 157+ 18DA 74 6F 72 20
 157+ 18DE 76 31 2E 30
 157+ 18E2 35 20 46 65
 157+ 18E6 62 72 75 61
 157+ 18EA 72 79 20 32
 157+ 18EE 30 32 31 0D
 157+ 18F2 0A 0D 0A
 158+ 18F5 4E 20 3D 20  	db 'N = New Menu', 13, 10
 158+ 18F9 4E 65 77 20
 158+ 18FD 4D 65 6E 75
 158+ 1901 0D 0A
 159+ 1903 63 20 3D 20  	db 'c = CP/M', 13, 10
 159+ 1907 43 50 2F 4D
 159+ 190B 0D 0A
 160+ 190D 74 20 3D 20  	db 't = Tiny Basic',13,10
 160+ 1911 54 69 6E 79
 160+ 1915 20 42 61 73
 160+ 1919 69 63 0D 0A
 161+ 191D 67 20 3D 20  	db 'g = Game-of-Life',13,10
 161+ 1921 47 61 6D 65
 161+ 1925 2D 6F 66 2D
 161+ 1929 4C 69 66 65
 161+ 192D 0D 0A
 162+ 192F 6D 20 3D 20  	db 'm = Memory Map', 13, 10
 162+ 1933 4D 65 6D 6F
 162+ 1937 72 79 20 4D
 162+ 193B 61 70 0D 0A
 163+ 193F 30 20 3D 20  	db '0 = Show Page 0 of Memory', 13, 10
 163+ 1943 53 68 6F 77
 163+ 1947 20 50 61 67
 163+ 194B 65 20 30 20
 163+ 194F 6F 66 20 4D
 163+ 1953 65 6D 6F 72
 163+ 1957 79 0D 0A
 164+ 195A 68 20 3D 20  	db 'h = Move to Higher Page', 13, 10
 164+ 195E 4D 6F 76 65
 164+ 1962 20 74 6F 20
 164+ 1966 48 69 67 68
 164+ 196A 65 72 20 50
 164+ 196E 61 67 65 0D
 164+ 1972 0A
 165+ 1973 6C 20 3D 20  	db 'l = Move to Lower Page', 13, 10
 165+ 1977 4D 6F 76 65
 165+ 197B 20 74 6F 20
 165+ 197F 4C 6F 77 65
 165+ 1983 72 20 50 61
 165+ 1987 67 65 0D 0A
 166+ 198B 75 20 3D 20  	db 'u = User LED toggle', 13, 10
 166+ 198F 55 73 65 72
 166+ 1993 20 4C 45 44
 166+ 1997 20 74 6F 67
 166+ 199B 67 6C 65 0D
 166+ 199F 0A
 167+ 19A0 33 20 3D 20  	db '3 = ROM ON', 13, 10
 167+ 19A4 52 4F 4D 20
 167+ 19A8 4F 4E 0D 0A
 168+ 19AC 34 20 3D 20  	db '4 = ROM OFF', 13, 10
 168+ 19B0 52 4F 4D 20
 168+ 19B4 4F 46 46 0D
 168+ 19B8 0A
 169+ 19B9 64 20 3D 20  	db 'd = Disk LED toggle', 13, 10
 169+ 19BD 44 69 73 6B
 169+ 19C1 20 4C 45 44
 169+ 19C5 20 74 6F 67
 169+ 19C9 67 6C 65 0D
 169+ 19CD 0A
 170+ 19CE 23 20 3D 20  	db '# = Execute HALT instruction',13,10
 170+ 19D2 45 78 65 63
 170+ 19D6 75 74 65 20
 170+ 19DA 48 41 4C 54
 170+ 19DE 20 69 6E 73
 170+ 19E2 74 72 75 63
 170+ 19E6 74 69 6F 6E
 170+ 19EA 0D 0A
 171+ 19EC 62 20 3D 20  	db 'b = Run burn-in test',13,10
 171+ 19F0 52 75 6E 20
 171+ 19F4 62 75 72 6E
 171+ 19F8 2D 69 6E 20
 171+ 19FC 74 65 73 74
 171+ 1A00 0D 0A
 172+ 1A02 2F 20 3D 20  	db '/ = Show this Menu',13,10
 172+ 1A06 53 68 6F 77
 172+ 1A0A 20 74 68 69
 172+ 1A0E 73 20 4D 65
 172+ 1A12 6E 75 0D 0A
 173+ 1A16              	;db 'j = Poor-Man''s Jupiter Ace',13,10
 174+ 1A16 0D 0A 00     	db 13,10,0
 175+ 1A19 C9           	ret
 176+ 1A1A
 177+ 1A1A              monitor_init:
 178+ 1A1A                  ; Four flashes on the USER (blue) LED and disk (yellow) LED
 179+ 1A1A 06 04            ld b, 4
 180+ 1A1C              monitor_init1:
 181+ 1A1C C5               push bc
 182+ 1A1D CD 34 06     	call user_off
 183+ 1A20 CD 20 06     	call disk_on
 184+ 1A23 CD 04 06     	call medium_pause
 185+ 1A26 CD 27 06     	call user_on
 186+ 1A29 CD 19 06     	call disk_off
 187+ 1A2C CD 04 06     	call medium_pause
 188+ 1A2F C1               pop bc
 189+ 1A30 10 EA            djnz monitor_init1
 190+ 1A32 CD 34 06     	call user_off
 191+ 1A35
 192+ 1A35                  ;call ram_fill
 193+ 1A35 C9               ret
 194+ 1A36
 195+ 1A36              ram_fill:
 196+ 1A36                  ; Copy the first 16k of ROM down to ram
 197+ 1A36 21 00 00     	ld hl,0
 198+ 1A39 11 00 00     	ld de,0
 199+ 1A3C 01 00 40     	ld bc, 1024*16
 200+ 1A3F ED B0        	ldir
 201+ 1A41 C9               ret
 202+ 1A42
 203+ 1A42              ;--------------------------------------------------------------------------------------------------
 204+ 1A42
 205+ 1A42              	; If this memory crosses a 1K memory boundary there is the danger
 206+ 1A42              	; that the memory testing will corrupt the code that is running.
 207+ 1A42              	; If memory map crashes, this is why.
 208+ 1A42              	; TODO: Relocate this code to a safe location, such as 1024.
 209+ 1A42
 210+ 1A42 44 41 4E 47  	db 'DANGER AREA STARTS '
 210+ 1A46 45 52 20 41
 210+ 1A4A 52 45 41 20
 210+ 1A4E 53 54 41 52
 210+ 1A52 54 53 20
 211+ 1A55
 212+ 1A55              show_memory_map:
 213+ 1A55              	; Look at the first byte of each 1K block.
 214+ 1A55              	; If it is ROM show one char, if RAM show another.
 215+ 1A55 CD D7 21     	call clear_screen
 216+ 1A58 CD D4 05     	call newline
 217+ 1A5B 11 00 00     	ld de,0
 218+ 1A5E 06 40        	ld b,64
 219+ 1A60
 220+ 1A60              map_loop:
 221+ 1A60 C5           	push bc
 222+ 1A61
 223+ 1A61 1A           	ld a,(de)			; get initial value
 224+ 1A62 47           	ld b,a
 225+ 1A63
 226+ 1A63 3E 00        	ld a,0
 227+ 1A65 12           	ld (de),a			; see if a 0 stores
 228+ 1A66 1A           	ld a,(de)
 229+ 1A67 FE 00        	cp 0
 230+ 1A69 20 10        	jr nz,rom_location
 231+ 1A6B
 232+ 1A6B 3E FF        	ld a,255
 233+ 1A6D 12           	ld (de),a			; see if a 255 stores
 234+ 1A6E 1A           	ld a,(de)
 235+ 1A6F FE FF        	cp 255
 236+ 1A71 20 08        	jr nz,rom_location
 237+ 1A73
 238+ 1A73              ram_location:
 239+ 1A73 CD B5 06     	call message
 240+ 1A76 20 00        	db ' ',0
 241+ 1A78 C3 89 1A     	jp shown_location
 242+ 1A7B              rom_location:
 243+ 1A7B CD B5 06     	call message
 244+ 1A7E 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',0
 244+ 1A82 6D 52 1B 5B
 244+ 1A86 30 6D 00
 245+ 1A89              shown_location:
 246+ 1A89
 247+ 1A89 78           	ld a,b				; restore initial value
 248+ 1A8A 12           	ld (de),a
 249+ 1A8B
 250+ 1A8B C1           	pop bc
 251+ 1A8C 21 00 04     	ld hl, 1024
 252+ 1A8F 19           	add hl,de
 253+ 1A90 EB           	ex de,hl
 254+ 1A91 10 CD        	djnz map_loop
 255+ 1A93
 256+ 1A93 CD D4 05     	call newline
 257+ 1A96              	; Now show a row all of ram
 258+ 1A96 06 40        	ld b, 64
 259+ 1A98              ram_loop:
 260+ 1A98 C5           	push bc
 261+ 1A99 CD B5 06     	call message
 262+ 1A9C 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',0
 262+ 1AA0 6D 72 1B 5B
 262+ 1AA4 30 6D 00
 263+ 1AA7 C1           	pop bc
 264+ 1AA8 10 EE        	djnz ram_loop
 265+ 1AAA
 266+ 1AAA CD D4 05     	call newline
 267+ 1AAD CD B5 06     	call message
 268+ 1AB0 7C 20 20 20  	db '|       |       |       |       |       |       |       |      |',13,10
 268+ 1AB4 20 20 20 20
 268+ 1AB8 7C 20 20 20
 268+ 1ABC 20 20 20 20
 268+ 1AC0 7C 20 20 20
 268+ 1AC4 20 20 20 20
 268+ 1AC8 7C 20 20 20
 268+ 1ACC 20 20 20 20
 268+ 1AD0 7C 20 20 20
 268+ 1AD4 20 20 20 20
 268+ 1AD8 7C 20 20 20
 268+ 1ADC 20 20 20 20
 268+ 1AE0 7C 20 20 20
 268+ 1AE4 20 20 20 20
 268+ 1AE8 7C 20 20 20
 268+ 1AEC 20 20 20 7C
 268+ 1AF0 0D 0A
 269+ 1AF2 30 30 30 30  	db '0000    2000    4000    6000    8000    A000    C000    E000   FFFF',13,10
 269+ 1AF6 20 20 20 20
 269+ 1AFA 32 30 30 30
 269+ 1AFE 20 20 20 20
 269+ 1B02 34 30 30 30
 269+ 1B06 20 20 20 20
 269+ 1B0A 36 30 30 30
 269+ 1B0E 20 20 20 20
 269+ 1B12 38 30 30 30
 269+ 1B16 20 20 20 20
 269+ 1B1A 41 30 30 30
 269+ 1B1E 20 20 20 20
 269+ 1B22 43 30 30 30
 269+ 1B26 20 20 20 20
 269+ 1B2A 45 30 30 30
 269+ 1B2E 20 20 20 46
 269+ 1B32 46 46 46 0D
 269+ 1B36 0A
 270+ 1B37 30 4B 20 20  	db '0K      8K      16K     24K     32K     40K     48K     56K    64K',13,10,13,10
 270+ 1B3B 20 20 20 20
 270+ 1B3F 38 4B 20 20
 270+ 1B43 20 20 20 20
 270+ 1B47 31 36 4B 20
 270+ 1B4B 20 20 20 20
 270+ 1B4F 32 34 4B 20
 270+ 1B53 20 20 20 20
 270+ 1B57 33 32 4B 20
 270+ 1B5B 20 20 20 20
 270+ 1B5F 34 30 4B 20
 270+ 1B63 20 20 20 20
 270+ 1B67 34 38 4B 20
 270+ 1B6B 20 20 20 20
 270+ 1B6F 35 36 4B 20
 270+ 1B73 20 20 20 36
 270+ 1B77 34 4B 0D 0A
 270+ 1B7B 0D 0A
 271+ 1B7D 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',' = ROM    '
 271+ 1B81 6D 52 1B 5B
 271+ 1B85 30 6D 20 3D
 271+ 1B89 20 52 4F 4D
 271+ 1B8D 20 20 20 20
 272+ 1B91 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',' = RAM',13,10
 272+ 1B95 6D 72 1B 5B
 272+ 1B99 30 6D 20 3D
 272+ 1B9D 20 52 41 4D
 272+ 1BA1 0D 0A
 273+ 1BA3 0D 0A            db 13,10
 274+ 1BA5 31 36 43 35  	db '16C550C UART Ports     CH376S Module Ports',13,10
 274+ 1BA9 35 30 43 20
 274+ 1BAD 55 41 52 54
 274+ 1BB1 20 50 6F 72
 274+ 1BB5 74 73 20 20
 274+ 1BB9 20 20 20 43
 274+ 1BBD 48 33 37 36
 274+ 1BC1 53 20 4D 6F
 274+ 1BC5 64 75 6C 65
 274+ 1BC9 20 50 6F 72
 274+ 1BCD 74 73 0D 0A
 275+ 1BD1 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 275+ 1BD5 2D 2D 2D 2D
 275+ 1BD9 2D 2D 2D 2D
 275+ 1BDD 2D 2D 2D 2D
 275+ 1BE1 2D 2D 2D 20
 275+ 1BE5 20 20 20 2D
 275+ 1BE9 2D 2D 2D 2D
 275+ 1BED 2D 2D 2D 2D
 275+ 1BF1 2D 2D 2D 2D
 275+ 1BF5 2D 2D 2D 2D
 275+ 1BF9 2D 2D 0D 0A
 276+ 1BFD 54 58 20 2F  	db 'TX / RX          B8    Data Port        A0',13,10
 276+ 1C01 20 52 58 20
 276+ 1C05 20 20 20 20
 276+ 1C09 20 20 20 20
 276+ 1C0D 20 42 38 20
 276+ 1C11 20 20 20 44
 276+ 1C15 61 74 61 20
 276+ 1C19 50 6F 72 74
 276+ 1C1D 20 20 20 20
 276+ 1C21 20 20 20 20
 276+ 1C25 41 30 0D 0A
 277+ 1C29 49 6E 74 65  	db 'Interrupt Enable B9    Command Port     A1',13,10
 277+ 1C2D 72 72 75 70
 277+ 1C31 74 20 45 6E
 277+ 1C35 61 62 6C 65
 277+ 1C39 20 42 39 20
 277+ 1C3D 20 20 20 43
 277+ 1C41 6F 6D 6D 61
 277+ 1C45 6E 64 20 50
 277+ 1C49 6F 72 74 20
 277+ 1C4D 20 20 20 20
 277+ 1C51 41 31 0D 0A
 278+ 1C55 49 6E 74 65  	db 'Interrup Status  BA    ',13,10
 278+ 1C59 72 72 75 70
 278+ 1C5D 20 53 74 61
 278+ 1C61 74 75 73 20
 278+ 1C65 20 42 41 20
 278+ 1C69 20 20 20 0D
 278+ 1C6D 0A
 279+ 1C6E 4C 69 6E 65  	db 'Line Control     BB    ',13,10
 279+ 1C72 20 43 6F 6E
 279+ 1C76 74 72 6F 6C
 279+ 1C7A 20 20 20 20
 279+ 1C7E 20 42 42 20
 279+ 1C82 20 20 20 0D
 279+ 1C86 0A
 280+ 1C87 4D 6F 64 65  	db 'Modem Control    BC <---- 76543210',13,10
 280+ 1C8B 6D 20 43 6F
 280+ 1C8F 6E 74 72 6F
 280+ 1C93 6C 20 20 20
 280+ 1C97 20 42 43 20
 280+ 1C9B 3C 2D 2D 2D
 280+ 1C9F 2D 20 37 36
 280+ 1CA3 35 34 33 32
 280+ 1CA7 31 30 0D 0A
 281+ 1CAB 4C 69 6E 65  	db 'Line Status      BD      Bit 0 = User LED',13,10
 281+ 1CAF 20 53 74 61
 281+ 1CB3 74 75 73 20
 281+ 1CB7 20 20 20 20
 281+ 1CBB 20 42 44 20
 281+ 1CBF 20 20 20 20
 281+ 1CC3 20 42 69 74
 281+ 1CC7 20 30 20 3D
 281+ 1CCB 20 55 73 65
 281+ 1CCF 72 20 4C 45
 281+ 1CD3 44 0D 0A
 282+ 1CD6 4D 6F 64 65  	db 'Modem Status     BE      Bit 2 = Disk LED',13,10
 282+ 1CDA 6D 20 53 74
 282+ 1CDE 61 74 75 73
 282+ 1CE2 20 20 20 20
 282+ 1CE6 20 42 45 20
 282+ 1CEA 20 20 20 20
 282+ 1CEE 20 42 69 74
 282+ 1CF2 20 32 20 3D
 282+ 1CF6 20 44 69 73
 282+ 1CFA 6B 20 4C 45
 282+ 1CFE 44 0D 0A
 283+ 1D01 53 63 72 61  	db 'Scratch          BF      Bit 3 = ROM Enable',13,10
 283+ 1D05 74 63 68 20
 283+ 1D09 20 20 20 20
 283+ 1D0D 20 20 20 20
 283+ 1D11 20 42 46 20
 283+ 1D15 20 20 20 20
 283+ 1D19 20 42 69 74
 283+ 1D1D 20 33 20 3D
 283+ 1D21 20 52 4F 4D
 283+ 1D25 20 45 6E 61
 283+ 1D29 62 6C 65 0D
 283+ 1D2D 0A
 284+ 1D2E 0D 0A        	db 13,10
 285+ 1D30 49 32 43 20  	db 'I2C - Z80              PPI 8255 	',13,10
 285+ 1D34 2D 20 5A 38
 285+ 1D38 30 20 20 20
 285+ 1D3C 20 20 20 20
 285+ 1D40 20 20 20 20
 285+ 1D44 20 20 20 50
 285+ 1D48 50 49 20 38
 285+ 1D4C 32 35 35 20
 285+ 1D50 09 0D 0A
 286+ 1D53 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 286+ 1D57 2D 2D 2D 2D
 286+ 1D5B 2D 2D 2D 2D
 286+ 1D5F 2D 2D 2D 2D
 286+ 1D63 2D 2D 2D 20
 286+ 1D67 20 20 20 2D
 286+ 1D6B 2D 2D 2D 2D
 286+ 1D6F 2D 2D 2D 2D
 286+ 1D73 2D 2D 2D 2D
 286+ 1D77 2D 2D 2D 2D
 286+ 1D7B 2D 2D 0D 0A
 287+ 1D7F 53 43 4C 20  	db 'SCL              80    Port A           A8',13,10
 287+ 1D83 20 20 20 20
 287+ 1D87 20 20 20 20
 287+ 1D8B 20 20 20 20
 287+ 1D8F 20 38 30 20
 287+ 1D93 20 20 20 50
 287+ 1D97 6F 72 74 20
 287+ 1D9B 41 20 20 20
 287+ 1D9F 20 20 20 20
 287+ 1DA3 20 20 20 20
 287+ 1DA7 41 38 0D 0A
 288+ 1DAB 53 44 41 5F  	db 'SDA_WR           88    Port B           A9',13,10
 288+ 1DAF 57 52 20 20
 288+ 1DB3 20 20 20 20
 288+ 1DB7 20 20 20 20
 288+ 1DBB 20 38 38 20
 288+ 1DBF 20 20 20 50
 288+ 1DC3 6F 72 74 20
 288+ 1DC7 42 20 20 20
 288+ 1DCB 20 20 20 20
 288+ 1DCF 20 20 20 20
 288+ 1DD3 41 39 0D 0A
 289+ 1DD7 53 44 41 5F  	db 'SDA_RD           B0    Port C           AA',13,10
 289+ 1DDB 52 44 20 20
 289+ 1DDF 20 20 20 20
 289+ 1DE3 20 20 20 20
 289+ 1DE7 20 42 30 20
 289+ 1DEB 20 20 20 50
 289+ 1DEF 6F 72 74 20
 289+ 1DF3 43 20 20 20
 289+ 1DF7 20 20 20 20
 289+ 1DFB 20 20 20 20
 289+ 1DFF 41 41 0D 0A
 290+ 1E03 20 20 20 20  	db '                       Ctrl             AB',13,10
 290+ 1E07 20 20 20 20
 290+ 1E0B 20 20 20 20
 290+ 1E0F 20 20 20 20
 290+ 1E13 20 20 20 20
 290+ 1E17 20 20 20 43
 290+ 1E1B 74 72 6C 20
 290+ 1E1F 20 20 20 20
 290+ 1E23 20 20 20 20
 290+ 1E27 20 20 20 20
 290+ 1E2B 41 42 0D 0A
 291+ 1E2F 50 43 46 38  	db 'PCF8574 - Z80              	',13,10
 291+ 1E33 35 37 34 20
 291+ 1E37 2D 20 5A 38
 291+ 1E3B 30 20 20 20
 291+ 1E3F 20 20 20 20
 291+ 1E43 20 20 20 20
 291+ 1E47 20 20 20 09
 291+ 1E4B 0D 0A
 292+ 1E4D 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 292+ 1E51 2D 2D 2D 2D
 292+ 1E55 2D 2D 2D 2D
 292+ 1E59 2D 2D 2D 2D
 292+ 1E5D 2D 2D 2D 20
 292+ 1E61 20 20 20 2D
 292+ 1E65 2D 2D 2D 2D
 292+ 1E69 2D 2D 2D 2D
 292+ 1E6D 2D 2D 2D 2D
 292+ 1E71 2D 2D 2D 2D
 292+ 1E75 2D 2D 0D 0A
 293+ 1E79 50 6F 72 74      DB 'Port             27',13,10
 293+ 1E7D 20 20 20 20
 293+ 1E81 20 20 20 20
 293+ 1E85 20 20 20 20
 293+ 1E89 20 32 37 0D
 293+ 1E8D 0A
 294+ 1E8E 54 68 65 20  	db 'The EEPROM is an ATMEL AT29C512 ID 1F5D',13,10
 294+ 1E92 45 45 50 52
 294+ 1E96 4F 4D 20 69
 294+ 1E9A 73 20 61 6E
 294+ 1E9E 20 41 54 4D
 294+ 1EA2 45 4C 20 41
 294+ 1EA6 54 32 39 43
 294+ 1EAA 35 31 32 20
 294+ 1EAE 49 44 20 31
 294+ 1EB2 46 35 44 0D
 294+ 1EB6 0A
 295+ 1EB7 0D 0A 00     	db 13,10,0
 296+ 1EBA C9           	ret
 297+ 1EBB
 298+ 1EBB 44 41 4E 47  	db 'DANGER ENDS '
 298+ 1EBF 45 52 20 45
 298+ 1EC3 4E 44 53 20
 299+ 1EC7
 300+ 1EC7              ; -------------------------------------------------------------------------------------------------
 301+ 1EC7              goto_page_0:
 302+ 1EC7 3E 00        	ld a, 0
 303+ 1EC9 32 64 EA     	ld (current_page),a
 304+ 1ECC CD D4 05     	call newline
 305+ 1ECF CD E3 21     	call show_page
 306+ 1ED2 C9           	ret
 307+ 1ED3
 308+ 1ED3              ; -------------------------------------------------------------------------------------------------
 309+ 1ED3
 310+ 1ED3              ; This is the BURN-IN test.
 311+ 1ED3              ; I use it on new Z80 Playground boards that I have assemmbled, to check them.
 312+ 1ED3              ; It runs for about an hour, reads and writes files to the USB Drive,
 313+ 1ED3              ; flashes the LEDs, prints things to the screen etc.
 314+ 1ED3              ; The idea is that if it is still running after an hour, the board is good.
 315+ 1ED3              burn_x equ 39000
 316+ 1ED3              burn_y equ 39001
 317+ 1ED3              burn_in_dump_area equ 39002
 318+ 1ED3
 319+ 1ED3              burn_in:
 320+ 1ED3 CD 48 06     	call rom_off					; Needs to be off for ram-test to work
 321+ 1ED6 CD 2E 06     	call user_toggle
 322+ 1ED9 CD D7 21     	call clear_screen
 323+ 1EDC CD B5 06     	call message
 324+ 1EDF 53 74 61 72  	db 'Starting BURN-IN test. This takes about 30 minutes.',13,10,0
 324+ 1EE3 74 69 6E 67
 324+ 1EE7 20 42 55 52
 324+ 1EEB 4E 2D 49 4E
 324+ 1EEF 20 74 65 73
 324+ 1EF3 74 2E 20 54
 324+ 1EF7 68 69 73 20
 324+ 1EFB 74 61 6B 65
 324+ 1EFF 73 20 61 62
 324+ 1F03 6F 75 74 20
 324+ 1F07 33 30 20 6D
 324+ 1F0B 69 6E 75 74
 324+ 1F0F 65 73 2E 0D
 324+ 1F13 0A 00
 325+ 1F15
 326+ 1F15              	; Draw empty box
 327+ 1F15
 328+ 1F15 3E 01        	ld a, 1
 329+ 1F17 32 59 98     	ld (burn_y), a
 330+ 1F1A              draw_loop_y:
 331+ 1F1A CD DF 05     	call space
 332+ 1F1D 06 23        	ld b, 35
 333+ 1F1F              draw_loop_x:
 334+ 1F1F 3E B2        	ld a, 178
 335+ 1F21 CD 6A 06     	call print_a
 336+ 1F24 10 F9        	djnz draw_loop_x
 337+ 1F26
 338+ 1F26 CD D4 05     	call newline
 339+ 1F29
 340+ 1F29 3A 59 98     	ld a, (burn_y)
 341+ 1F2C 3C           	inc a
 342+ 1F2D 32 59 98     	ld (burn_y), a
 343+ 1F30 FE 14        	cp 20
 344+ 1F32 38 E6        	jr c, draw_loop_y
 345+ 1F34
 346+ 1F34              	; Now main burn in loop
 347+ 1F34
 348+ 1F34 3E 00        	ld a, 0
 349+ 1F36 32 59 98     	ld (burn_y), a
 350+ 1F39              burn_in_loop_y:
 351+ 1F39 3E 00        	ld a, 0
 352+ 1F3B 32 58 98     	ld (burn_x), a
 353+ 1F3E              burn_in_loop_x:
 354+ 1F3E CD 9F 1F     	call full_ram_test
 355+ 1F41 C2 A7 20     	jp nz, burn_in_ram_error
 356+ 1F44 CD B7 1F     	call one_minute_burn_in
 357+ 1F47 3A 58 98     	ld a, (burn_x)
 358+ 1F4A 3C           	inc a
 359+ 1F4B 32 58 98     	ld (burn_x), a
 360+ 1F4E FE 20        	cp 32
 361+ 1F50 20 EC        	jr nz, burn_in_loop_x
 362+ 1F52 3A 59 98     	ld a, (burn_y)
 363+ 1F55 3C           	inc a
 364+ 1F56 32 59 98     	ld (burn_y), a
 365+ 1F59 FE 10        	cp 16
 366+ 1F5B 20 DC        	jr nz, burn_in_loop_y
 367+ 1F5D
 368+ 1F5D CD D4 05     	call newline
 369+ 1F60 CD B5 06     	call message
 370+ 1F63 0D 0A 59 41  	db 13,10,'YAY! All tests pass! Press a key to continue...',13,10,0
 370+ 1F67 59 21 20 41
 370+ 1F6B 6C 6C 20 74
 370+ 1F6F 65 73 74 73
 370+ 1F73 20 70 61 73
 370+ 1F77 73 21 20 50
 370+ 1F7B 72 65 73 73
 370+ 1F7F 20 61 20 6B
 370+ 1F83 65 79 20 74
 370+ 1F87 6F 20 63 6F
 370+ 1F8B 6E 74 69 6E
 370+ 1F8F 75 65 2E 2E
 370+ 1F93 2E 0D 0A 00
 371+ 1F97              burn_in_wait:
 372+ 1F97 CD E5 05     	call char_in			; get a char from keyboard
 373+ 1F9A FE 00        	cp 0					; If it's null, ignore it
 374+ 1F9C 28 F9        	jr z,burn_in_wait
 375+ 1F9E C9           	ret
 376+ 1F9F
 377+ 1F9F              full_ram_test:
 378+ 1F9F              	; Tests all of ram.
 379+ 1F9F              	; Returns Z set if success.
 380+ 1F9F 21 FF FF     	ld hl, $FFFF
 381+ 1FA2              full_ram_test1:
 382+ 1FA2 46           	ld b, (hl)
 383+ 1FA3
 384+ 1FA3 36 55        	ld (hl), %01010101
 385+ 1FA5 7E           	ld a, (hl)
 386+ 1FA6 FE 55        	cp %01010101
 387+ 1FA8 C0           	ret nz
 388+ 1FA9
 389+ 1FA9 36 AA        	ld (hl), %10101010
 390+ 1FAB 7E           	ld a, (hl)
 391+ 1FAC FE AA        	cp %10101010
 392+ 1FAE C0           	ret nz
 393+ 1FAF
 394+ 1FAF 70           	ld (hl), b
 395+ 1FB0 2B           	dec hl
 396+ 1FB1 7C           	ld a, h
 397+ 1FB2 B5           	or l
 398+ 1FB3 20 ED        	jr nz, full_ram_test1
 399+ 1FB5 BF               cp a                                ; set zero flag for success
 400+ 1FB6 C9           	ret
 401+ 1FB7
 402+ 1FB7              one_minute_burn_in:
 403+ 1FB7              	; set cursor position
 404+ 1FB7 3E 1B            ld a, ESC
 405+ 1FB9 CD 6A 06         call print_a
 406+ 1FBC 3E 5B            ld a, '['
 407+ 1FBE CD 6A 06         call print_a
 408+ 1FC1 3A 59 98         ld a, (burn_y)
 409+ 1FC4 C6 03        	add a, 3
 410+ 1FC6 CD AE 21         call print_a_as_decimal
 411+ 1FC9 3E 3B            ld a, ';'
 412+ 1FCB CD 6A 06         call print_a
 413+ 1FCE 3A 58 98         ld a, (burn_x)
 414+ 1FD1 C6 03        	add a, 3
 415+ 1FD3 CD AE 21         call print_a_as_decimal
 416+ 1FD6 3E 48            ld a, 'H'
 417+ 1FD8 CD 6A 06         call print_a
 418+ 1FDB
 419+ 1FDB              	; set foreground colour
 420+ 1FDB 3E 1B            ld a, ESC
 421+ 1FDD CD 6A 06         call print_a
 422+ 1FE0 3E 5B            ld a, '['
 423+ 1FE2 CD 6A 06         call print_a
 424+ 1FE5 3E 33            ld a, '3'
 425+ 1FE7 CD 6A 06         call print_a
 426+ 1FEA 3A 58 98         ld a, (burn_x)
 427+ 1FED CB 3F        	srl a
 428+ 1FEF CB 3F        	srl a
 429+ 1FF1 C6 30        	add a, '0'
 430+ 1FF3 CD 6A 06         call print_a
 431+ 1FF6 3E 6D            ld a, 'm'
 432+ 1FF8 CD 6A 06         call print_a
 433+ 1FFB
 434+ 1FFB              	; set background colour
 435+ 1FFB 3E 1B            ld a, ESC
 436+ 1FFD CD 6A 06         call print_a
 437+ 2000 3E 5B            ld a, '['
 438+ 2002 CD 6A 06         call print_a
 439+ 2005 3E 34            ld a, '4'
 440+ 2007 CD 6A 06         call print_a
 441+ 200A 3A 59 98         ld a, (burn_y)
 442+ 200D CB 3F        	srl a
 443+ 200F CB 3F        	srl a
 444+ 2011 C6 30        	add a, '0'
 445+ 2013 CD 6A 06         call print_a
 446+ 2016 3E 6D            ld a, 'm'
 447+ 2018 CD 6A 06         call print_a
 448+ 201B
 449+ 201B 3E DD        	ld a, 221
 450+ 201D CD 6A 06     	call print_a
 451+ 2020
 452+ 2020              	; Normal colour again
 453+ 2020 3E 1B            ld a, ESC
 454+ 2022 CD 6A 06         call print_a
 455+ 2025 3E 5B            ld a, '['
 456+ 2027 CD 6A 06         call print_a
 457+ 202A 3E 30            ld a, '0'
 458+ 202C CD 6A 06         call print_a
 459+ 202F 3E 6D            ld a, 'm'
 460+ 2031 CD 6A 06         call print_a
 461+ 2034
 462+ 2034 CD 3D 21     	call burn_in_write_file
 463+ 2037
 464+ 2037              burn_in_inner_loop:
 465+ 2037 CD 2E 06     	call user_toggle
 466+ 203A CD 13 06     	call disk_toggle
 467+ 203D
 468+ 203D CD 44 20     	call burn_in_read_file
 469+ 2040
 470+ 2040 CD 0C 21     	call burn_in_erase_file
 471+ 2043 C9           	ret
 472+ 2044
 473+ 2044              burn_in_read_file:
 474+ 2044              	; Read the file and check the content.
 475+ 2044              	; If not good, halt the processor.
 476+ 2044 21 8C 14     	ld hl, ROOT_NAME
 477+ 2047 CD 33 13     	call open_file
 478+ 204A 21 CC 21     	ld hl, BURN_IN_NAME
 479+ 204D CD 33 13     	call open_file
 480+ 2050
 481+ 2050 3E 3A        	ld a, BYTE_READ
 482+ 2052 CD 3A 14     	call send_command_byte
 483+ 2055 3E FF        	ld a, 255                           ; Request all of the file
 484+ 2057 CD 1E 14     	call send_data_byte
 485+ 205A 3E FF        	ld a, 255                           ; Yes, all!
 486+ 205C CD 1E 14     	call send_data_byte
 487+ 205F
 488+ 205F 3E 22        	ld a, GET_STATUS
 489+ 2061 CD 3A 14     	call send_command_byte
 490+ 2064 CD 43 14     	call read_data_byte
 491+ 2067 21 5A 98     	ld hl, burn_in_dump_area
 492+ 206A              burn_in_load_loop1:
 493+ 206A FE 1D        	cp USB_INT_DISK_READ
 494+ 206C 20 25        	jr nz, burn_in_load_finished
 495+ 206E
 496+ 206E E5           	push hl
 497+ 206F CD 20 06     	call disk_on
 498+ 2072 3E 27        	ld a, RD_USB_DATA0
 499+ 2074 CD 3A 14     	call send_command_byte
 500+ 2077 CD 43 14     	call read_data_byte
 501+ 207A E1           	pop hl
 502+ 207B CD 4C 14     	call read_data_bytes_into_hl
 503+ 207E E5           	push hl
 504+ 207F CD 19 06     	call disk_off
 505+ 2082 3E 3B        	ld a, BYTE_RD_GO
 506+ 2084 CD 3A 14     	call send_command_byte
 507+ 2087 3E 22        	ld a, GET_STATUS
 508+ 2089 CD 3A 14     	call send_command_byte
 509+ 208C CD 43 14     	call read_data_byte
 510+ 208F E1           	pop hl
 511+ 2090 C3 6A 20     	jp burn_in_load_loop1
 512+ 2093              burn_in_load_finished:
 513+ 2093 CD 46 13     	call close_file
 514+ 2096
 515+ 2096              	; Now compare file content with what we wrote there originally
 516+ 2096 11 00 90     	ld de, config_file_loc
 517+ 2099 21 5A 98     	ld hl, burn_in_dump_area
 518+ 209C 06 0A        	ld b, 10
 519+ 209E              burn_in_compare_loop:
 520+ 209E 1A           	ld a, (de)
 521+ 209F BE           	cp (hl)
 522+ 20A0 20 20        	jr nz, burn_in_compare_failed
 523+ 20A2 13           	inc de
 524+ 20A3 23           	inc hl
 525+ 20A4 10 F8        	djnz burn_in_compare_loop
 526+ 20A6 C9           	ret
 527+ 20A7
 528+ 20A7              burn_in_ram_error:
 529+ 20A7 CD B5 06     	call message
 530+ 20AA 52 41 4D 20  	db 'RAM error at ',0
 530+ 20AE 65 72 72 6F
 530+ 20B2 72 20 61 74
 530+ 20B6 20 00
 531+ 20B8 CD 11 07     	call show_hl_as_hex
 532+ 20BB CD B5 06     	call message
 533+ 20BE 0D 0A 00     	db 13,10,0
 534+ 20C1 76           	halt
 535+ 20C2
 536+ 20C2              burn_in_compare_failed:
 537+ 20C2 CD B5 06     	call message
 538+ 20C5 46 69 6C 65  	db 'Files were different!',13,10,0
 538+ 20C9 73 20 77 65
 538+ 20CD 72 65 20 64
 538+ 20D1 69 66 66 65
 538+ 20D5 72 65 6E 74
 538+ 20D9 21 0D 0A 00
 539+ 20DD CD B5 06     	call message
 540+ 20E0 45 78 70 65  	db 'Expected: ',0
 540+ 20E4 63 74 65 64
 540+ 20E8 3A 20 00
 541+ 20EB 21 00 90     	ld hl, config_file_loc
 542+ 20EE CD 63 22     	call show_string_at_hl
 543+ 20F1 CD D4 05     	call newline
 544+ 20F4
 545+ 20F4 CD B5 06     	call message
 546+ 20F7 41 63 74 75  	db 'Actual  : ',0
 546+ 20FB 61 6C 20 20
 546+ 20FF 3A 20 00
 547+ 2102 21 5A 98     	ld hl, burn_in_dump_area
 548+ 2105 CD 63 22     	call show_string_at_hl
 549+ 2108 CD D4 05     	call newline
 550+ 210B
 551+ 210B 76           	halt
 552+ 210C
 553+ 210C              burn_in_erase_file:
 554+ 210C              	; Try to open the test file
 555+ 210C CD 46 13     	call close_file
 556+ 210F 21 8C 14     	ld hl, ROOT_NAME
 557+ 2112 CD 33 13     	call open_file
 558+ 2115 21 CC 21     	ld hl, BURN_IN_NAME
 559+ 2118 CD 33 13     	call open_file
 560+ 211B 20 1C        	jr nz, burn_in_file_not_found
 561+ 211D CD 46 13     	call close_file
 562+ 2120
 563+ 2120              	; Erase it if it exists
 564+ 2120 21 8C 14     	ld hl, ROOT_NAME
 565+ 2123 CD 33 13     	call open_file
 566+ 2126 3E 2F        	ld a, SET_FILE_NAME
 567+ 2128 CD 3A 14     	call send_command_byte
 568+ 212B 21 CC 21     	ld hl, BURN_IN_NAME
 569+ 212E CD 24 14     	call send_data_string
 570+ 2131 3E 35        	ld a, FILE_ERASE
 571+ 2133 CD 3A 14     	call send_command_byte
 572+ 2136 CD 7F 14     	call read_status_byte
 573+ 2139              burn_in_file_not_found:
 574+ 2139 CD 46 13     	call close_file
 575+ 213C C9           	ret
 576+ 213D
 577+ 213D              burn_in_write_file:
 578+ 213D CD 0C 21     	call burn_in_erase_file
 579+ 2140
 580+ 2140              	; Create it and put a value in it
 581+ 2140 21 8C 14     	ld hl, ROOT_NAME
 582+ 2143 CD 33 13     	call open_file
 583+ 2146 11 CC 21     	ld de, BURN_IN_NAME
 584+ 2149 CD 1E 13     	call create_file
 585+ 214C 28 23        	jr z, burnin_create_ok
 586+ 214E CD B5 06     	call message
 587+ 2151 45 52 52 4F  	db 'ERROR creating burn-in file.',13,10,0
 587+ 2155 52 20 63 72
 587+ 2159 65 61 74 69
 587+ 215D 6E 67 20 62
 587+ 2161 75 72 6E 2D
 587+ 2165 69 6E 20 66
 587+ 2169 69 6C 65 2E
 587+ 216D 0D 0A 00
 588+ 2170 76           	halt
 589+ 2171
 590+ 2171              burnin_create_ok:
 591+ 2171 3E 3C        	ld a, BYTE_WRITE
 592+ 2173 CD 3A 14     	call send_command_byte
 593+ 2176
 594+ 2176              	; Send number of bytes we are about to write, as 16 bit number, low first
 595+ 2176 CD 85 2E     	call get_program_size
 596+ 2179 3E 0A        	ld a, 10
 597+ 217B CD 1E 14     	call send_data_byte
 598+ 217E 3E 00        	ld a, 0
 599+ 2180 CD 1E 14     	call send_data_byte
 600+ 2183
 601+ 2183 21 00 90     	ld hl, config_file_loc
 602+ 2186 36 48        	ld (hl), 'H'
 603+ 2188 23           	inc hl
 604+ 2189 36 65        	ld (hl), 'e'
 605+ 218B 23           	inc hl
 606+ 218C 36 6C        	ld (hl), 'l'
 607+ 218E 23           	inc hl
 608+ 218F 36 6C        	ld (hl), 'l'
 609+ 2191 23           	inc hl
 610+ 2192 36 6F        	ld (hl), 'o'
 611+ 2194 23           	inc hl
 612+ 2195 3A 58 98     	ld a, (burn_x)
 613+ 2198 C6 21        	add a, 33
 614+ 219A 77           	ld (hl), a
 615+ 219B 23           	inc hl
 616+ 219C 77           	ld (hl), a
 617+ 219D 23           	inc hl
 618+ 219E 77           	ld (hl), a
 619+ 219F 23           	inc hl
 620+ 21A0 77           	ld (hl), a
 621+ 21A1 23           	inc hl
 622+ 21A2 36 00        	ld (hl), 0
 623+ 21A4
 624+ 21A4 21 00 90     	ld hl, config_file_loc			; Write the bytes that are in this temp area
 625+ 21A7 CD 5D 0F     	call write_loop
 626+ 21AA CD 46 13     	call close_file
 627+ 21AD C9           	ret
 628+ 21AE
 629+ 21AE              print_a_as_decimal:
 630+ 21AE 06 00        	ld b, 0
 631+ 21B0              print_a_as_decimal1:
 632+ 21B0 FE 0A        	cp 10
 633+ 21B2 38 06        	jr c, print_a_as_decimal_units
 634+ 21B4 04           	inc b
 635+ 21B5 0E 0A        	ld c, 10
 636+ 21B7 91           	sub c
 637+ 21B8 18 F6        	jr print_a_as_decimal1
 638+ 21BA
 639+ 21BA              print_a_as_decimal_units:
 640+ 21BA F5           	push af
 641+ 21BB 78           	ld a, b
 642+ 21BC FE 00        	cp 0
 643+ 21BE 28 05        	jr z, print_a_as_decimal_units1
 644+ 21C0 C6 30        	add a, '0'
 645+ 21C2 CD 6A 06     	call print_a
 646+ 21C5              print_a_as_decimal_units1:
 647+ 21C5 F1           	pop af
 648+ 21C6 C6 30        	add a, '0'
 649+ 21C8 CD 6A 06     	call print_a
 650+ 21CB C9           	ret
 651+ 21CC
 652+ 21CC              BURN_IN_NAME:
 653+ 21CC 42 55 52 4E  	db 'BURNIN.TXT',0
 653+ 21D0 49 4E 2E 54
 653+ 21D4 58 54 00
 654+ 21D7
 655+ 21D7              	include "printing.asm"
# file opened: printing.asm
   1++21D7              ; printing.asm
   2++21D7
   3++21D7              ; -------------------------------------------------------------------------------------------------
   4++21D7
   5++21D7              clear_screen:
   6++21D7 CD B5 06     	call message
   7++21DA 1B 5B 32 4A  	db 27,'[2J',27,'[H',0
   7++21DE 1B 5B 48 00
   8++21E2 C9           	ret
   9++21E3
  10++21E3              show_page:
  11++21E3 CD D7 21     	call clear_screen
  12++21E6
  13++21E6 3A 64 EA     	ld a,(current_page)
  14++21E9 57           	ld d,a
  15++21EA 1E 00        	ld e,0					; de holds address of start of page to show
  16++21EC
  17++21EC 0E 10        	ld c,16					; rows to show
  18++21EE              row_loop:
  19++21EE D5           	push de
  20++21EF CD 5A 22     	call show_de_as_hex		; show the address
  21++21F2 CD DF 05     	call space
  22++21F5 D1           	pop de
  23++21F6
  24++21F6 D5           	push de
  25++21F7 06 10        	ld b,16					; bytes per row
  26++21F9              col_loop:
  27++21F9 1A           	ld a,(de)				; get the byte
  28++21FA CD 27 07     	call show_a_as_hex
  29++21FD 3E 20        	ld a,' '
  30++21FF CD 6A 06     	call print_a			; leave a space
  31++2202 13           	inc de					; continue to next byte
  32++2203 10 F4        	djnz col_loop			; continue to next column
  33++2205
  34++2205 D1           	pop de					; now go over the line again in ASCII
  35++2206 06 10        	ld b,16					; bytes per row
  36++2208              ascii_loop:
  37++2208 1A           	ld a,(de)				; get the byte
  38++2209 CD 30 22     	call show_a_as_char
  39++220C 13           	inc de					; continue to next char
  40++220D 10 F9        	djnz ascii_loop			; continue to next column
  41++220F
  42++220F CD D4 05     	call newline
  43++2212 0D           	dec c
  44++2213 79           	ld a,c
  45++2214 FE 00        	cp 0
  46++2216 20 D6        	jr nz,row_loop			; continue to next row
  47++2218 CD D4 05     	call newline
  48++221B C9           	ret
  49++221C
  50++221C              show_a_safe:
  51++221C FE 20        	cp 32
  52++221E 38 08        	jr c,show_blank			; jr c = jump if less than ( < )
  53++2220 FE 7F        	cp 127
  54++2222 30 04        	jr nc,show_blank		; jr nc = jump if equal to or greater than ( >= )
  55++2224 CD 6A 06     	call print_a
  56++2227 C9           	ret
  57++2228              show_blank:
  58++2228 F5           	push af
  59++2229 3E 2D        	ld a, '-'
  60++222B CD 30 22     	call show_a_as_char
  61++222E F1           	pop af
  62++222F C9           	ret
  63++2230
  64++2230              show_a_as_char:
  65++2230              	;cp 10
  66++2230              	;jr z, show_as_char1
  67++2230              	;cp 13
  68++2230              	;jr z, show_as_char1
  69++2230 FE 20        	cp 32
  70++2232 38 08        	jr c,show_ctrl		; jr c = jump if less than ( < )
  71++2234 FE 7F        	cp 127
  72++2236 30 1C        	jr nc,show_unknown		; jr nc = jump if equal to or greater than ( >= )
  73++2238              show_as_char1:
  74++2238 CD 6A 06     	call print_a
  75++223B C9           	ret
  76++223C              show_ctrl:
  77++223C F5           	push af
  78++223D CD B5 06     	call message
  79++2240 1B 5B 37 6D  	db 27,'[7m',0
  79++2244 00
  80++2245 F1           	pop af
  81++2246 C6 40        	add a, 64
  82++2248 CD 6A 06     	call print_a
  83++224B CD B5 06     	call message
  84++224E 1B 5B 30 6D  	db 27,'[0m',0
  84++2252 00
  85++2253 C9           	ret
  86++2254              show_unknown:
  87++2254 3E 3F        	ld a,'?'
  88++2256 CD 6A 06     	call print_a
  89++2259 C9           	ret
  90++225A
  91++225A              ; SHOW_DE_AS_HEX
  92++225A              ; Pass in a number in DE.
  93++225A              ; It will be displayed in this format: FFFF
  94++225A              show_de_as_hex:
  95++225A 7A           	ld a,d
  96++225B CD 27 07     	call show_a_as_hex
  97++225E 7B           	ld a,e
  98++225F CD 27 07     	call show_a_as_hex
  99++2262 C9           	ret
 100++2263
 101++2263              ; SHOW_STRING_AT_HL
 102++2263              ; Pass in hl containing a pointer to a zero terminated string.
 103++2263              ; It will be printed.
 104++2263              show_string_at_hl:
 105++2263 E5           	push hl
 106++2264              show_string_at_hl_loop:
 107++2264 7E           	ld a, (hl)
 108++2265 FE 00        	cp 0
 109++2267 28 06        	jr z,show_string_at_hl_complete
 110++2269 23           	inc hl
 111++226A CD 6A 06     	call print_a			; print it
 112++226D 18 F5        	jr show_string_at_hl_loop
 113++226F              show_string_at_hl_complete:
 114++226F E1           	pop hl
 115++2270 C9           	ret
 116++2271
# file closed: printing.asm
 656+ 2271              	include "test_uart.asm"
# file opened: test_uart.asm
   1++2271              ; test_uart.asm
   2++2271
   3++2271              test_uart:
   4++2271 CD B5 06     	call message
   5++2274 54 79 70 65  	db 'Type some characters to test sending keys from the Z80 Playground over Serial, ', 13, 10
   5++2278 20 73 6F 6D
   5++227C 65 20 63 68
   5++2280 61 72 61 63
   5++2284 74 65 72 73
   5++2288 20 74 6F 20
   5++228C 74 65 73 74
   5++2290 20 73 65 6E
   5++2294 64 69 6E 67
   5++2298 20 6B 65 79
   5++229C 73 20 66 72
   5++22A0 6F 6D 20 74
   5++22A4 68 65 20 5A
   5++22A8 38 30 20 50
   5++22AC 6C 61 79 67
   5++22B0 72 6F 75 6E
   5++22B4 64 20 6F 76
   5++22B8 65 72 20 53
   5++22BC 65 72 69 61
   5++22C0 6C 2C 20 0D
   5++22C4 0A
   6++22C5 6F 72 20 73  	db 'or send some characters from the other end of the Serial connection to test', 13, 10
   6++22C9 65 6E 64 20
   6++22CD 73 6F 6D 65
   6++22D1 20 63 68 61
   6++22D5 72 61 63 74
   6++22D9 65 72 73 20
   6++22DD 66 72 6F 6D
   6++22E1 20 74 68 65
   6++22E5 20 6F 74 68
   6++22E9 65 72 20 65
   6++22ED 6E 64 20 6F
   6++22F1 66 20 74 68
   6++22F5 65 20 53 65
   6++22F9 72 69 61 6C
   6++22FD 20 63 6F 6E
   6++2301 6E 65 63 74
   6++2305 69 6F 6E 20
   6++2309 74 6F 20 74
   6++230D 65 73 74 0D
   6++2311 0A
   7++2312 68 6F 77 20  	db 'how many are received. Whatever you send will be echoed after a carriage-return.', 13, 10
   7++2316 6D 61 6E 79
   7++231A 20 61 72 65
   7++231E 20 72 65 63
   7++2322 65 69 76 65
   7++2326 64 2E 20 57
   7++232A 68 61 74 65
   7++232E 76 65 72 20
   7++2332 79 6F 75 20
   7++2336 73 65 6E 64
   7++233A 20 77 69 6C
   7++233E 6C 20 62 65
   7++2342 20 65 63 68
   7++2346 6F 65 64 20
   7++234A 61 66 74 65
   7++234E 72 20 61 20
   7++2352 63 61 72 72
   7++2356 69 61 67 65
   7++235A 2D 72 65 74
   7++235E 75 72 6E 2E
   7++2362 0D 0A
   8++2364 4A 75 73 74  	db 'Just type "quit" to go back to the main monitor menu.', 13, 10
   8++2368 20 74 79 70
   8++236C 65 20 22 71
   8++2370 75 69 74 22
   8++2374 20 74 6F 20
   8++2378 67 6F 20 62
   8++237C 61 63 6B 20
   8++2380 74 6F 20 74
   8++2384 68 65 20 6D
   8++2388 61 69 6E 20
   8++238C 6D 6F 6E 69
   8++2390 74 6F 72 20
   8++2394 6D 65 6E 75
   8++2398 2E 0D 0A
   9++239B 4F 72 20 74  	db 'Or type "Z" to print a special message.', 13, 10, 0
   9++239F 79 70 65 20
   9++23A3 22 5A 22 20
   9++23A7 74 6F 20 70
   9++23AB 72 69 6E 74
   9++23AF 20 61 20 73
   9++23B3 70 65 63 69
   9++23B7 61 6C 20 6D
   9++23BB 65 73 73 61
   9++23BF 67 65 2E 0D
   9++23C3 0A 00
  10++23C5
  11++23C5              test_uart0:
  12++23C5 11 66 EA     	ld de, test_buffer
  13++23C8 3E 00        	ld a, 0
  14++23CA 12           	ld (de), a                    ; Always make sure the buffer ends in null
  15++23CB 06 FF        	ld b, 255                     ; max buffer length
  16++23CD
  17++23CD              test_uart1:
  18++23CD CD E5 05     	call char_in
  19++23D0 FE 00        	cp 0
  20++23D2 28 F9        	jr z, test_uart1
  21++23D4 FE 0D        	cp 13
  22++23D6 28 14        	jr z, test_uart2
  23++23D8 CD 6A 06     	call print_a
  24++23DB FE 61        	cp 'a'
  25++23DD 38 06        	jr c, test_uart_ok
  26++23DF FE 7B        	cp 'z'+1
  27++23E1 30 02        	jr nc, test_uart_ok
  28++23E3 D6 20        	sub 32
  29++23E5              test_uart_ok:
  30++23E5 12           	ld (de), a
  31++23E6 13           	inc de
  32++23E7 3E 00        	ld a, 0
  33++23E9 12           	ld (de), a                    ; Always make sure the buffer ends in null
  34++23EA 10 E1        	djnz test_uart1               ; Keep going until we run out of buffer
  35++23EC
  36++23EC              test_uart2:
  37++23EC CD B5 06     	call message
  38++23EF 0D 0A 00     	db 13, 10, 0
  39++23F2
  40++23F2 CD 20 2B     	call did_they_type_quit
  41++23F5 C8           	ret z
  42++23F6
  43++23F6 CD 36 2B     	call did_they_type_Z
  44++23F9 28 0E        	jr z, show_z80_message
  45++23FB
  46++23FB 21 66 EA     	ld hl, test_buffer
  47++23FE CD 63 22     	call show_string_at_hl
  48++2401
  49++2401 CD B5 06     	call message
  50++2404 0D 0A 00     	db 13, 10, 0
  51++2407
  52++2407 18 BC        	jr test_uart0
  53++2409
  54++2409              show_z80_message:
  55++2409 CD B5 06     	call message
  56++240C
  57++240C 2B 2D 2D 2D  	db '+-------------------------------------------------------------------------------+', 13, 10
  57++2410 2D 2D 2D 2D
  57++2414 2D 2D 2D 2D
  57++2418 2D 2D 2D 2D
  57++241C 2D 2D 2D 2D
  57++2420 2D 2D 2D 2D
  57++2424 2D 2D 2D 2D
  57++2428 2D 2D 2D 2D
  57++242C 2D 2D 2D 2D
  57++2430 2D 2D 2D 2D
  57++2434 2D 2D 2D 2D
  57++2438 2D 2D 2D 2D
  57++243C 2D 2D 2D 2D
  57++2440 2D 2D 2D 2D
  57++2444 2D 2D 2D 2D
  57++2448 2D 2D 2D 2D
  57++244C 2D 2D 2D 2D
  57++2450 2D 2D 2D 2D
  57++2454 2D 2D 2D 2D
  57++2458 2D 2D 2D 2D
  57++245C 2B 0D 0A
  58++245F 7C 20 20 20  	db '|   _________   ___    _____  _                                             _   |', 13, 10
  58++2463 5F 5F 5F 5F
  58++2467 5F 5F 5F 5F
  58++246B 5F 20 20 20
  58++246F 5F 5F 5F 20
  58++2473 20 20 20 5F
  58++2477 5F 5F 5F 5F
  58++247B 20 20 5F 20
  58++247F 20 20 20 20
  58++2483 20 20 20 20
  58++2487 20 20 20 20
  58++248B 20 20 20 20
  58++248F 20 20 20 20
  58++2493 20 20 20 20
  58++2497 20 20 20 20
  58++249B 20 20 20 20
  58++249F 20 20 20 20
  58++24A3 20 20 20 20
  58++24A7 20 20 20 20
  58++24AB 5F 20 20 20
  58++24AF 7C 0D 0A
  59++24B2 7C 20 20 7C  	db '|  |___  / _ \ / _ \  |  __ \| |                                           | |  |', 13, 10
  59++24B6 5F 5F 5F 20
  59++24BA 20 2F 20 5F
  59++24BE 20 5C 20 2F
  59++24C2 20 5F 20 5C
  59++24C6 20 20 7C 20
  59++24CA 20 5F 5F 20
  59++24CE 5C 7C 20 7C
  59++24D2 20 20 20 20
  59++24D6 20 20 20 20
  59++24DA 20 20 20 20
  59++24DE 20 20 20 20
  59++24E2 20 20 20 20
  59++24E6 20 20 20 20
  59++24EA 20 20 20 20
  59++24EE 20 20 20 20
  59++24F2 20 20 20 20
  59++24F6 20 20 20 20
  59++24FA 20 20 20 7C
  59++24FE 20 7C 20 20
  59++2502 7C 0D 0A
  60++2505 7C 20 20 20  	db '|     / / (_) | | | | | |__) | | __ _ _   _  __ _ _ __ ___  _   _ _ __   __| |  |', 13, 10
  60++2509 20 20 2F 20
  60++250D 2F 20 28 5F
  60++2511 29 20 7C 20
  60++2515 7C 20 7C 20
  60++2519 7C 20 7C 20
  60++251D 7C 5F 5F 29
  60++2521 20 7C 20 7C
  60++2525 20 5F 5F 20
  60++2529 5F 20 5F 20
  60++252D 20 20 5F 20
  60++2531 20 5F 5F 20
  60++2535 5F 20 5F 20
  60++2539 5F 5F 20 5F
  60++253D 5F 5F 20 20
  60++2541 5F 20 20 20
  60++2545 5F 20 5F 20
  60++2549 5F 5F 20 20
  60++254D 20 5F 5F 7C
  60++2551 20 7C 20 20
  60++2555 7C 0D 0A
  61++2558 7C 20 20 20  	db '|    / / > _ <| | | | |  ___/| |/ _` | | | |/ _` | ''__/ _ \| | | | ''_ \ / _` |  |', 13, 10
  61++255C 20 2F 20 2F
  61++2560 20 3E 20 5F
  61++2564 20 3C 7C 20
  61++2568 7C 20 7C 20
  61++256C 7C 20 7C 20
  61++2570 20 5F 5F 5F
  61++2574 2F 7C 20 7C
  61++2578 2F 20 5F 60
  61++257C 20 7C 20 7C
  61++2580 20 7C 20 7C
  61++2584 2F 20 5F 60
  61++2588 20 7C 20 27
  61++258C 5F 5F 2F 20
  61++2590 5F 20 5C 7C
  61++2594 20 7C 20 7C
  61++2598 20 7C 20 27
  61++259C 5F 20 5C 20
  61++25A0 2F 20 5F 60
  61++25A4 20 7C 20 20
  61++25A8 7C 0D 0A
  62++25AB 7C 20 20 20  	db '|   / /_| (_) | |_| | | |    | | (_| | |_| | (_| | | | (_) | |_| | | | | (_| |  |', 13, 10
  62++25AF 2F 20 2F 5F
  62++25B3 7C 20 28 5F
  62++25B7 29 20 7C 20
  62++25BB 7C 5F 7C 20
  62++25BF 7C 20 7C 20
  62++25C3 7C 20 20 20
  62++25C7 20 7C 20 7C
  62++25CB 20 28 5F 7C
  62++25CF 20 7C 20 7C
  62++25D3 5F 7C 20 7C
  62++25D7 20 28 5F 7C
  62++25DB 20 7C 20 7C
  62++25DF 20 7C 20 28
  62++25E3 5F 29 20 7C
  62++25E7 20 7C 5F 7C
  62++25EB 20 7C 20 7C
  62++25EF 20 7C 20 7C
  62++25F3 20 28 5F 7C
  62++25F7 20 7C 20 20
  62++25FB 7C 0D 0A
  63++25FE 7C 20 20 2F  	db '|  /_____\___/ \___/  |_|    |_|\__, _|\__, |\__, |_|  \___/ \__, _|_| |_|\__, _|  |', 13, 10
  63++2602 5F 5F 5F 5F
  63++2606 5F 5C 5F 5F
  63++260A 5F 2F 20 5C
  63++260E 5F 5F 5F 2F
  63++2612 20 20 7C 5F
  63++2616 7C 20 20 20
  63++261A 20 7C 5F 7C
  63++261E 5C 5F 5F 2C
  63++2622 20 5F 7C 5C
  63++2626 5F 5F 2C 20
  63++262A 7C 5C 5F 5F
  63++262E 2C 20 7C 5F
  63++2632 7C 20 20 5C
  63++2636 5F 5F 5F 2F
  63++263A 20 5C 5F 5F
  63++263E 2C 20 5F 7C
  63++2642 5F 7C 20 7C
  63++2646 5F 7C 5C 5F
  63++264A 5F 2C 20 5F
  63++264E 7C 20 20 7C
  63++2652 0D 0A
  64++2654 7C 20 20 20  	db '|                                      __/ | __/ |                              |', 13, 10
  64++2658 20 20 20 20
  64++265C 20 20 20 20
  64++2660 20 20 20 20
  64++2664 20 20 20 20
  64++2668 20 20 20 20
  64++266C 20 20 20 20
  64++2670 20 20 20 20
  64++2674 20 20 20 20
  64++2678 20 20 20 5F
  64++267C 5F 2F 20 7C
  64++2680 20 5F 5F 2F
  64++2684 20 7C 20 20
  64++2688 20 20 20 20
  64++268C 20 20 20 20
  64++2690 20 20 20 20
  64++2694 20 20 20 20
  64++2698 20 20 20 20
  64++269C 20 20 20 20
  64++26A0 20 20 20 20
  64++26A4 7C 0D 0A
  65++26A7 7C 20 20 20  	db '|                                     |___/ |___/                               |', 13, 10
  65++26AB 20 20 20 20
  65++26AF 20 20 20 20
  65++26B3 20 20 20 20
  65++26B7 20 20 20 20
  65++26BB 20 20 20 20
  65++26BF 20 20 20 20
  65++26C3 20 20 20 20
  65++26C7 20 20 20 20
  65++26CB 20 20 7C 5F
  65++26CF 5F 5F 2F 20
  65++26D3 7C 5F 5F 5F
  65++26D7 2F 20 20 20
  65++26DB 20 20 20 20
  65++26DF 20 20 20 20
  65++26E3 20 20 20 20
  65++26E7 20 20 20 20
  65++26EB 20 20 20 20
  65++26EF 20 20 20 20
  65++26F3 20 20 20 20
  65++26F7 7C 0D 0A
  66++26FA 7C 20 20 20  	db '|                                                                               |', 13, 10
  66++26FE 20 20 20 20
  66++2702 20 20 20 20
  66++2706 20 20 20 20
  66++270A 20 20 20 20
  66++270E 20 20 20 20
  66++2712 20 20 20 20
  66++2716 20 20 20 20
  66++271A 20 20 20 20
  66++271E 20 20 20 20
  66++2722 20 20 20 20
  66++2726 20 20 20 20
  66++272A 20 20 20 20
  66++272E 20 20 20 20
  66++2732 20 20 20 20
  66++2736 20 20 20 20
  66++273A 20 20 20 20
  66++273E 20 20 20 20
  66++2742 20 20 20 20
  66++2746 20 20 20 20
  66++274A 7C 0D 0A
  67++274D 7C 20 20 20  	db '|        _    _         _____ _______   _            _   _                      |', 13, 10
  67++2751 20 20 20 20
  67++2755 20 5F 20 20
  67++2759 20 20 5F 20
  67++275D 20 20 20 20
  67++2761 20 20 20 20
  67++2765 5F 5F 5F 5F
  67++2769 5F 20 5F 5F
  67++276D 5F 5F 5F 5F
  67++2771 5F 20 20 20
  67++2775 5F 20 20 20
  67++2779 20 20 20 20
  67++277D 20 20 20 20
  67++2781 20 5F 20 20
  67++2785 20 5F 20 20
  67++2789 20 20 20 20
  67++278D 20 20 20 20
  67++2791 20 20 20 20
  67++2795 20 20 20 20
  67++2799 20 20 20 20
  67++279D 7C 0D 0A
  68++27A0 7C 20 20 20  	db '|       | |  | |  /\   |  __ \__   __| | |          | | (_)                     |', 13, 10
  68++27A4 20 20 20 20
  68++27A8 7C 20 7C 20
  68++27AC 20 7C 20 7C
  68++27B0 20 20 2F 5C
  68++27B4 20 20 20 7C
  68++27B8 20 20 5F 5F
  68++27BC 20 5C 5F 5F
  68++27C0 20 20 20 5F
  68++27C4 5F 7C 20 7C
  68++27C8 20 7C 20 20
  68++27CC 20 20 20 20
  68++27D0 20 20 20 20
  68++27D4 7C 20 7C 20
  68++27D8 28 5F 29 20
  68++27DC 20 20 20 20
  68++27E0 20 20 20 20
  68++27E4 20 20 20 20
  68++27E8 20 20 20 20
  68++27EC 20 20 20 20
  68++27F0 7C 0D 0A
  69++27F3 7C 20 20 20  	db '|       | |  | | /  \  | |__) | | |    | |_ ___  ___| |_ _ _ __   __ _          |', 13, 10
  69++27F7 20 20 20 20
  69++27FB 7C 20 7C 20
  69++27FF 20 7C 20 7C
  69++2803 20 2F 20 20
  69++2807 5C 20 20 7C
  69++280B 20 7C 5F 5F
  69++280F 29 20 7C 20
  69++2813 7C 20 7C 20
  69++2817 20 20 20 7C
  69++281B 20 7C 5F 20
  69++281F 5F 5F 5F 20
  69++2823 20 5F 5F 5F
  69++2827 7C 20 7C 5F
  69++282B 20 5F 20 5F
  69++282F 20 5F 5F 20
  69++2833 20 20 5F 5F
  69++2837 20 5F 20 20
  69++283B 20 20 20 20
  69++283F 20 20 20 20
  69++2843 7C 0D 0A
  70++2846 7C 20 20 20  	db '|       | |  | |/ /\ \ |  _  /  | |    | __/ _ \/ __| __| | ''_ \ / _` |         |', 13, 10
  70++284A 20 20 20 20
  70++284E 7C 20 7C 20
  70++2852 20 7C 20 7C
  70++2856 2F 20 2F 5C
  70++285A 20 5C 20 7C
  70++285E 20 20 5F 20
  70++2862 20 2F 20 20
  70++2866 7C 20 7C 20
  70++286A 20 20 20 7C
  70++286E 20 5F 5F 2F
  70++2872 20 5F 20 5C
  70++2876 2F 20 5F 5F
  70++287A 7C 20 5F 5F
  70++287E 7C 20 7C 20
  70++2882 27 5F 20 5C
  70++2886 20 2F 20 5F
  70++288A 60 20 7C 20
  70++288E 20 20 20 20
  70++2892 20 20 20 20
  70++2896 7C 0D 0A
  71++2899 7C 20 20 20  	db '|       | |__| / ____ \| | \ \  | |    | ||  __/\__ \ |_| | | | | (_| |         |', 13, 10
  71++289D 20 20 20 20
  71++28A1 7C 20 7C 5F
  71++28A5 5F 7C 20 2F
  71++28A9 20 5F 5F 5F
  71++28AD 5F 20 5C 7C
  71++28B1 20 7C 20 5C
  71++28B5 20 5C 20 20
  71++28B9 7C 20 7C 20
  71++28BD 20 20 20 7C
  71++28C1 20 7C 7C 20
  71++28C5 20 5F 5F 2F
  71++28C9 5C 5F 5F 20
  71++28CD 5C 20 7C 5F
  71++28D1 7C 20 7C 20
  71++28D5 7C 20 7C 20
  71++28D9 7C 20 28 5F
  71++28DD 7C 20 7C 20
  71++28E1 20 20 20 20
  71++28E5 20 20 20 20
  71++28E9 7C 0D 0A
  72++28EC 7C 20 20 20  	db '|        \____/_/    \_\_|  \_\ |_|     \__\___||___/\__|_|_| |_|\__, |         |', 13, 10
  72++28F0 20 20 20 20
  72++28F4 20 5C 5F 5F
  72++28F8 5F 5F 2F 5F
  72++28FC 2F 20 20 20
  72++2900 20 5C 5F 5C
  72++2904 5F 7C 20 20
  72++2908 5C 5F 5C 20
  72++290C 7C 5F 7C 20
  72++2910 20 20 20 20
  72++2914 5C 5F 5F 5C
  72++2918 5F 5F 5F 7C
  72++291C 7C 5F 5F 5F
  72++2920 2F 5C 5F 5F
  72++2924 7C 5F 7C 5F
  72++2928 7C 20 7C 5F
  72++292C 7C 5C 5F 5F
  72++2930 2C 20 7C 20
  72++2934 20 20 20 20
  72++2938 20 20 20 20
  72++293C 7C 0D 0A
  73++293F 7C 20 20 20  	db '|                                                                 __/ |         |', 13, 10
  73++2943 20 20 20 20
  73++2947 20 20 20 20
  73++294B 20 20 20 20
  73++294F 20 20 20 20
  73++2953 20 20 20 20
  73++2957 20 20 20 20
  73++295B 20 20 20 20
  73++295F 20 20 20 20
  73++2963 20 20 20 20
  73++2967 20 20 20 20
  73++296B 20 20 20 20
  73++296F 20 20 20 20
  73++2973 20 20 20 20
  73++2977 20 20 20 20
  73++297B 20 20 20 20
  73++297F 20 20 5F 5F
  73++2983 2F 20 7C 20
  73++2987 20 20 20 20
  73++298B 20 20 20 20
  73++298F 7C 0D 0A
  74++2992 7C 20 20 20  	db '|                                                                |___/          |', 13, 10
  74++2996 20 20 20 20
  74++299A 20 20 20 20
  74++299E 20 20 20 20
  74++29A2 20 20 20 20
  74++29A6 20 20 20 20
  74++29AA 20 20 20 20
  74++29AE 20 20 20 20
  74++29B2 20 20 20 20
  74++29B6 20 20 20 20
  74++29BA 20 20 20 20
  74++29BE 20 20 20 20
  74++29C2 20 20 20 20
  74++29C6 20 20 20 20
  74++29CA 20 20 20 20
  74++29CE 20 20 20 20
  74++29D2 20 7C 5F 5F
  74++29D6 5F 2F 20 20
  74++29DA 20 20 20 20
  74++29DE 20 20 20 20
  74++29E2 7C 0D 0A
  75++29E5 7C 20 20 20  	db '|                                                                               |', 13, 10
  75++29E9 20 20 20 20
  75++29ED 20 20 20 20
  75++29F1 20 20 20 20
  75++29F5 20 20 20 20
  75++29F9 20 20 20 20
  75++29FD 20 20 20 20
  75++2A01 20 20 20 20
  75++2A05 20 20 20 20
  75++2A09 20 20 20 20
  75++2A0D 20 20 20 20
  75++2A11 20 20 20 20
  75++2A15 20 20 20 20
  75++2A19 20 20 20 20
  75++2A1D 20 20 20 20
  75++2A21 20 20 20 20
  75++2A25 20 20 20 20
  75++2A29 20 20 20 20
  75++2A2D 20 20 20 20
  75++2A31 20 20 20 20
  75++2A35 7C 0D 0A
  76++2A38 2B 2D 2D 2D  	db '+-------------------------------------------------------------------------------+', 13, 10
  76++2A3C 2D 2D 2D 2D
  76++2A40 2D 2D 2D 2D
  76++2A44 2D 2D 2D 2D
  76++2A48 2D 2D 2D 2D
  76++2A4C 2D 2D 2D 2D
  76++2A50 2D 2D 2D 2D
  76++2A54 2D 2D 2D 2D
  76++2A58 2D 2D 2D 2D
  76++2A5C 2D 2D 2D 2D
  76++2A60 2D 2D 2D 2D
  76++2A64 2D 2D 2D 2D
  76++2A68 2D 2D 2D 2D
  76++2A6C 2D 2D 2D 2D
  76++2A70 2D 2D 2D 2D
  76++2A74 2D 2D 2D 2D
  76++2A78 2D 2D 2D 2D
  76++2A7C 2D 2D 2D 2D
  76++2A80 2D 2D 2D 2D
  76++2A84 2D 2D 2D 2D
  76++2A88 2B 0D 0A
  77++2A8B 0D 0A 0D 0A  	db 13, 10, 13, 10
  78++2A8F 54 68 69 73  	db 'This is a long text to test whether we can send a large amount of text to the', 13, 10
  78++2A93 20 69 73 20
  78++2A97 61 20 6C 6F
  78++2A9B 6E 67 20 74
  78++2A9F 65 78 74 20
  78++2AA3 74 6F 20 74
  78++2AA7 65 73 74 20
  78++2AAB 77 68 65 74
  78++2AAF 68 65 72 20
  78++2AB3 77 65 20 63
  78++2AB7 61 6E 20 73
  78++2ABB 65 6E 64 20
  78++2ABF 61 20 6C 61
  78++2AC3 72 67 65 20
  78++2AC7 61 6D 6F 75
  78++2ACB 6E 74 20 6F
  78++2ACF 66 20 74 65
  78++2AD3 78 74 20 74
  78++2AD7 6F 20 74 68
  78++2ADB 65 0D 0A
  79++2ADE 53 65 72 69  	db 'Serial port and still receive it correctly at the other end.', 13, 10
  79++2AE2 61 6C 20 70
  79++2AE6 6F 72 74 20
  79++2AEA 61 6E 64 20
  79++2AEE 73 74 69 6C
  79++2AF2 6C 20 72 65
  79++2AF6 63 65 69 76
  79++2AFA 65 20 69 74
  79++2AFE 20 63 6F 72
  79++2B02 72 65 63 74
  79++2B06 6C 79 20 61
  79++2B0A 74 20 74 68
  79++2B0E 65 20 6F 74
  79++2B12 68 65 72 20
  79++2B16 65 6E 64 2E
  79++2B1A 0D 0A
  80++2B1C 00           	db 0
  81++2B1D C3 C5 23     	jp test_uart0
  82++2B20
  83++2B20              did_they_type_quit:
  84++2B20 21 66 EA     	ld hl, test_buffer
  85++2B23
  86++2B23 7E           	ld a, (hl)
  87++2B24 FE 51        	cp 'Q'
  88++2B26 C0           	ret nz
  89++2B27 23           	inc hl
  90++2B28
  91++2B28 7E           	ld a, (hl)
  92++2B29 FE 55        	cp 'U'
  93++2B2B C0           	ret nz
  94++2B2C 23           	inc hl
  95++2B2D
  96++2B2D 7E           	ld a, (hl)
  97++2B2E FE 49        	cp 'I'
  98++2B30 C0           	ret nz
  99++2B31 23           	inc hl
 100++2B32
 101++2B32 7E           	ld a, (hl)
 102++2B33 FE 54        	cp 'T'
 103++2B35 C9           	ret
 104++2B36
 105++2B36              did_they_type_Z:
 106++2B36 21 66 EA     	ld hl, test_buffer
 107++2B39 7E           	ld a, (hl)
 108++2B3A FE 5A        	cp 'Z'
 109++2B3C C0           	ret nz
 110++2B3D 23           	inc hl
 111++2B3E
 112++2B3E 7E           	ld a, (hl)
 113++2B3F FE 00        	cp 0
 114++2B41 C9           	ret
 115++2B42
 116++2B42              did_they_type_J:
 117++2B42 21 66 EA     	ld hl, test_buffer
 118++2B45 7E           	ld a, (hl)
 119++2B46 FE 4A        	cp 'J'
 120++2B48 C0           	ret nz
 121++2B49 23           	inc hl
 122++2B4A
 123++2B4A 7E           	ld a, (hl)
 124++2B4B FE 00        	cp 0
 125++2B4D C9           	ret
 126++2B4E
# file closed: test_uart.asm
 657+ 2B4E
 658+ 2B4E              load_jupiter_ace:
 659+ 2B4E                  ; Load CORE.BIN into its proper location
 660+ 2B4E 21 24 0D         ld hl, NAME_OF_CORE
 661+ 2B51 CD BB 13         call copy_filename_to_buffer
 662+ 2B54 11 00 F6         ld de, $F600 							; TODO: This can't be hardcoded, can it???
 663+ 2B57 CD 64 0E         call load_bin_file
 664+ 2B5A 28 1E        	jr z, loaded_core_file
 665+ 2B5C CD B5 06     	call message
 666+ 2B5F 46 61 69 6C  	db 'Failed to load CORE.BIN',13,10,0
 666+ 2B63 65 64 20 74
 666+ 2B67 6F 20 6C 6F
 666+ 2B6B 61 64 20 43
 666+ 2B6F 4F 52 45 2E
 666+ 2B73 42 49 4E 0D
 666+ 2B77 0A 00
 667+ 2B79 76           	halt
 668+ 2B7A
 669+ 2B7A              loaded_core_file:
 670+ 2B7A CD B5 06         call message
 671+ 2B7D 43 4F 52 45      db 'CORE loaded!',13,10,0
 671+ 2B81 20 6C 6F 61
 671+ 2B85 64 65 64 21
 671+ 2B89 0D 0A 00
 672+ 2B8C
 673+ 2B8C              	; Get the file Jupiter.bin into memory at location 0.
 674+ 2B8C 21 04 2C         ld hl, JUPITER_ACE_NAME
 675+ 2B8F CD BB 13         call copy_filename_to_buffer
 676+ 2B92 11 00 00         ld de, 0								; Load it into location $0000
 677+ 2B95 CD 64 0E         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 678+ 2B98 28 27        	jr z, load_jupiter_ace1
 679+ 2B9A CD B5 06     	call message
 680+ 2B9D 46 61 69 6C  	db 'Failed to load jupiter ace file.',13,10,0
 680+ 2BA1 65 64 20 74
 680+ 2BA5 6F 20 6C 6F
 680+ 2BA9 61 64 20 6A
 680+ 2BAD 75 70 69 74
 680+ 2BB1 65 72 20 61
 680+ 2BB5 63 65 20 66
 680+ 2BB9 69 6C 65 2E
 680+ 2BBD 0D 0A 00
 681+ 2BC0 76           	halt
 682+ 2BC1              load_jupiter_ace1:
 683+ 2BC1 CD B5 06     	call message
 684+ 2BC4 4C 6F 61 64  	db 'Loaded jupiter ace file!',13,10,0
 684+ 2BC8 65 64 20 6A
 684+ 2BCC 75 70 69 74
 684+ 2BD0 65 72 20 61
 684+ 2BD4 63 65 20 66
 684+ 2BD8 69 6C 65 21
 684+ 2BDC 0D 0A 00
 685+ 2BDF              	; Just a quick test:
 686+ 2BDF CD 39 F6     	call $F600+57
 687+ 2BE2 53 74 61 72  	db 'Starting Juniper Deuce...',13,10,0
 687+ 2BE6 74 69 6E 67
 687+ 2BEA 20 4A 75 6E
 687+ 2BEE 69 70 65 72
 687+ 2BF2 20 44 65 75
 687+ 2BF6 63 65 2E 2E
 687+ 2BFA 2E 0D 0A 00
 688+ 2BFE
 689+ 2BFE              	; Clear the screen
 690+ 2BFE              	; ld hl, $2400
 691+ 2BFE              	; ld (hl), '#'
 692+ 2BFE              	; ld de, $2401
 693+ 2BFE              	; ld bc, 767
 694+ 2BFE              	; ldir
 695+ 2BFE
 696+ 2BFE              	; Now run it.
 697+ 2BFE              	; Now we need the ROM turned off:
 698+ 2BFE CD 48 06     	call rom_off
 699+ 2C01 C3 00 00     	jp 0
 700+ 2C04
 701+ 2C04              JUPITER_ACE_NAME:
 702+ 2C04 4A 55 50 49      db 'JUPITER.BIN',0
 702+ 2C08 54 45 52 2E
 702+ 2C0C 42 49 4E 00
 703+ 2C10
 704+ 2C10
 705+ 2C10
 706+ 2C10              the_end:
 707+ 2C10 41 20 6D 65  	db 'A message at the end ****************',0
 707+ 2C14 73 73 61 67
 707+ 2C18 65 20 61 74
 707+ 2C1C 20 74 68 65
 707+ 2C20 20 65 6E 64
 707+ 2C24 20 2A 2A 2A
 707+ 2C28 2A 2A 2A 2A
 707+ 2C2C 2A 2A 2A 2A
 707+ 2C30 2A 2A 2A 2A
 707+ 2C34 2A 00
 708+ 2C36
 709+ 2C36              ; ---------------------------------------------------------
 710+ 2C36              ; These are variables so need to be in RAM.
 711+ 2C36              ; Unfortunately I am dumb and initially put them in ROM.
 712+ 2C36              ; I have learned my lesson!
 713+ 2C36
 714+ 2C36              ;store_hl		equ	60000					; Temporary store for hl
 715+ 2C36              ;store_de 		equ 60002					; Temporary store for de
 716+ 2C36              current_page 	equ 60004					; Currently displayed monitor page
 717+ 2C36
 718+ 2C36              test_buffer 	equ 60006					; 32 x 24 char buffer (768 bytes)
 719+ 2C36
# file closed: monitor.asm
  40  2C36                  include "tiny-basic.asm"
# file opened: tiny-basic.asm
   1+ 2C36              ; *************************************************************
   2+ 2C36              ;
   3+ 2C36              ;                 TINY BASIC FOR INTEL 8080
   4+ 2C36              ;                       VERSION 2.1
   5+ 2C36              ;                     BY LI-CHEN WANG
   6+ 2C36              ;                 MODIFIED AND TRANSLATED
   7+ 2C36              ;                   TO INTEL MNEMONICS
   8+ 2C36              ;                    BY ROGER RAUSKOLB
   9+ 2C36              ;                     10 OCTOBER,1976
  10+ 2C36              ;                        @COPYLEFT
  11+ 2C36              ;                   ALL WRONGS RESERVED
  12+ 2C36              ;
  13+ 2C36              ; *************************************************************
  14+ 2C36
  15+ 2C36              ; Converted to Z80 mneumonics
  16+ 2C36              ; and styled for PASMO assembler
  17+ 2C36              ; ready to run on my "Z80 Playground" SBC
  18+ 2C36              ; by John Squires, October 2020
  19+ 2C36
  20+ 2C36              ; TODO:
  21+ 2C36              ; * Tell the user that ctrl-c is break, etc.
  22+ 2C36              ; * Make a nicer intro screen.
  23+ 2C36
  24+ 2C36              ; *** ZERO PAGE SUBROUTINES ***
  25+ 2C36              ; The original code used the zero page calls, "rst 08h"
  26+ 2C36              ; thru "rst 38h" for some functions, in order to keep the
  27+ 2C36              ; code size even smaller. However, the use of the "RST" commands
  28+ 2C36              ; means that this program always has to run from location 0
  29+ 2C36              ; and can never be assembled to a different location.
  30+ 2C36              ; I decided to remove all the RST stuff, so that this code
  31+ 2C36              ; could eventually be run under CP/M or loaded at a different
  32+ 2C36              ; location in memory.
  33+ 2C36
  34+ 2C36              ; How to assemble:
  35+ 2C36              ; Use PASMO
  36+ 2C36              ; This version is intended for inclusion in the Z80 Playground EEPROM as a demo
  37+ 2C36              ; of what wonders can be performed!
  38+ 2C36              ; So it will begin at whatever address the EEPROM boot loader sets it to.
  39+ 2C36              ; It will be living in the bottom 32K of EEROM, and have
  40+ 2C36              ; access to the top 32K of RAM.
  41+ 2C36
  42+ 2C36              CR      equ  0DH
  43+ 2C36              LF      equ  0AH
  44+ 2C36
  45+ 2C36              ; Define a macro called DWA to store addresses in a special format.
  46+ 2C36              ; Hi-byte is stored first (big-endian) with bit 7 set.
  47+ 2C36              ; Lo-byte is stored second, with no special modification.
  48+ 2C36              DWA     MACRO     v
  49+ 2C36 ~                    DB v>>8+128
  50+ 2C36 ~                    DB v&0FFH
  51+ 2C36                      ENDM
  52+ 2C36
  53+ 2C36              TBSTART:
  54+ 2C36 31 00 FF             LD  SP,TBSTACK                     ; *** COLD START ***
  55+ 2C39 3E FF                LD   A,0FFH
  56+ 2C3B C3 F5 34             JP  INIT
  57+ 2C3E
  58+ 2C3E E3           TSTC:   EX (SP),HL                       ; *** TSTC (was "rst 08h") ***
  59+ 2C3F CD 86 2C             CALL IGNBLK                      ; IGNORE BLANKS AND
  60+ 2C42 BE                   CP  (HL)                         ; TEST CHARACTER
  61+ 2C43 23           TC1:    INC  HL                          ; COMPARE THE BYTE THAT
  62+ 2C44 CA 4E 2C             JP Z,TC2                         ; FOLLOWS THE CALL to this function
  63+ 2C47 C5                   PUSH BC                          ; WITH THE TEXT (DE->)
  64+ 2C48 4E                   LD   C,(HL)                      ; IF NOT =, ADD THE 2ND
  65+ 2C49 06 00                LD   B,0                         ; BYTE THAT FOLLOWS THE
  66+ 2C4B 09                   ADD HL,BC                        ; RST TO THE OLD PC
  67+ 2C4C C1                   POP  BC                          ; I.E., DO A RELATIVE
  68+ 2C4D 1B                   DEC  DE                          ; JUMP IF NOT =
  69+ 2C4E 13           TC2:    INC  DE                          ; IF =, SKIP THOSE BYTES
  70+ 2C4F 23                   INC  HL                          ; AND CONTINUE
  71+ 2C50 E3                   EX (SP),HL
  72+ 2C51 C9                   RET
  73+ 2C52
  74+ 2C52 3E 0D        CRLF:   LD   A,CR                        ; *** CRLF ***
  75+ 2C54
  76+ 2C54 F5           OUTC:   PUSH AF                          ; *** OUTC (was "rst 10h") ***
  77+ 2C55 3A 00 80             LD  A,(OCSW)                     ; PRINT CHARACTER ONLY
  78+ 2C58 B7                   OR  A                            ; IF OCSW SWITCH IS ON
  79+ 2C59 C2 5E 2C     OC2:    JP NZ,OC3                        ; IT IS ON
  80+ 2C5C F1                   POP  AF                          ; IT IS OFF
  81+ 2C5D C9                   RET                              ; RESTORE AF AND RETURN
  82+ 2C5E              OC3:
  83+ 2C5E DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  84+ 2C60 CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  85+ 2C62 CA 5E 2C             jp z,OC3                         ; zero = not ready for next char yet.
  86+ 2C65 F1                   POP  AF                          ; UART IS READY, GET OLD "A" BACK
  87+ 2C66 D3 B8                OUT  (uart_tx_rx),A              ; AND SEND IT OUT
  88+ 2C68 FE 0D                CP  CR                           ; WAS IT CR?
  89+ 2C6A C0                   RET NZ                           ; NO, FINISHED
  90+ 2C6B              OC4:
  91+ 2C6B DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  92+ 2C6D CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  93+ 2C6F CA 6B 2C             jp z,OC4                         ; zero = not ready for next char yet.
  94+ 2C72 3E 0A                LD   A,LF                        ; YES, WE SEND LF TOO
  95+ 2C74 D3 B8                out (uart_tx_rx),a
  96+ 2C76 3E 0D                LD   A,CR                        ; GET CR BACK IN A
  97+ 2C78 C9                   RET
  98+ 2C79
  99+ 2C79 CD D3 31     EXPR:   CALL EXPR2                       ; *** EXPR (was "rst 18h") ***
 100+ 2C7C E5                   PUSH HL                          ; EVALUATE AN EXPRESSION
 101+ 2C7D C3 8F 31             JP  EXPR1                        ; REST OF IT AT EXPR1
 102+ 2C80
 103+ 2C80 7C           COMP:   LD   A,H                         ; *** COMP (was "rst 20h") ***
 104+ 2C81 BA                   CP  D                            ; COMPARE HL WITH DE
 105+ 2C82 C0                   RET NZ                           ; RETURN CORRECT C AND
 106+ 2C83 7D                   LD   A,L                         ; Z FLAGS
 107+ 2C84 BB                   CP  E                            ; BUT OLD A IS LOST
 108+ 2C85 C9                   RET
 109+ 2C86
 110+ 2C86              IGNBLK:
 111+ 2C86 1A                   LD A,(DE)                        ; *** IGNBLK (was "rst 28h") ***
 112+ 2C87 FE 20                CP  20H                          ; IGNORE BLANKS
 113+ 2C89 C0                   RET NZ                           ; IN TEXT (WHERE DE->)
 114+ 2C8A 13                   INC  DE                          ; AND RETURN THE FIRST
 115+ 2C8B C3 86 2C             JP  IGNBLK                      ; NON-BLANK CHAR. IN A
 116+ 2C8E
 117+ 2C8E              FINISH:
 118+ 2C8E F1                   POP  AF                          ; *** FINISH (was "rst 30h") ***
 119+ 2C8F CD 3B 33             CALL FIN                         ; CHECK END OF COMMAND
 120+ 2C92 C3 54 33             JP  QWHAT                        ; PRINT "WHAT?" IF WRONG
 121+ 2C95
 122+ 2C95              TSTV:
 123+ 2C95 CD 86 2C             CALL IGNBLK                      ; *** TSTV (was "rst 38h") ***
 124+ 2C98 D6 40                SUB  '@'                         ; TEST VARIABLES.
 125+ 2C9A D8                   RET C                            ; < @ means NOT A VARIABLE
 126+ 2C9B C2 B9 2C             JP NZ,TV1                        ; NOT "@" ARRAY
 127+ 2C9E 13                   INC  DE                          ; IT IS THE "@" ARRAY
 128+ 2C9F CD 8A 32             CALL PARN                        ; @ SHOULD BE FOLLOWED
 129+ 2CA2 29                   ADD HL,HL                        ; BY (EXPR) AS ITS INDEX
 130+ 2CA3 DA FD 2C             JP C,QHOW                        ; IS INDEX TOO BIG?
 131+ 2CA6 D5                   PUSH DE                          ; WILL IT OVERWRITE
 132+ 2CA7 EB                   EX DE,HL                         ; TEXT?
 133+ 2CA8 CD D9 32             CALL SIZE                        ; FIND SIZE OF FREE
 134+ 2CAB CD 80 2C             CALL COMP                          ; AND CHECK THAT
 135+ 2CAE DA 84 33             JP C,ASORRY                      ; IF SO, SAY "SORRY"
 136+ 2CB1 21 89 FD             LD  HL,VARBGN                    ; IF NOT GET ADDRESS
 137+ 2CB4 CD FC 32             CALL SUBDE                       ; OF @(EXPR) AND PUT IT
 138+ 2CB7 D1                   POP  DE                          ; IN HL
 139+ 2CB8 C9                   RET                              ; C FLAG IS CLEARED
 140+ 2CB9              TV1:
 141+ 2CB9                      ; by this point A holds the index
 142+ 2CB9                      ; of the variable
 143+ 2CB9                      ; 0 = the array "@"
 144+ 2CB9                      ; 1  - 26 = A - Z
 145+ 2CB9                      ; 33 - 58 = a - z
 146+ 2CB9                      ; lowercase needs adjusting to be uppercase
 147+ 2CB9 FE 21                cp 33
 148+ 2CBB 38 06                jr c,upper_var
 149+ 2CBD FE 3B                cp 59
 150+ 2CBF 30 02                jr nc,upper_var
 151+ 2CC1 D6 20                sub 32                           ; lowercase it
 152+ 2CC3              upper_var:
 153+ 2CC3 FE 1B                CP  1BH                          ; NOT @, IS IT A TO Z?
 154+ 2CC5 3F                   CCF                              ; IF NOT RETURN C FLAG
 155+ 2CC6 D8                   RET C
 156+ 2CC7 13                   INC  DE                          ; IF A THROUGH Z
 157+ 2CC8 21 89 FD             LD  HL,VARBGN                    ; COMPUTE ADDRESS OF
 158+ 2CCB 07                   RLCA                             ; THAT VARIABLE
 159+ 2CCC 85                   ADD  A,L                         ; AND RETURN IT IN HL
 160+ 2CCD 6F                   LD   L,A                         ; WITH C FLAG CLEARED
 161+ 2CCE 3E 00                LD   A,0
 162+ 2CD0 8C                   ADC  A,H
 163+ 2CD1 67                   LD   H,A
 164+ 2CD2 C9                   RET
 165+ 2CD3
 166+ 2CD3 21 00 00     TSTNUM: LD  HL,0                         ; *** TSTNUM ***
 167+ 2CD6 44                   LD   B,H                         ; TEST IF THE TEXT IS
 168+ 2CD7 CD 86 2C             CALL IGNBLK                          ; A NUMBER
 169+ 2CDA FE 30        TN1:    CP  30H                          ; IF NOT, RETURN 0 IN
 170+ 2CDC D8                   RET C                            ; B AND HL
 171+ 2CDD FE 3A                CP  3AH                          ; IF NUMBERS, CONVERT
 172+ 2CDF D0                   RET NC                           ; TO BINARY IN HL AND
 173+ 2CE0 3E F0                LD   A,0F0H                      ; SET B TO # OF DIGITS
 174+ 2CE2 A4                   AND  H                           ; IF H>255, THERE IS NO
 175+ 2CE3 C2 FD 2C             JP NZ,QHOW                       ; ROOM FOR NEXT DIGIT
 176+ 2CE6 04                   INC  B                           ; B COUNTS # OF DIGITS
 177+ 2CE7 C5                   PUSH BC
 178+ 2CE8 44                   LD   B,H                         ; HL=10*HL+(NEW DIGIT)
 179+ 2CE9 4D                   LD   C,L
 180+ 2CEA 29                   ADD HL,HL                        ; WHERE 10* IS DONE BY
 181+ 2CEB 29                   ADD HL,HL                        ; SHIFT AND ADD
 182+ 2CEC 09                   ADD HL,BC
 183+ 2CED 29                   ADD HL,HL
 184+ 2CEE 1A                   LD A,(DE)                        ; AND (DIGIT) IS FROM
 185+ 2CEF 13                   INC  DE                          ; STRIPPING THE ASCII
 186+ 2CF0 E6 0F                AND  0FH                         ; CODE
 187+ 2CF2 85                   ADD  A,L
 188+ 2CF3 6F                   LD   L,A
 189+ 2CF4 3E 00                LD   A,0
 190+ 2CF6 8C                   ADC  A,H
 191+ 2CF7 67                   LD   H,A
 192+ 2CF8 C1                   POP  BC
 193+ 2CF9 1A                   LD A,(DE)                        ; DO THIS DIGIT AFTER
 194+ 2CFA F2 DA 2C             JP P,TN1                         ; DIGIT. S SAYS OVERFLOW
 195+ 2CFD D5           QHOW:   PUSH DE                          ; *** ERROR "HOW?" ***
 196+ 2CFE 11 04 2D     AHOW:   LD  DE,HOW
 197+ 2D01 C3 58 33             JP  ERROR
 198+ 2D04 48 4F 57 3F  HOW:    DB   'HOW?'
 199+ 2D08 0D                   DB   CR
 200+ 2D09 4F 4B        OK:     DB   'OK'
 201+ 2D0B 0D                   DB   CR
 202+ 2D0C 57 48 41 54  WHAT:   DB   'WHAT?'
 202+ 2D10 3F
 203+ 2D11 0D                   DB   CR
 204+ 2D12 53 4F 52 52  SORRY:  DB   'SORRY'
 204+ 2D16 59
 205+ 2D17 0D                   DB   CR
 206+ 2D18
 207+ 2D18                      ; *************************************************************
 208+ 2D18
 209+ 2D18                      ; *** MAIN ***
 210+ 2D18
 211+ 2D18                      ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 212+ 2D18                      ; AND STORES IT IN THE MEMORY.
 213+ 2D18
 214+ 2D18                      ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 215+ 2D18                      ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 216+ 2D18                      ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 217+ 2D18                      ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 218+ 2D18                      ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 219+ 2D18                      ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 220+ 2D18                      ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 221+ 2D18                      ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 222+ 2D18                      ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 223+ 2D18
 224+ 2D18                      ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 225+ 2D18                      ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 226+ 2D18                      ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 227+ 2D18                      ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 228+ 2D18
 229+ 2D18                      ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 230+ 2D18                      ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 231+ 2D18                      ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 232+ 2D18                      ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 233+ 2D18
 234+ 2D18                      ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 235+ 2D18                      ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 236+ 2D18                      ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 237+ 2D18                      ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 238+ 2D18
 239+ 2D18 31 00 FF     RSTART: LD  SP,TBSTACK
 240+ 2D1B CD 52 2C     ST1:    CALL CRLF                        ; AND JUMP TO HERE
 241+ 2D1E 11 09 2D             LD  DE,OK                        ; DE->STRING
 242+ 2D21 97                   SUB  A                           ; A=0
 243+ 2D22 CD 02 34             CALL PRTSTG                      ; PRINT STRING UNTIL CR
 244+ 2D25 21 2C 2D             LD  HL,ST2+1                     ; LITERAL 0
 245+ 2D28 22 01 80             LD (CURRNT),HL                   ; CURRENT->LINE # = 0
 246+ 2D2B 21 00 00     ST2:    LD  HL,0
 247+ 2D2E 22 09 80             LD (LOPVAR),HL
 248+ 2D31 22 03 80             LD (STKGOS),HL
 249+ 2D34 3E 3E        ST3:    LD   A,3EH                       ; PROMPT '>' AND
 250+ 2D36 CD 8A 33             CALL GETLN                       ; READ A LINE
 251+ 2D39 D5                   PUSH DE                          ; DE->END OF LINE
 252+ 2D3A 11 C0 FD             LD  DE,BUFFER                    ; DE->BEGINNING OF LINE
 253+ 2D3D CD D3 2C             CALL TSTNUM                      ; TEST IF IT IS A NUMBER
 254+ 2D40 CD 86 2C             CALL IGNBLK
 255+ 2D43 7C                   LD   A,H                         ; HL=VALUE OF THE # OR
 256+ 2D44 B5                   OR  L                            ; 0 IF NO # WAS FOUND
 257+ 2D45 C1                   POP  BC                          ; BC->END OF LINE
 258+ 2D46 CA 86 37             JP Z,DIRECT
 259+ 2D49 1B                   DEC  DE                          ; BACKUP DE AND SAVE
 260+ 2D4A 7C                   LD   A,H                         ; VALUE OF LINE # THERE
 261+ 2D4B 12                   LD (DE),A
 262+ 2D4C 1B                   DEC  DE
 263+ 2D4D 7D                   LD   A,L
 264+ 2D4E 12                   LD (DE),A
 265+ 2D4F C5                   PUSH BC                          ; BC,DE->BEGIN, END
 266+ 2D50 D5                   PUSH DE
 267+ 2D51 79                   LD   A,C
 268+ 2D52 93                   SUB  E
 269+ 2D53 F5                   PUSH AF                          ; A=# OF BYTES IN LINE
 270+ 2D54 CD D8 33             CALL FNDLN                       ; FIND THIS LINE IN SAVE
 271+ 2D57 D5                   PUSH DE                          ; AREA, DE->SAVE AREA
 272+ 2D58 C2 6B 2D             JP NZ,ST4                        ; NZ:NOT FOUND, INSERT
 273+ 2D5B D5                   PUSH DE                          ; Z:FOUND, DELETE IT
 274+ 2D5C CD F6 33             CALL FNDNXT                      ; FIND NEXT LINE
 275+ 2D5F                                                       ; DE->NEXT LINE
 276+ 2D5F C1                   POP  BC                          ; BC->LINE TO BE DELETED
 277+ 2D60 2A 15 80             LD HL,(TXTUNF)                   ; HL->UNFILLED SAVE AREA
 278+ 2D63 CD 96 34             CALL MVUP                        ; MOVE UP TO DELETE
 279+ 2D66 60                   LD   H,B                         ; TXTUNF->UNFILLED AREA
 280+ 2D67 69                   LD   L,C
 281+ 2D68 22 15 80             LD (TXTUNF),HL                   ; UPDATE
 282+ 2D6B C1           ST4:    POP  BC                          ; GET READY TO INSERT
 283+ 2D6C 2A 15 80             LD HL,(TXTUNF)                   ; BUT FIRST CHECK IF
 284+ 2D6F F1                   POP  AF                          ; THE LENGTH OF NEW LINE
 285+ 2D70 E5                   PUSH HL                          ; IS 3 (LINE # AND CR)
 286+ 2D71 FE 03                CP  3                            ; THEN DO NOT INSERT
 287+ 2D73 CA 18 2D             JP Z,RSTART                      ; MUST CLEAR THE STACK
 288+ 2D76 85                   ADD  A,L                         ; COMPUTE NEW TXTUNF
 289+ 2D77 6F                   LD   L,A
 290+ 2D78 3E 00                LD   A,0
 291+ 2D7A 8C                   ADC  A,H
 292+ 2D7B 67                   LD   H,A                         ; HL->NEW UNFILLED AREA
 293+ 2D7C 11 87 FD             LD  DE,TXTEND                    ; CHECK TO SEE IF THERE
 294+ 2D7F CD 80 2C             CALL COMP                          ; IS ENOUGH SPACE
 295+ 2D82 D2 83 33             JP NC,QSORRY                     ; SORRY, NO ROOM FOR IT
 296+ 2D85 22 15 80             LD (TXTUNF),HL                   ; OK, UPDATE TXTUNF
 297+ 2D88 D1                   POP  DE                          ; DE->OLD UNFILLED AREA
 298+ 2D89 CD A1 34             CALL MVDOWN
 299+ 2D8C D1                   POP  DE                          ; DE->BEGIN, HL->END
 300+ 2D8D E1                   POP  HL
 301+ 2D8E CD 96 34             CALL MVUP                        ; MOVE NEW LINE TO SAVE
 302+ 2D91 C3 34 2D             JP  ST3                          ; AREA
 303+ 2D94
 304+ 2D94                                                       ; *************************************************************
 305+ 2D94
 306+ 2D94                                                       ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 307+ 2D94                                                       ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 308+ 2D94                                                       ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 309+ 2D94                                                       ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 310+ 2D94                                                       ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 311+ 2D94
 312+ 2D94                                                       ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
 313+ 2D94                                                       ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 314+ 2D94                                                       ; GO BACK TO 'RSTART'.
 315+ 2D94                                                       ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 316+ 2D94                                                       ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 317+ 2D94                                                       ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
 318+ 2D94                                                       ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 319+ 2D94                                                       ; *************************************************************
 320+ 2D94
 321+ 2D94                                                       ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 322+ 2D94
 323+ 2D94                                                       ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 324+ 2D94
 325+ 2D94                                                       ; 'STOP(CR)' GOES BACK TO 'RSTART'
 326+ 2D94
 327+ 2D94                                                       ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 328+ 2D94                                                       ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 329+ 2D94                                                       ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 330+ 2D94
 331+ 2D94                                                       ; THERE ARE 3 MORE ENTRIES IN 'RUN':
 332+ 2D94                                                       ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 333+ 2D94                                                       ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 334+ 2D94                                                       ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 335+ 2D94
 336+ 2D94                                                       ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 337+ 2D94                                                       ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 338+ 2D94
 339+ 2D94 CD 4E 33     NEW:    CALL ENDCHK                      ; *** NEW(CR) ***
 340+ 2D97 21 19 80             LD  HL,TXTBGN
 341+ 2D9A 22 15 80             LD (TXTUNF),HL
 342+ 2D9D
 343+ 2D9D CD 4E 33     STOP:   CALL ENDCHK                      ; *** STOP(CR) ***
 344+ 2DA0 C3 18 2D             JP  RSTART
 345+ 2DA3
 346+ 2DA3              TBDIR:                                    ; *** DIR(CR) ***
 347+ 2DA3                                                      ; This does a directory listing.
 348+ 2DA3 CD 4E 33             call ENDCHK
 349+ 2DA6
 350+ 2DA6                      ; Clear files counter
 351+ 2DA6 3E 00                ld a, 0
 352+ 2DA8 32 88 FD             ld (tb_dir_count), a
 353+ 2DAB
 354+ 2DAB                      ; Open /TBASIC folder
 355+ 2DAB 21 95 14             ld hl, TINY_BASIC_FOLDER_NAME
 356+ 2DAE CD 33 13             call open_file
 357+ 2DB1
 358+ 2DB1                      ; Then open *
 359+ 2DB1 21 8E 14             ld hl, STAR_DOT_STAR
 360+ 2DB4 CD 33 13             call open_file
 361+ 2DB7
 362+ 2DB7                      ; Loop through, printing the file names, one per line
 363+ 2DB7              tb_dir_loop:
 364+ 2DB7 FE 1D                cp USB_INT_DISK_READ
 365+ 2DB9 28 20                jr z, tbasic_dir_loop_good
 366+ 2DBB
 367+ 2DBB 3A 88 FD             ld a, (tb_dir_count)
 368+ 2DBE FE 00                cp 0
 369+ 2DC0 C2 18 2D             jp nz, RSTART
 370+ 2DC3
 371+ 2DC3 CD B5 06             call message
 372+ 2DC6 4E 6F 20 66          db 'No files found.',13,10,0
 372+ 2DCA 69 6C 65 73
 372+ 2DCE 20 66 6F 75
 372+ 2DD2 6E 64 2E 0D
 372+ 2DD6 0A 00
 373+ 2DD8
 374+ 2DD8 C3 18 2D             jp RSTART
 375+ 2DDB
 376+ 2DDB              tbasic_dir_loop_good:
 377+ 2DDB 3E 27                ld a, RD_USB_DATA0
 378+ 2DDD CD 3A 14             call send_command_byte
 379+ 2DE0 CD 43 14             call read_data_byte                 ; Find out how many bytes there are to read
 380+ 2DE3
 381+ 2DE3 CD 49 14             call read_data_bytes_into_buffer    ; read them into disk_buffer
 382+ 2DE6 FE 20                cp 32                               ; Did we read at least 32 bytes?
 383+ 2DE8 30 0B                jr nc, tb_dir_good_length
 384+ 2DEA              tb_dir_next:
 385+ 2DEA 3E 33                ld a, FILE_ENUM_GO                  ; Go to next entry in the directory
 386+ 2DEC CD 3A 14             call send_command_byte
 387+ 2DEF CD 7F 14             call read_status_byte
 388+ 2DF2 C3 B7 2D             jp tb_dir_loop
 389+ 2DF5
 390+ 2DF5              tb_dir_good_length:
 391+ 2DF5 3A D1 BF             ld a, (disk_buffer+11)
 392+ 2DF8 E6 16                and $16                             ; Check for hidden or system files, or directories
 393+ 2DFA C2 EA 2D             jp nz, tb_dir_next                  ; and skip accordingly.
 394+ 2DFD
 395+ 2DFD              tb_it_is_not_system:
 396+ 2DFD 21 88 FD             ld hl, tb_dir_count
 397+ 2E00 34                   inc (hl)
 398+ 2E01
 399+ 2E01                      ; Show filename from diskbuffer
 400+ 2E01 06 08                ld b, 8
 401+ 2E03 21 C6 BF             ld hl, disk_buffer
 402+ 2E06              tb_dir_show_name_loop:
 403+ 2E06 7E                   ld a, (hl)
 404+ 2E07 CD 6A 06             call print_a
 405+ 2E0A 23                   inc hl
 406+ 2E0B 10 F9                djnz tb_dir_show_name_loop
 407+ 2E0D
 408+ 2E0D 3E 2E                ld a, '.'
 409+ 2E0F CD 6A 06             call print_a
 410+ 2E12
 411+ 2E12 06 03                ld b, 3
 412+ 2E14              tb_dir_show_extension_loop:
 413+ 2E14 7E                   ld a, (hl)
 414+ 2E15 CD 6A 06             call print_a
 415+ 2E18 23                   inc hl
 416+ 2E19 10 F9                djnz tb_dir_show_extension_loop
 417+ 2E1B
 418+ 2E1B CD D4 05             call newline
 419+ 2E1E
 420+ 2E1E C3 EA 2D             jp tb_dir_next
 421+ 2E21
 422+ 2E21              SAVE:                                   ; *** SAVE "filename" ***
 423+ 2E21                                                      ; This Saves the current program to USB Drive with the given name.
 424+ 2E21 D5                   push de
 425+ 2E22 CD 85 2E             call get_program_size
 426+ 2E25 D1                   pop de
 427+ 2E26 7C                   ld a, h
 428+ 2E27 B5                   or l
 429+ 2E28 FE 00                cp 0
 430+ 2E2A 20 20                jr nz, save_continue
 431+ 2E2C CD B5 06             call message
 432+ 2E2F 4E 6F 20 70          db 'No program yet to save!',13,10,0
 432+ 2E33 72 6F 67 72
 432+ 2E37 61 6D 20 79
 432+ 2E3B 65 74 20 74
 432+ 2E3F 6F 20 73 61
 432+ 2E43 76 65 21 0D
 432+ 2E47 0A 00
 433+ 2E49 C3 18 2D             jp RSTART
 434+ 2E4C              save_continue:
 435+ 2E4C CD BF 37             call READ_QUOTED_FILENAME
 436+ 2E4F CD 48 2F             call does_file_exist
 437+ 2E52 CC 34 2F             call z, tb_erase_file
 438+ 2E55
 439+ 2E55 CD 46 13             call close_file
 440+ 2E58
 441+ 2E58                      ;call message
 442+ 2E58                      ;db 'Creating file...',13,10,0
 443+ 2E58
 444+ 2E58 21 95 14             ld hl, TINY_BASIC_FOLDER_NAME
 445+ 2E5B CD 33 13             call open_file
 446+ 2E5E 11 EC BF             ld de, filename_buffer
 447+ 2E61 CD 1E 13             call create_file
 448+ 2E64 28 29                jr z, tb_save_continue
 449+ 2E66 CD B5 06             call message
 450+ 2E69 43 6F 75 6C          db 'Could not create file.',13,10,0
 450+ 2E6D 64 20 6E 6F
 450+ 2E71 74 20 63 72
 450+ 2E75 65 61 74 65
 450+ 2E79 20 66 69 6C
 450+ 2E7D 65 2E 0D 0A
 450+ 2E81 00
 451+ 2E82 C3 18 2D             jp RSTART
 452+ 2E85
 453+ 2E85              get_program_size:
 454+ 2E85                      ; Gets the total size of the program, in bytes, into hl
 455+ 2E85 11 19 80             ld de,TXTBGN
 456+ 2E88 2A 15 80             ld hl, (TXTUNF)
 457+ 2E8B B7                   or a
 458+ 2E8C ED 52                sbc hl, de
 459+ 2E8E C9                   ret
 460+ 2E8F
 461+ 2E8F              tb_save_continue:
 462+ 2E8F 3E 3C                ld a, BYTE_WRITE
 463+ 2E91 CD 3A 14             call send_command_byte
 464+ 2E94
 465+ 2E94                      ; Send number of bytes we are about to write, as 16 bit number, low first
 466+ 2E94 CD 85 2E             call get_program_size
 467+ 2E97 7D                   ld a, l
 468+ 2E98 CD 1E 14             call send_data_byte
 469+ 2E9B 7C                   ld a, h
 470+ 2E9C CD 1E 14             call send_data_byte
 471+ 2E9F
 472+ 2E9F 21 19 80             ld hl, TXTBGN
 473+ 2EA2 CD 5D 0F             call write_loop
 474+ 2EA5
 475+ 2EA5 CD 46 13             call close_file
 476+ 2EA8
 477+ 2EA8 C3 18 2D             jp RSTART
 478+ 2EAB
 479+ 2EAB              LOAD:                                   ; *** LOAD "filename" ***
 480+ 2EAB                                                      ; This Loads a program from USB Drive
 481+ 2EAB CD BF 37             call READ_QUOTED_FILENAME
 482+ 2EAE CD 48 2F             call does_file_exist
 483+ 2EB1 28 18                jr z, load_can_do
 484+ 2EB3              tb_file_not_found
 485+ 2EB3 CD B5 06             call message
 486+ 2EB6 46 69 6C 65          db 'File not found.',13,10,0
 486+ 2EBA 20 6E 6F 74
 486+ 2EBE 20 66 6F 75
 486+ 2EC2 6E 64 2E 0D
 486+ 2EC6 0A 00
 487+ 2EC8 C3 18 2D             jp RSTART
 488+ 2ECB
 489+ 2ECB              load_can_do:
 490+ 2ECB 21 95 14             ld hl, TINY_BASIC_FOLDER_NAME
 491+ 2ECE CD 33 13             call open_file
 492+ 2ED1 21 EC BF             ld hl, filename_buffer
 493+ 2ED4 CD 33 13             call open_file
 494+ 2ED7
 495+ 2ED7 3E 3A                ld a, BYTE_READ
 496+ 2ED9 CD 3A 14             call send_command_byte
 497+ 2EDC 3E FF                ld a, 255                           ; Request all of the file
 498+ 2EDE CD 1E 14             call send_data_byte
 499+ 2EE1 3E FF                ld a, 255                           ; Yes, all!
 500+ 2EE3 CD 1E 14             call send_data_byte
 501+ 2EE6
 502+ 2EE6 3E 22                ld a, GET_STATUS
 503+ 2EE8 CD 3A 14             call send_command_byte
 504+ 2EEB CD 43 14             call read_data_byte
 505+ 2EEE 21 19 80             ld hl, TXTBGN                       ; Get back the target address
 506+ 2EF1              tb_load_loop1:
 507+ 2EF1 FE 1D                cp USB_INT_DISK_READ
 508+ 2EF3 20 25                jr nz, tb_load_finished
 509+ 2EF5
 510+ 2EF5 E5                   push hl
 511+ 2EF6 CD 20 06             call disk_on
 512+ 2EF9 3E 27                ld a, RD_USB_DATA0
 513+ 2EFB CD 3A 14             call send_command_byte
 514+ 2EFE CD 43 14             call read_data_byte
 515+ 2F01 E1                   pop hl
 516+ 2F02 CD 4C 14             call read_data_bytes_into_hl
 517+ 2F05 E5                   push hl
 518+ 2F06 CD 19 06             call disk_off
 519+ 2F09 3E 3B                ld a, BYTE_RD_GO
 520+ 2F0B CD 3A 14             call send_command_byte
 521+ 2F0E 3E 22                ld a, GET_STATUS
 522+ 2F10 CD 3A 14             call send_command_byte
 523+ 2F13 CD 43 14             call read_data_byte
 524+ 2F16 E1                   pop hl
 525+ 2F17 C3 F1 2E             jp tb_load_loop1
 526+ 2F1A              tb_load_finished:
 527+ 2F1A 22 15 80             ld (TXTUNF), hl
 528+ 2F1D CD 46 13             call close_file
 529+ 2F20 C3 18 2D             jp RSTART
 530+ 2F23
 531+ 2F23              ERASE:                                   ; *** ERASE "filename" ***
 532+ 2F23                                                      ; This erases a file
 533+ 2F23 CD BF 37             call READ_QUOTED_FILENAME
 534+ 2F26 CD 48 2F             call does_file_exist
 535+ 2F29 20 88                jr nz, tb_file_not_found
 536+ 2F2B CD 34 2F             call tb_erase_file
 537+ 2F2E C3 18 2D             jp RSTART
 538+ 2F31
 539+ 2F31              EXIT:                           ; When tinybasic is launched it is called
 540+ 2F31                                              ; from the monitor.
 541+ 2F31                                              ;
 542+ 2F31                                              ; So we know the ROM is mapped.
 543+ 2F31                                              ;
 544+ 2F31                                              ; We could preserve the stack and merely RET
 545+ 2F31                                              ; but instead we'll just jump to the 0x0000
 546+ 2F31                                              ; address.
 547+ 2F31 C3 00 00             jp 0x0000
 548+ 2F34
 549+ 2F34              tb_erase_file:
 550+ 2F34                      ;call message
 551+ 2F34                      ;db 'Erasing file...',13,10,0
 552+ 2F34 3E 2F                ld a, SET_FILE_NAME
 553+ 2F36 CD 3A 14             call send_command_byte
 554+ 2F39 21 EC BF             ld hl, filename_buffer
 555+ 2F3C CD 24 14             call send_data_string
 556+ 2F3F 3E 35                ld a, FILE_ERASE
 557+ 2F41 CD 3A 14             call send_command_byte
 558+ 2F44 CD 7F 14             call read_status_byte
 559+ 2F47 C9                   ret
 560+ 2F48
 561+ 2F48              does_file_exist:
 562+ 2F48                      ; Looks on disk for a file. Returns Z if file exists.
 563+ 2F48 21 95 14             ld hl, TINY_BASIC_FOLDER_NAME
 564+ 2F4B CD 33 13             call open_file
 565+ 2F4E 21 EC BF             ld hl, filename_buffer
 566+ 2F51 C3 33 13             jp open_file
 567+ 2F54
 568+ 2F54 CD 4E 33     RUN:    CALL ENDCHK                      ; *** RUN(CR) ***
 569+ 2F57 11 19 80             LD  DE,TXTBGN                    ; FIRST SAVED LINE
 570+ 2F5A
 571+ 2F5A 21 00 00     RUNNXL: LD  HL,0                         ; *** RUNNXL ***
 572+ 2F5D CD E0 33             CALL FNDLP                       ; FIND WHATEVER LINE #
 573+ 2F60 DA 18 2D             JP C,RSTART                      ; C:PASSED TXTUNF, QUIT
 574+ 2F63
 575+ 2F63 EB           RUNTSL: EX DE,HL                         ; *** RUNTSL ***
 576+ 2F64 22 01 80             LD (CURRNT),HL                   ; SET 'CURRENT'->LINE #
 577+ 2F67 EB                   EX DE,HL
 578+ 2F68 13                   INC  DE                          ; BUMP PASS LINE #
 579+ 2F69 13                   INC  DE
 580+ 2F6A
 581+ 2F6A CD B7 36     RUNSML: CALL CHKIO                       ; *** RUNSML ***
 582+ 2F6D 21 05 37             LD  HL,TAB2-1                    ; FIND COMMAND IN TAB2
 583+ 2F70 C3 89 37             JP  EXEC                         ; AND EXECUTE IT
 584+ 2F73
 585+ 2F73 CD 79 2C     GOTO:   CALL EXPR                          ; *** GOTO EXPR ***
 586+ 2F76 D5                   PUSH DE                          ; SAVE FOR ERROR ROUTINE
 587+ 2F77 CD 4E 33             CALL ENDCHK                      ; MUST FIND A CR
 588+ 2F7A CD D8 33             CALL FNDLN                       ; FIND THE TARGET LINE
 589+ 2F7D C2 FE 2C             JP NZ,AHOW                       ; NO SUCH LINE #
 590+ 2F80 F1                   POP  AF                          ; CLEAR THE PUSH DE
 591+ 2F81 C3 63 2F             JP  RUNTSL                       ; GO DO IT
 592+ 2F84
 593+ 2F84                                                       ; *************************************************************
 594+ 2F84
 595+ 2F84                                                       ; *** LIST *** & PRINT ***
 596+ 2F84
 597+ 2F84                                                       ; LIST HAS TWO FORMS:
 598+ 2F84                                                       ; 'LIST(CR)' LISTS ALL SAVED LINES
 599+ 2F84                                                       ; 'LIST #(CR)' START LIST AT THIS LINE #
 600+ 2F84                                                       ; YOU CAN STOP THE LISTING BY CONTROL C KEY
 601+ 2F84
 602+ 2F84                                                       ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 603+ 2F84                                                       ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 604+ 2F84                                                       ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 605+ 2F84
 606+ 2F84                                                       ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 607+ 2F84                                                       ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 608+ 2F84                                                       ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 609+ 2F84                                                       ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 610+ 2F84                                                       ; SPECIFIED, 6 POSITIONS WILL BE USED.
 611+ 2F84
 612+ 2F84                                                       ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 613+ 2F84                                                       ; DOUBLE QUOTES.
 614+ 2F84
 615+ 2F84                                                       ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
 616+ 2F84
 617+ 2F84                                                       ; A $ means print an ascii character, so 'PRINT $72,$107' will print "Hi"
 618+ 2F84
 619+ 2F84                                                       ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 620+ 2F84                                                       ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 621+ 2F84                                                       ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 622+ 2F84
 623+ 2F84 CD D3 2C     LIST:   CALL TSTNUM                      ; TEST IF THERE IS A #
 624+ 2F87 CD 4E 33             CALL ENDCHK                      ; IF NO # WE GET A 0
 625+ 2F8A CD D8 33             CALL FNDLN                       ; FIND THIS OR NEXT LINE
 626+ 2F8D DA 18 2D     LS1:    JP C,RSTART                      ; C:PASSED TXTUNF
 627+ 2F90 CD 81 34             CALL PRTLN                       ; PRINT THE LINE
 628+ 2F93 CD B7 36             CALL CHKIO                       ; STOP IF HIT CONTROL-C
 629+ 2F96 CD E0 33             CALL FNDLP                       ; FIND NEXT LINE
 630+ 2F99 C3 8D 2F             JP  LS1                          ; AND LOOP BACK
 631+ 2F9C
 632+ 2F9C 0E 06        PRINT:  LD   C,6                         ; C = # OF SPACES
 633+ 2F9E CD 3E 2C             CALL TSTC                          ; Test for ";"
 634+ 2FA1 3B                   DB   3BH
 635+ 2FA2 06                   DB   PR2-$-1
 636+ 2FA3 CD 52 2C             CALL CRLF                        ; GIVE CR-LF AND
 637+ 2FA6 C3 6A 2F             JP  RUNSML                       ; CONTINUE SAME LINE
 638+ 2FA9 CD 3E 2C     PR2:    CALL TSTC                          ; Test for (CR)
 639+ 2FAC 0D                   DB   CR
 640+ 2FAD 06                   DB   PR0-$-1
 641+ 2FAE CD 52 2C             CALL CRLF                        ; ALSO GIVE CR-LF AND
 642+ 2FB1 C3 5A 2F             JP  RUNNXL                       ; GO TO NEXT LINE
 643+ 2FB4 CD 3E 2C     PR0:    CALL TSTC                          ; ELSE IS IT FORMAT? e.g. #4 = format 4 digits long
 644+ 2FB7 23                   DB   '#'
 645+ 2FB8 07                   DB   PR1-$-1
 646+ 2FB9 CD 79 2C             CALL EXPR                          ; YES, EVALUATE EXPR.
 647+ 2FBC 4D                   LD   C,L                         ; AND SAVE IT IN C
 648+ 2FBD C3 E3 2F             JP  PR3                          ; LOOK FOR MORE TO PRINT
 649+ 2FC0 CD 3E 2C     PR1:    CALL TSTC                         ; Is it a "$"? e.g. $65 will print 'A'
 650+ 2FC3 24                   DB   '$'
 651+ 2FC4 18                   DB   PRNOTDOLLAR-$-1
 652+ 2FC5 CD 79 2C             CALL EXPR                         ; Evaluate the expression, which will result in an 16 bit number in hl
 653+ 2FC8 7C                   ld a, h                         ; If hl > 255 show error
 654+ 2FC9 B7                   or a
 655+ 2FCA 20 09                jr nz, PR_ERROR
 656+ 2FCC 7D                   ld a, l                         ; Get just bottom 8 bits
 657+ 2FCD FE 20                cp 32
 658+ 2FCF 38 04                jr c, PR_ERROR
 659+ 2FD1 FE 7F                cp 127
 660+ 2FD3 38 02                jr c, PR_ASCII
 661+ 2FD5              PR_ERROR:
 662+ 2FD5 3E 2A                ld a, '*'
 663+ 2FD7              PR_ASCII:
 664+ 2FD7 CD 54 2C             CALL OUTC
 665+ 2FDA C3 E3 2F             jp PR3                          ; Look for more to print
 666+ 2FDD
 667+ 2FDD              PRNOTDOLLAR:
 668+ 2FDD CD 10 34             CALL QTSTG                       ; OR IS IT A STRING?
 669+ 2FE0 C3 F4 2F             JP  PR8                          ; IF NOT, MUST BE EXPR.
 670+ 2FE3 CD 3E 2C     PR3:    CALL TSTC                          ; IF ",", GO FIND NEXT
 671+ 2FE6 2C                   DB   ','
 672+ 2FE7 06                   DB   PR6-$-1
 673+ 2FE8 CD 3B 33             CALL FIN                         ; IN THE LIST.
 674+ 2FEB C3 B4 2F             JP  PR0                          ; LIST CONTINUES
 675+ 2FEE CD 52 2C     PR6:    CALL CRLF                        ; LIST ENDS
 676+ 2FF1 CD 8E 2C             CALL FINISH
 677+ 2FF4 CD 79 2C     PR8:    CALL EXPR                          ; EVALUATE THE EXPR
 678+ 2FF7 C5                   PUSH BC
 679+ 2FF8 CD 3D 34             CALL PRTNUM                      ; PRINT THE VALUE
 680+ 2FFB C1                   POP  BC
 681+ 2FFC C3 E3 2F             JP  PR3                          ; MORE TO PRINT?
 682+ 2FFF
 683+ 2FFF                                                       ; *************************************************************
 684+ 2FFF
 685+ 2FFF                                                       ; *** GOSUB *** & RETURN ***
 686+ 2FFF
 687+ 2FFF                                                       ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 688+ 2FFF                                                       ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 689+ 2FFF                                                       ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 690+ 2FFF                                                       ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 691+ 2FFF                                                       ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 692+ 2FFF                                                       ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 693+ 2FFF                                                       ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 694+ 2FFF                                                       ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 695+ 2FFF                                                       ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 696+ 2FFF
 697+ 2FFF                                                       ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 698+ 2FFF                                                       ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 699+ 2FFF                                                       ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 700+ 2FFF                                                       ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 701+ 2FFF
 702+ 2FFF CD CC 34     GOSUB:  CALL PUSHA                       ; SAVE THE CURRENT "FOR"
 703+ 3002 CD 79 2C             CALL EXPR                          ; PARAMETERS
 704+ 3005 D5                   PUSH DE                          ; AND TEXT POINTER
 705+ 3006 CD D8 33             CALL FNDLN                       ; FIND THE TARGET LINE
 706+ 3009 C2 FE 2C             JP NZ,AHOW                       ; NOT THERE. SAY "HOW?"
 707+ 300C 2A 01 80             LD HL,(CURRNT)                   ; FOUND IT, SAVE OLD
 708+ 300F E5                   PUSH HL                          ; 'CURRNT' OLD 'STKGOS'
 709+ 3010 2A 03 80             LD HL,(STKGOS)
 710+ 3013 E5                   PUSH HL
 711+ 3014 21 00 00             LD  HL,0                         ; AND LOAD NEW ONES
 712+ 3017 22 09 80             LD (LOPVAR),HL
 713+ 301A 39                   ADD HL,SP
 714+ 301B 22 03 80             LD (STKGOS),HL
 715+ 301E C3 63 2F             JP  RUNTSL                       ; THEN RUN THAT LINE
 716+ 3021 CD 4E 33     RETURN: CALL ENDCHK                      ; THERE MUST BE A CR
 717+ 3024 2A 03 80             LD HL,(STKGOS)                   ; OLD STACK POINTER
 718+ 3027 7C                   LD   A,H                         ; 0 MEANS NOT EXIST
 719+ 3028 B5                   OR  L
 720+ 3029 CA 54 33             JP Z,QWHAT                       ; SO, WE SAY: "WHAT?"
 721+ 302C F9                   LD SP,HL                         ; ELSE, RESTORE IT
 722+ 302D E1                   POP  HL
 723+ 302E 22 03 80             LD (STKGOS),HL                   ; AND THE OLD 'STKGOS'
 724+ 3031 E1                   POP  HL
 725+ 3032 22 01 80             LD (CURRNT),HL                   ; AND THE OLD 'CURRNT'
 726+ 3035 D1                   POP  DE                          ; OLD TEXT POINTER
 727+ 3036 CD B0 34             CALL POPA                        ; OLD "FOR" PARAMETERS
 728+ 3039 CD 8E 2C             CALL FINISH                          ; AND WE ARE BACK HOME
 729+ 303C
 730+ 303C                                                       ; *************************************************************
 731+ 303C
 732+ 303C                                                       ; *** FOR *** & NEXT ***
 733+ 303C
 734+ 303C                                                       ; 'FOR' HAS TWO FORMS:
 735+ 303C                                                       ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 736+ 303C                                                       ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 737+ 303C                                                       ; EXP3=1.  (I.E., WITH A STEP OF +1.)
 738+ 303C                                                       ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 739+ 303C                                                       ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 740+ 303C                                                       ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 741+ 303C                                                       ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 742+ 303C                                                       ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 743+ 303C                                                       ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 744+ 303C                                                       ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 745+ 303C                                                       ; BEFORE THE NEW ONE OVERWRITES IT.
 746+ 303C                                                       ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 747+ 303C                                                       ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 748+ 303C                                                       ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 749+ 303C                                                       ; (PURGED FROM THE STACK..)
 750+ 303C
 751+ 303C                                                       ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 752+ 303C                                                       ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 753+ 303C                                                       ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 754+ 303C                                                       ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 755+ 303C                                                       ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 756+ 303C                                                       ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 757+ 303C                                                       ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 758+ 303C                                                       ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 759+ 303C                                                       ; IS PURGED AND EXECUTION CONTINUES.
 760+ 303C
 761+ 303C CD CC 34     FOR:    CALL PUSHA                       ; SAVE THE OLD SAVE AREA
 762+ 303F CD 22 33             CALL SETVAL                      ; SET THE CONTROL VAR.
 763+ 3042 2B                   DEC  HL                          ; HL IS ITS ADDRESS
 764+ 3043 22 09 80             LD (LOPVAR),HL                   ; SAVE THAT
 765+ 3046 21 61 37             LD  HL,TAB5-1                    ; USE 'EXEC' TO LOOK
 766+ 3049 C3 89 37             JP  EXEC                         ; FOR THE WORD 'TO'
 767+ 304C CD 79 2C     FR1:    CALL EXPR                          ; EVALUATE THE LIMIT
 768+ 304F 22 0D 80             LD (LOPLMT),HL                   ; SAVE THAT
 769+ 3052 21 67 37             LD  HL,TAB6-1                    ; USE 'EXEC' TO LOOK
 770+ 3055 C3 89 37             JP EXEC                          ; FOR THE WORD 'STEP'
 771+ 3058 CD 79 2C     FR2:    CALL EXPR                          ; FOUND IT, GET STEP
 772+ 305B C3 61 30             JP  FR4
 773+ 305E 21 01 00     FR3:    LD  HL,1H                        ; NOT FOUND, SET TO 1
 774+ 3061 22 0B 80     FR4:    LD (LOPINC),HL                   ; SAVE THAT TOO
 775+ 3064 2A 01 80     FR5:    LD HL,(CURRNT)                   ; SAVE CURRENT LINE #
 776+ 3067 22 0F 80             LD (LOPLN),HL
 777+ 306A EB                   EX DE,HL                         ; AND TEXT POINTER
 778+ 306B 22 11 80             LD (LOPPT),HL
 779+ 306E 01 0A 00             LD  BC,0AH                       ; DIG INTO STACK TO
 780+ 3071 2A 09 80             LD HL,(LOPVAR)                   ; FIND 'LOPVAR'
 781+ 3074 EB                   EX DE,HL
 782+ 3075 60                   LD   H,B
 783+ 3076 68                   LD   L,B                         ; HL=0 NOW
 784+ 3077 39                   ADD HL,SP                        ; HERE IS THE STACK
 785+ 3078 3E                   DB   3EH
 786+ 3079 09           FR7:    ADD HL,BC                        ; EACH LEVEL IS 10 DEEP
 787+ 307A 7E                   LD   A,(HL)                      ; GET THAT OLD 'LOPVAR'
 788+ 307B 23                   INC  HL
 789+ 307C B6                   OR  (HL)
 790+ 307D CA 9A 30             JP Z,FR8                         ; 0 SAYS NO MORE IN IT
 791+ 3080 7E                   LD   A,(HL)
 792+ 3081 2B                   DEC  HL
 793+ 3082 BA                   CP  D                            ; SAME AS THIS ONE?
 794+ 3083 C2 79 30             JP NZ,FR7
 795+ 3086 7E                   LD   A,(HL)                      ; THE OTHER HALF?
 796+ 3087 BB                   CP  E
 797+ 3088 C2 79 30             JP NZ,FR7
 798+ 308B EB                   EX DE,HL                         ; YES, FOUND ONE
 799+ 308C 21 00 00             LD  HL,0H
 800+ 308F 39                   ADD HL,SP                        ; TRY TO MOVE SP
 801+ 3090 44                   LD   B,H
 802+ 3091 4D                   LD   C,L
 803+ 3092 21 0A 00             LD  HL,0AH
 804+ 3095 19                   ADD HL,DE
 805+ 3096 CD A1 34             CALL MVDOWN                      ; AND PURGE 10 WORDS
 806+ 3099 F9                   LD SP,HL                         ; IN THE STACK
 807+ 309A 2A 11 80     FR8:    LD HL,(LOPPT)                    ; JOB DONE, RESTORE DE
 808+ 309D EB                   EX DE,HL
 809+ 309E CD 8E 2C             CALL FINISH                          ; AND CONTINUE
 810+ 30A1
 811+ 30A1 CD 95 2C     NEXT:   CALL TSTV                          ; GET ADDRESS OF VAR.
 812+ 30A4 DA 54 33             JP C,QWHAT                       ; NO VARIABLE, "WHAT?"
 813+ 30A7 22 05 80             LD (VARNXT),HL                   ; YES, SAVE IT
 814+ 30AA D5           NX0:    PUSH DE                          ; SAVE TEXT POINTER
 815+ 30AB EB                   EX DE,HL
 816+ 30AC 2A 09 80             LD HL,(LOPVAR)                   ; GET VAR. IN 'FOR'
 817+ 30AF 7C                   LD   A,H
 818+ 30B0 B5                   OR  L                            ; 0 SAYS NEVER HAD ONE
 819+ 30B1 CA 55 33             JP Z,AWHAT                       ; SO WE ASK: "WHAT?"
 820+ 30B4 CD 80 2C             CALL COMP                          ; ELSE WE CHECK THEM
 821+ 30B7 CA C4 30             JP Z,NX3                         ; OK, THEY AGREE
 822+ 30BA D1                   POP  DE                          ; NO, LET'S SEE
 823+ 30BB CD B0 34             CALL POPA                        ; PURGE CURRENT LOOP
 824+ 30BE 2A 05 80             LD HL,(VARNXT)                   ; AND POP ONE LEVEL
 825+ 30C1 C3 AA 30             JP  NX0                          ; GO CHECK AGAIN
 826+ 30C4 5E           NX3:    LD   E,(HL)                      ; COME HERE WHEN AGREED
 827+ 30C5 23                   INC  HL
 828+ 30C6 56                   LD   D,(HL)                      ; DE=VALUE OF VAR.
 829+ 30C7 2A 0B 80             LD HL,(LOPINC)
 830+ 30CA E5                   PUSH HL
 831+ 30CB 7C                   LD   A,H
 832+ 30CC AA                   XOR  D
 833+ 30CD 7A                   LD   A,D
 834+ 30CE 19                   ADD HL,DE                        ; ADD ONE STEP
 835+ 30CF FA D6 30             JP M,NX4
 836+ 30D2 AC                   XOR  H
 837+ 30D3 FA FA 30             JP M,NX5
 838+ 30D6 EB           NX4:    EX DE,HL
 839+ 30D7 2A 09 80             LD HL,(LOPVAR)                   ; PUT IT BACK
 840+ 30DA 73                   LD   (HL),E
 841+ 30DB 23                   INC  HL
 842+ 30DC 72                   LD   (HL),D
 843+ 30DD 2A 0D 80             LD HL,(LOPLMT)                   ; HL->LIMIT
 844+ 30E0 F1                   POP  AF                          ; OLD HL
 845+ 30E1 B7                   OR  A
 846+ 30E2 F2 E6 30             JP P,NX1                         ; STEP > 0
 847+ 30E5 EB                   EX DE,HL                         ; STEP < 0
 848+ 30E6 CD 18 33     NX1:    CALL CKHLDE                      ; COMPARE WITH LIMIT
 849+ 30E9 D1                   POP  DE                          ; RESTORE TEXT POINTER
 850+ 30EA DA FC 30             JP C,NX2                         ; OUTSIDE LIMIT
 851+ 30ED 2A 0F 80             LD HL,(LOPLN)                    ; WITHIN LIMIT, GO
 852+ 30F0 22 01 80             LD (CURRNT),HL                   ; BACK TO THE SAVED
 853+ 30F3 2A 11 80             LD HL,(LOPPT)                    ; 'CURRNT' AND TEXT
 854+ 30F6 EB                   EX DE,HL                         ; POINTER
 855+ 30F7 CD 8E 2C             CALL FINISH
 856+ 30FA E1           NX5:    POP  HL
 857+ 30FB D1                   POP  DE
 858+ 30FC CD B0 34     NX2:    CALL POPA                        ; PURGE THIS LOOP
 859+ 30FF CD 8E 2C             CALL FINISH
 860+ 3102
 861+ 3102                      ; *************************************************************
 862+ 3102
 863+ 3102                      ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 864+ 3102
 865+ 3102                      ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 866+ 3102                      ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 867+ 3102
 868+ 3102                      ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 869+ 3102                      ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 870+ 3102                      ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 871+ 3102                      ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 872+ 3102                      ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 873+ 3102                      ; EXECUTION CONTINUES AT THE NEXT LINE.
 874+ 3102
 875+ 3102                      ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 876+ 3102                      ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 877+ 3102                      ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 878+ 3102                      ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 879+ 3102                      ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 880+ 3102                      ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 881+ 3102                      ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 882+ 3102                      ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 883+ 3102                      ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 884+ 3102                      ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 885+ 3102
 886+ 3102                      ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 887+ 3102                      ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 888+ 3102                      ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 889+ 3102                      ; THIS IS HANDLED IN 'INPERR'.
 890+ 3102
 891+ 3102                      ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 892+ 3102                      ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 893+ 3102                      ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 894+ 3102                      ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 895+ 3102                      ; THIS IS DONE BY 'DEFLT'.
 896+ 3102
 897+ 3102 21 00 00     REM:    LD  HL,0H                        ; *** REM ***
 898+ 3105 3E                   DB   3EH                         ; THIS IS LIKE 'IF 0'
 899+ 3106
 900+ 3106 CD 79 2C     IFF:    CALL EXPR                          ; *** IF ***
 901+ 3109 7C                   LD   A,H                         ; IS THE EXPR.=0?
 902+ 310A B5                   OR  L
 903+ 310B C2 6A 2F             JP NZ,RUNSML                     ; NO, CONTINUE
 904+ 310E CD F8 33             CALL FNDSKP                      ; YES, SKIP REST OF LINE
 905+ 3111 D2 63 2F             JP NC,RUNTSL                     ; AND RUN THE NEXT LINE
 906+ 3114 C3 18 2D             JP  RSTART                       ; IF NO NEXT, RE-START
 907+ 3117
 908+ 3117 2A 07 80     INPERR: LD HL,(STKINP)                   ; *** INPERR ***
 909+ 311A F9                   LD SP,HL                         ; RESTORE OLD SP
 910+ 311B E1                   POP  HL                          ; AND OLD 'CURRNT'
 911+ 311C 22 01 80             LD (CURRNT),HL
 912+ 311F D1                   POP  DE                          ; AND OLD TEXT POINTER
 913+ 3120 D1                   POP  DE                          ; REDO INPUT
 914+ 3121
 915+ 3121              INPUT:                                   ; *** INPUT ***
 916+ 3121 D5           IP1:    PUSH DE                          ; SAVE IN CASE OF ERROR
 917+ 3122 CD 10 34             CALL QTSTG                       ; IS NEXT ITEM A STRING?
 918+ 3125 C3 31 31             JP  IP2                          ; NO
 919+ 3128 CD 95 2C             CALL TSTV                          ; YES, BUT FOLLOWED BY A
 920+ 312B DA 6F 31             JP C,IP4                         ; VARIABLE?   NO.
 921+ 312E C3 43 31             JP  IP3                          ; YES.  INPUT VARIABLE
 922+ 3131 D5           IP2:    PUSH DE                          ; SAVE FOR 'PRTSTG'
 923+ 3132 CD 95 2C             CALL TSTV                          ; MUST BE VARIABLE NOW
 924+ 3135 DA 54 33             JP C,QWHAT                       ; "WHAT?" IT IS NOT?
 925+ 3138 1A                   LD A,(DE)                        ; GET READY FOR 'PRTSTR'
 926+ 3139 4F                   LD   C,A
 927+ 313A 97                   SUB  A
 928+ 313B 12                   LD (DE),A
 929+ 313C D1                   POP  DE
 930+ 313D CD 02 34             CALL PRTSTG                      ; PRINT STRING AS PROMPT
 931+ 3140 79                   LD   A,C                         ; RESTORE TEXT
 932+ 3141 1B                   DEC  DE
 933+ 3142 12                   LD (DE),A
 934+ 3143 D5           IP3:    PUSH DE                          ; SAVE TEXT POINTER
 935+ 3144 EB                   EX DE,HL
 936+ 3145 2A 01 80             LD HL,(CURRNT)                   ; ALSO SAVE 'CURRNT'
 937+ 3148 E5                   PUSH HL
 938+ 3149 21 21 31             LD  HL,IP1                       ; A NEGATIVE NUMBER
 939+ 314C 22 01 80             LD (CURRNT),HL                   ; AS A FLAG
 940+ 314F 21 00 00             LD  HL,0H                        ; SAVE SP TOO
 941+ 3152 39                   ADD HL,SP
 942+ 3153 22 07 80             LD (STKINP),HL
 943+ 3156 D5                   PUSH DE                          ; OLD HL
 944+ 3157 3E 3A                LD   A,3AH                       ; PRINT THIS TOO
 945+ 3159 CD 8A 33             CALL GETLN                       ; AND GET A LINE
 946+ 315C 11 C0 FD             LD  DE,BUFFER                    ; POINTS TO BUFFER
 947+ 315F CD 79 2C             CALL EXPR                          ; EVALUATE INPUT
 948+ 3162 00                   NOP                              ; CAN BE 'CALL ENDCHK'
 949+ 3163 00                   NOP
 950+ 3164 00                   NOP
 951+ 3165 D1                   POP  DE                          ; OK, GET OLD HL
 952+ 3166 EB                   EX DE,HL
 953+ 3167 73                   LD   (HL),E                      ; SAVE VALUE IN VAR.
 954+ 3168 23                   INC  HL
 955+ 3169 72                   LD   (HL),D
 956+ 316A E1                   POP  HL                          ; GET OLD 'CURRNT'
 957+ 316B 22 01 80             LD (CURRNT),HL
 958+ 316E D1                   POP  DE                          ; AND OLD TEXT POINTER
 959+ 316F F1           IP4:    POP  AF                          ; PURGE JUNK IN STACK
 960+ 3170 CD 3E 2C             CALL TSTC                          ; IS NEXT CH. ','?
 961+ 3173 2C                   DB   ','
 962+ 3174 03                   DB   IP5-$-1
 963+ 3175 C3 21 31             JP  IP1                          ; YES, MORE ITEMS.
 964+ 3178 CD 8E 2C     IP5:    CALL FINISH
 965+ 317B
 966+ 317B 1A           DEFLT:  LD A,(DE)                        ; ***  DEFLT ***
 967+ 317C FE 0D                CP  CR                           ; EMPTY LINE IS OK
 968+ 317E CA 8C 31             JP Z,LT1                         ; ELSE IT IS 'LET'
 969+ 3181
 970+ 3181 CD 22 33     LET:    CALL SETVAL                      ; *** LET ***
 971+ 3184 CD 3E 2C             CALL TSTC                          ; SET VALUE TO VAR.
 972+ 3187 2C                   DB   ','
 973+ 3188 03                   DB   LT1-$-1
 974+ 3189 C3 81 31             JP  LET                          ; ITEM BY ITEM
 975+ 318C CD 8E 2C     LT1:    CALL FINISH                          ; UNTIL FINISH
 976+ 318F
 977+ 318F                                                       ; *************************************************************
 978+ 318F
 979+ 318F                                                       ; *** EXPR ***
 980+ 318F
 981+ 318F                                                       ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 982+ 318F                                                       ; <EXPR>::<EXPR2>
 983+ 318F                                                       ; <EXPR2><REL.OP.><EXPR2>
 984+ 318F                                                       ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 985+ 318F                                                       ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 986+ 318F                                                       ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 987+ 318F                                                       ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 988+ 318F                                                       ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 989+ 318F                                                       ; <EXPR4>::=<VARIABLE>
 990+ 318F                                                       ; <FUNCTION>
 991+ 318F                                                       ; (<EXPR>)
 992+ 318F                                                       ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 993+ 318F                                                       ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 994+ 318F                                                       ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 995+ 318F
 996+ 318F 21 6F 37     EXPR1:  LD  HL,TAB8-1                    ; LOOKUP REL.OP.
 997+ 3192 C3 89 37             JP  EXEC                         ; GO DO IT
 998+ 3195 CD BE 31     XP11:   CALL XP18                        ; REL.OP.">="
 999+ 3198 D8                   RET C                            ; NO, RETURN HL=0
1000+ 3199 6F                   LD   L,A                         ; YES, RETURN HL=1
1001+ 319A C9                   RET
1002+ 319B CD BE 31     XP12:   CALL XP18                        ; REL.OP."#"
1003+ 319E C8                   RET Z                            ; FALSE, RETURN HL=0
1004+ 319F 6F                   LD   L,A                         ; TRUE, RETURN HL=1
1005+ 31A0 C9                   RET
1006+ 31A1 CD BE 31     XP13:   CALL XP18                        ; REL.OP.">"
1007+ 31A4 C8                   RET Z                            ; FALSE
1008+ 31A5 D8                   RET C                            ; ALSO FALSE, HL=0
1009+ 31A6 6F                   LD   L,A                         ; TRUE, HL=1
1010+ 31A7 C9                   RET
1011+ 31A8 CD BE 31     XP14:   CALL XP18                        ; REL.OP."<="
1012+ 31AB 6F                   LD   L,A                         ; SET HL=1
1013+ 31AC C8                   RET Z                            ; REL. TRUE, RETURN
1014+ 31AD D8                   RET C
1015+ 31AE 6C                   LD   L,H                         ; ELSE SET HL=0
1016+ 31AF C9                   RET
1017+ 31B0 CD BE 31     XP15:   CALL XP18                        ; REL.OP."="
1018+ 31B3 C0                   RET NZ                           ; FALSE, RETURN HL=0
1019+ 31B4 6F                   LD   L,A                         ; ELSE SET HL=1
1020+ 31B5 C9                   RET
1021+ 31B6 CD BE 31     XP16:   CALL XP18                        ; REL.OP."<"
1022+ 31B9 D0                   RET NC                           ; FALSE, RETURN HL=0
1023+ 31BA 6F                   LD   L,A                         ; ELSE SET HL=1
1024+ 31BB C9                   RET
1025+ 31BC E1           XP17:   POP  HL                          ; NOT .REL.OP
1026+ 31BD C9                   RET                              ; RETURN HL=<EXPR2>
1027+ 31BE 79           XP18:   LD   A,C                         ; SUBROUTINE FOR ALL
1028+ 31BF E1                   POP  HL                          ; REL.OP.'S
1029+ 31C0 C1                   POP  BC
1030+ 31C1 E5                   PUSH HL                          ; REVERSE TOP OF STACK
1031+ 31C2 C5                   PUSH BC
1032+ 31C3 4F                   LD   C,A
1033+ 31C4 CD D3 31             CALL EXPR2                       ; GET 2ND <EXPR2>
1034+ 31C7 EB                   EX DE,HL                         ; VALUE IN DE NOW
1035+ 31C8 E3                   EX (SP),HL                       ; 1ST <EXPR2> IN HL
1036+ 31C9 CD 18 33             CALL CKHLDE                      ; COMPARE 1ST WITH 2ND
1037+ 31CC D1                   POP  DE                          ; RESTORE TEXT POINTER
1038+ 31CD 21 00 00             LD  HL,0H                        ; SET HL=0, A=1
1039+ 31D0 3E 01                LD   A,1
1040+ 31D2 C9                   RET
1041+ 31D3
1042+ 31D3 CD 3E 2C     EXPR2:  CALL TSTC                          ; NEGATIVE SIGN?
1043+ 31D6 2D                   DB   '-'
1044+ 31D7 06                   DB   XP21-$-1
1045+ 31D8 21 00 00             LD  HL,0H                        ; YES, FAKE '0-'
1046+ 31DB C3 05 32             JP  XP26                         ; TREAT LIKE SUBTRACT
1047+ 31DE CD 3E 2C     XP21:   CALL TSTC                          ; POSITIVE SIGN? IGNORE
1048+ 31E1 2B                   DB   '+'
1049+ 31E2 00                   DB   XP22-$-1
1050+ 31E3 CD 0F 32     XP22:   CALL EXPR3                       ; 1ST <EXPR3>
1051+ 31E6 CD 3E 2C     XP23:   CALL TSTC                          ; ADD?
1052+ 31E9 2B                   DB   '+'
1053+ 31EA 15                   DB   XP25-$-1
1054+ 31EB E5                   PUSH HL                          ; YES, SAVE VALUE
1055+ 31EC CD 0F 32             CALL EXPR3                       ; GET 2ND <EXPR3>
1056+ 31EF EB           XP24:   EX DE,HL                         ; 2ND IN DE
1057+ 31F0 E3                   EX (SP),HL                       ; 1ST IN HL
1058+ 31F1 7C                   LD   A,H                         ; COMPARE SIGN
1059+ 31F2 AA                   XOR  D
1060+ 31F3 7A                   LD   A,D
1061+ 31F4 19                   ADD HL,DE
1062+ 31F5 D1                   POP  DE                          ; RESTORE TEXT POINTER
1063+ 31F6 FA E6 31             JP M,XP23                        ; 1ST AND 2ND SIGN DIFFER
1064+ 31F9 AC                   XOR  H                           ; 1ST AND 2ND SIGN EQUAL
1065+ 31FA F2 E6 31             JP P,XP23                        ; SO IS RESULT
1066+ 31FD C3 FD 2C             JP  QHOW                         ; ELSE WE HAVE OVERFLOW
1067+ 3200 CD 3E 2C     XP25:   CALL TSTC                          ; SUBTRACT?
1068+ 3203 2D                   DB   '-'
1069+ 3204 92                   DB   XP42-$-1
1070+ 3205 E5           XP26:   PUSH HL                          ; YES, SAVE 1ST <EXPR3>
1071+ 3206 CD 0F 32             CALL EXPR3                       ; GET 2ND <EXPR3>
1072+ 3209 CD 06 33             CALL CHGSGN                      ; NEGATE
1073+ 320C C3 EF 31             JP  XP24                         ; AND ADD THEM
1074+ 320F
1075+ 320F CD 73 32     EXPR3:  CALL EXPR4                       ; GET 1ST <EXPR4>
1076+ 3212 CD 3E 2C     XP31:   CALL TSTC                          ; MULTIPLY?
1077+ 3215 2A                   DB   '*'
1078+ 3216 2D                   DB   XP34-$-1
1079+ 3217 E5                   PUSH HL                          ; YES, SAVE 1ST
1080+ 3218 CD 73 32             CALL EXPR4                       ; AND GET 2ND <EXPR4>
1081+ 321B 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1082+ 321D CD 03 33             CALL CHKSGN                      ; CHECK SIGN
1083+ 3220 E3                   EX (SP),HL                       ; 1ST IN HL
1084+ 3221 CD 03 33             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1085+ 3224 EB                   EX DE,HL
1086+ 3225 E3                   EX (SP),HL
1087+ 3226 7C                   LD   A,H                         ; IS HL > 255 ?
1088+ 3227 B7                   OR  A
1089+ 3228 CA 31 32             JP Z,XP32                        ; NO
1090+ 322B 7A                   LD   A,D                         ; YES, HOW ABOUT DE
1091+ 322C B2                   OR  D
1092+ 322D EB                   EX DE,HL                         ; PUT SMALLER IN HL
1093+ 322E C2 FE 2C             JP NZ,AHOW                       ; ALSO >, WILL OVERFLOW
1094+ 3231 7D           XP32:   LD   A,L                         ; THIS IS DUMB
1095+ 3232 21 00 00             LD  HL,0H                        ; CLEAR RESULT
1096+ 3235 B7                   OR  A                            ; ADD AND COUNT
1097+ 3236 CA 65 32             JP Z,XP35
1098+ 3239 19           XP33:   ADD HL,DE
1099+ 323A DA FE 2C             JP C,AHOW                        ; OVERFLOW
1100+ 323D 3D                   DEC  A
1101+ 323E C2 39 32             JP NZ,XP33
1102+ 3241 C3 65 32             JP  XP35                         ; FINISHED
1103+ 3244 CD 3E 2C     XP34:   CALL TSTC                          ; DIVIDE?
1104+ 3247 2F                   DB   '/'
1105+ 3248 4E                   DB   XP42-$-1
1106+ 3249 E5                   PUSH HL                          ; YES, SAVE 1ST <EXPR4>
1107+ 324A CD 73 32             CALL EXPR4                       ; AND GET THE SECOND ONE
1108+ 324D 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1109+ 324F CD 03 33             CALL CHKSGN                      ; CHECK SIGN OF 2ND
1110+ 3252 E3                   EX (SP),HL                       ; GET 1ST IN HL
1111+ 3253 CD 03 33             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1112+ 3256 EB                   EX DE,HL
1113+ 3257 E3                   EX (SP),HL
1114+ 3258 EB                   EX DE,HL
1115+ 3259 7A                   LD   A,D                         ; DIVIDE BY 0?
1116+ 325A B3                   OR  E
1117+ 325B CA FE 2C             JP Z,AHOW                        ; SAY "HOW?"
1118+ 325E C5                   PUSH BC                          ; ELSE SAVE SIGN
1119+ 325F CD E6 32             CALL DIVIDE                      ; USE SUBROUTINE
1120+ 3262 60                   LD   H,B                         ; RESULT IN HL NOW
1121+ 3263 69                   LD   L,C
1122+ 3264 C1                   POP  BC                          ; GET SIGN BACK
1123+ 3265 D1           XP35:   POP  DE                          ; AND TEXT POINTER
1124+ 3266 7C                   LD   A,H                         ; HL MUST BE +
1125+ 3267 B7                   OR  A
1126+ 3268 FA FD 2C             JP M,QHOW                        ; ELSE IT IS OVERFLOW
1127+ 326B 78                   LD   A,B
1128+ 326C B7                   OR  A
1129+ 326D FC 06 33             CALL M,CHGSGN                    ; CHANGE SIGN IF NEEDED
1130+ 3270 C3 12 32             JP  XP31                         ; LOOK FOR MORE TERMS
1131+ 3273
1132+ 3273 21 49 37     EXPR4:  LD  HL,TAB4-1                    ; FIND FUNCTION IN TAB4
1133+ 3276 C3 89 37             JP  EXEC                         ; AND GO DO IT
1134+ 3279 CD 95 2C     XP40:   CALL TSTV                          ; NO, NOT A FUNCTION
1135+ 327C DA 84 32             JP C,XP41                        ; NOR A VARIABLE
1136+ 327F 7E                   LD   A,(HL)                      ; VARIABLE
1137+ 3280 23                   INC  HL
1138+ 3281 66                   LD   H,(HL)                      ; VALUE IN HL
1139+ 3282 6F                   LD   L,A
1140+ 3283 C9                   RET
1141+ 3284 CD D3 2C     XP41:   CALL TSTNUM                      ; OR IS IT A NUMBER
1142+ 3287 78                   LD   A,B                         ; # OF DIGIT
1143+ 3288 B7                   OR  A
1144+ 3289 C0                   RET NZ                           ; OK
1145+ 328A CD 3E 2C     PARN:   CALL TSTC
1146+ 328D 28                   DB   '('
1147+ 328E 09                   DB   XP43-$-1
1148+ 328F CD 79 2C             CALL EXPR                          ; "(EXPR)"
1149+ 3292 CD 3E 2C             CALL TSTC
1150+ 3295 29                   DB   ')'
1151+ 3296 01                   DB   XP43-$-1
1152+ 3297 C9           XP42:   RET
1153+ 3298 C3 54 33     XP43:   JP  QWHAT                        ; ELSE SAY: "WHAT?"
1154+ 329B
1155+ 329B CD 8A 32     RND:    CALL PARN                        ; *** RND(EXPR) ***
1156+ 329E 7C                   LD   A,H                         ; EXPR MUST BE +
1157+ 329F B7                   OR  A
1158+ 32A0 FA FD 2C             JP M,QHOW
1159+ 32A3 B5                   OR  L                            ; AND NON-ZERO
1160+ 32A4 CA FD 2C             JP Z,QHOW
1161+ 32A7 D5                   PUSH DE                          ; SAVE BOTH
1162+ 32A8 E5                   PUSH HL
1163+ 32A9 2A 13 80             LD HL,(RANPNT)                   ; GET MEMORY AS RANDOM
1164+ 32AC 11 7E 38             LD  DE,LSTROM                    ; NUMBER
1165+ 32AF CD 80 2C             CALL COMP
1166+ 32B2 DA B8 32             JP C,RA1                         ; WRAP AROUND IF LAST
1167+ 32B5 21 36 2C             LD  HL,TBSTART
1168+ 32B8 5E           RA1:    LD   E,(HL)
1169+ 32B9 23                   INC  HL
1170+ 32BA 56                   LD   D,(HL)
1171+ 32BB 22 13 80             LD (RANPNT),HL
1172+ 32BE E1                   POP  HL
1173+ 32BF EB                   EX DE,HL
1174+ 32C0 C5                   PUSH BC
1175+ 32C1 CD E6 32             CALL DIVIDE                      ; RND(N)=MOD(M,N)+1
1176+ 32C4 C1                   POP  BC
1177+ 32C5 D1                   POP  DE
1178+ 32C6 23                   INC  HL
1179+ 32C7 C9                   RET
1180+ 32C8
1181+ 32C8 CD 8A 32     ABS:    CALL PARN                        ; *** ABS(EXPR) ***
1182+ 32CB 1B                   DEC  DE
1183+ 32CC CD 03 33             CALL CHKSGN                      ; CHECK SIGN
1184+ 32CF 13                   INC  DE
1185+ 32D0 C9                   RET
1186+ 32D1
1187+ 32D1 CD 8A 32     PEEK:   CALL PARN                        ; *** PEEK(EXPR) ***
1188+ 32D4 7E                   ld a, (hl)                      ; We got a location into hl, so read from it
1189+ 32D5 6F                   ld l,a
1190+ 32D6 26 00                ld h,0
1191+ 32D8 C9                   RET
1192+ 32D9
1193+ 32D9 2A 15 80     SIZE:   LD HL,(TXTUNF)                   ; *** SIZE ***
1194+ 32DC D5                   PUSH DE                          ; GET THE NUMBER OF FREE
1195+ 32DD EB                   EX DE,HL                         ; BYTES BETWEEN 'TXTUNF'
1196+ 32DE 21 89 FD             LD  HL,VARBGN                    ; AND 'VARBGN'
1197+ 32E1 CD FC 32             CALL SUBDE
1198+ 32E4 D1                   POP  DE
1199+ 32E5 C9                   RET
1200+ 32E6
1201+ 32E6                      ; *************************************************************
1202+ 32E6
1203+ 32E6                      ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1204+ 32E6
1205+ 32E6                      ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1206+ 32E6
1207+ 32E6                      ; 'SUBDE' SUBSTRACTS DE FROM HL
1208+ 32E6
1209+ 32E6                      ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1210+ 32E6                      ; SIGN AND FLIP SIGN OF B.
1211+ 32E6
1212+ 32E6                      ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1213+ 32E6
1214+ 32E6                      ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1215+ 32E6                      ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1216+ 32E6                      ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1217+ 32E6
1218+ 32E6 E5           DIVIDE: PUSH HL                          ; *** DIVIDE ***
1219+ 32E7 6C                   ld   l,h                         ; DIVIDE H BY DE
1220+ 32E8 26 00                LD   H,0
1221+ 32EA CD F1 32             CALL DV1
1222+ 32ED 41                   LD   B,C                         ; SAVE RESULT IN B
1223+ 32EE 7D                   LD   A,L                         ; (REMINDER+L)/DE
1224+ 32EF E1                   POP  HL
1225+ 32F0 67                   LD   H,A
1226+ 32F1 0E FF        DV1:    LD   C,0FFH                      ; RESULT IN C
1227+ 32F3 0C           DV2:    INC  C                           ; DUMB ROUTINE
1228+ 32F4 CD FC 32             CALL SUBDE                       ; DIVIDE BY SUBTRACT
1229+ 32F7 D2 F3 32             JP NC,DV2                        ; AND COUNT
1230+ 32FA 19                   ADD HL,DE
1231+ 32FB C9                   RET
1232+ 32FC
1233+ 32FC 7D           SUBDE:  LD   A,L                         ; *** SUBDE ***
1234+ 32FD 93                   SUB  E                           ; SUBSTRACT DE FROM
1235+ 32FE 6F                   LD   L,A                         ; HL
1236+ 32FF 7C                   LD   A,H
1237+ 3300 9A                   sbc a,D
1238+ 3301 67                   LD   H,A
1239+ 3302 C9                   RET
1240+ 3303
1241+ 3303 7C           CHKSGN: LD   A,H                         ; *** CHKSGN ***
1242+ 3304 B7                   OR  A                            ; CHECK SIGN OF HL
1243+ 3305 F0                   RET P                            ; IF -, CHANGE SIGN
1244+ 3306
1245+ 3306 7C           CHGSGN: LD   A,H                         ; *** CHGSGN ***
1246+ 3307 F5                   PUSH AF
1247+ 3308 2F                   CPL                              ; CHANGE SIGN OF HL
1248+ 3309 67                   LD   H,A
1249+ 330A 7D                   LD   A,L
1250+ 330B 2F                   CPL
1251+ 330C 6F                   LD   L,A
1252+ 330D 23                   INC  HL
1253+ 330E F1                   POP  AF
1254+ 330F AC                   XOR  H
1255+ 3310 F2 FD 2C             JP P,QHOW
1256+ 3313 78                   LD   A,B                         ; AND ALSO FLIP B
1257+ 3314 EE 80                XOR  80H
1258+ 3316 47                   LD   B,A
1259+ 3317 C9                   RET
1260+ 3318
1261+ 3318 7C           CKHLDE: LD   A,H
1262+ 3319 AA                   XOR  D                           ; SAME SIGN?
1263+ 331A F2 1E 33             JP P,CK1                         ; YES, COMPARE
1264+ 331D EB                   EX DE,HL                         ; NO, XCH AND COMP
1265+ 331E CD 80 2C     CK1:    CALL COMP
1266+ 3321 C9                   RET;,5                          ; No idea if this was a typo but it said ret,5 which didn't assemble.
1267+ 3322
1268+ 3322                      ; *************************************************************
1269+ 3322
1270+ 3322                      ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1271+ 3322
1272+ 3322                      ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1273+ 3322                      ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1274+ 3322                      ; TO THAT VALUE.
1275+ 3322
1276+ 3322                      ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1277+ 3322                      ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1278+ 3322                      ; NEXT LINE AND CONTINUE FROM THERE.
1279+ 3322
1280+ 3322                      ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1281+ 3322                      ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1282+ 3322
1283+ 3322                      ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1284+ 3322                      ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1285+ 3322                      ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1286+ 3322                      ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1287+ 3322                      ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1288+ 3322                      ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1289+ 3322                      ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1290+ 3322                      ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1291+ 3322                      ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1292+ 3322
1293+ 3322                      ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1294+ 3322                      ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1295+ 3322                      ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1296+ 3322                      ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1297+ 3322                      ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1298+ 3322
1299+ 3322 CD 95 2C     SETVAL: CALL TSTV                          ; *** SETVAL ***
1300+ 3325 DA 54 33             JP C,QWHAT                       ; "WHAT?" NO VARIABLE
1301+ 3328 E5                   PUSH HL                          ; SAVE ADDRESS OF VAR.
1302+ 3329 CD 3E 2C             CALL TSTC                          ; PASS "=" SIGN
1303+ 332C 3D                   DB   '='
1304+ 332D 0A                   DB   SV1-$-1
1305+ 332E CD 79 2C             CALL EXPR                          ; EVALUATE EXPR.
1306+ 3331 44                   LD   B,H                         ; VALUE IS IN BC NOW
1307+ 3332 4D                   LD   C,L
1308+ 3333 E1                   POP  HL                          ; GET ADDRESS
1309+ 3334 71                   LD   (HL),C                      ; SAVE VALUE
1310+ 3335 23                   INC  HL
1311+ 3336 70                   LD   (HL),B
1312+ 3337 C9                   RET
1313+ 3338 C3 54 33     SV1:    JP  QWHAT                        ; NO "=" SIGN
1314+ 333B
1315+ 333B CD 3E 2C     FIN:    CALL TSTC                          ; *** FIN ***
1316+ 333E 3B                   DB   3BH
1317+ 333F 04                   DB   FI1-$-1
1318+ 3340 F1                   POP  AF                          ; ";", PURGE RET. ADDR.
1319+ 3341 C3 6A 2F             JP  RUNSML                       ; CONTINUE SAME LINE
1320+ 3344 CD 3E 2C     FI1:    CALL TSTC                          ; NOT ";", IS IT CR?
1321+ 3347 0D                   DB   CR
1322+ 3348 04                   DB   FI2-$-1
1323+ 3349 F1                   POP  AF                          ; YES, PURGE RET. ADDR.
1324+ 334A C3 5A 2F             JP  RUNNXL                       ; RUN NEXT LINE
1325+ 334D C9           FI2:    RET                              ; ELSE RETURN TO CALLER
1326+ 334E
1327+ 334E CD 86 2C     ENDCHK: CALL IGNBLK                          ; *** ENDCHK ***
1328+ 3351 FE 0D                CP  CR                           ; END WITH CR?
1329+ 3353 C8                   RET Z                            ; OK, ELSE SAY: "WHAT?"
1330+ 3354
1331+ 3354 D5           QWHAT:  PUSH DE                          ; *** QWHAT ***
1332+ 3355 11 0C 2D     AWHAT:  LD  DE,WHAT                      ; *** AWHAT ***
1333+ 3358 97           ERROR:  SUB  A                           ; *** ERROR ***
1334+ 3359 CD 02 34             CALL PRTSTG                      ; PRINT 'WHAT?', 'HOW?'
1335+ 335C D1                   POP  DE                          ; OR 'SORRY'
1336+ 335D 1A                   LD A,(DE)                        ; SAVE THE CHARACTER
1337+ 335E F5                   PUSH AF                          ; AT WHERE OLD DE ->
1338+ 335F 97                   SUB  A                           ; AND PUT A 0 THERE
1339+ 3360 12                   LD (DE),A
1340+ 3361 2A 01 80             LD HL,(CURRNT)                   ; GET CURRENT LINE #
1341+ 3364 E5                   PUSH HL
1342+ 3365 7E                   LD   A,(HL)                      ; CHECK THE VALUE
1343+ 3366 23                   INC  HL
1344+ 3367 B6                   OR  (HL)
1345+ 3368 D1                   POP  DE
1346+ 3369 CA 18 2D             JP Z,RSTART                      ; IF ZERO, JUST RESTART
1347+ 336C 7E                   LD   A,(HL)                      ; IF NEGATIVE,
1348+ 336D B7                   OR  A
1349+ 336E FA 17 31             JP M,INPERR                      ; REDO INPUT
1350+ 3371 CD 81 34             CALL PRTLN                       ; ELSE PRINT THE LINE
1351+ 3374 1B                   DEC  DE                          ; UPTO WHERE THE 0 IS
1352+ 3375 F1                   POP  AF                          ; RESTORE THE CHARACTER
1353+ 3376 12                   LD (DE),A
1354+ 3377 3E 3F                LD   A,3FH                       ; PRINT A "?"
1355+ 3379 CD 54 2C             CALL OUTC
1356+ 337C 97                   SUB  A                           ; AND THE REST OF THE
1357+ 337D CD 02 34             CALL PRTSTG                      ; LINE
1358+ 3380 C3 18 2D             JP  RSTART                       ; THEN RESTART
1359+ 3383
1360+ 3383 D5           QSORRY: PUSH DE                          ; *** QSORRY ***
1361+ 3384 11 12 2D     ASORRY: LD  DE,SORRY                     ; *** ASORRY ***
1362+ 3387 C3 58 33             JP  ERROR
1363+ 338A
1364+ 338A                      ; *************************************************************
1365+ 338A
1366+ 338A                      ; *** GETLN *** FNDLN (& FRIENDS) ***
1367+ 338A
1368+ 338A                      ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1369+ 338A                      ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1370+ 338A                      ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1371+ 338A                      ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1372+ 338A                      ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1373+ 338A                      ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1374+ 338A                      ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1375+ 338A
1376+ 338A                      ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1377+ 338A                      ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1378+ 338A                      ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1379+ 338A                      ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1380+ 338A                      ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1381+ 338A                      ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1382+ 338A                      ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1383+ 338A                      ; LINE, FLAGS ARE C & NZ.
1384+ 338A                      ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1385+ 338A                      ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1386+ 338A                      ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1387+ 338A                      ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1388+ 338A                      ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1389+ 338A                      ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1390+ 338A
1391+ 338A CD 54 2C     GETLN:  CALL OUTC                          ; *** GETLN ***
1392+ 338D 11 C0 FD             LD  DE,BUFFER                    ; PROMPT AND INIT.
1393+ 3390 CD B7 36     GL1:    CALL CHKIO                       ; CHECK KEYBOARD
1394+ 3393 CA 90 33             JP Z,GL1                         ; NO INPUT, WAIT
1395+ 3396 FE 08                CP  08H                          ; DELETE LAST CHARACTER?
1396+ 3398 CA B7 33             JP Z,GL3                         ; YES
1397+ 339B CD 54 2C             CALL OUTC                          ; INPUT, ECHO BACK
1398+ 339E FE 0A                CP  0AH                          ; IGNORE LF
1399+ 33A0 CA 90 33             JP Z,GL1
1400+ 33A3 B7                   OR  A                            ; IGNORE NULL
1401+ 33A4 CA 90 33             JP Z,GL1
1402+ 33A7 FE 7D                CP  7DH                          ; DELETE THE WHOLE LINE?
1403+ 33A9 CA D0 33             JP Z,GL4                         ; YES
1404+ 33AC 12                   LD (DE),A                        ; ELSE SAVE INPUT
1405+ 33AD 13                   INC  DE                          ; AND BUMP POINTER
1406+ 33AE FE 0D                CP  0DH                          ; WAS IT CR?
1407+ 33B0 C8                   RET Z                            ; YES, END OF LINE
1408+ 33B1 7B                   LD   A,E                         ; ELSE MORE FREE ROOM?
1409+ 33B2 FE 00                CP  BUFEND & 0FFH
1410+ 33B4 C2 90 33             JP NZ,GL1                        ; YES, GET NEXT INPUT
1411+ 33B7 7B           GL3:    LD   A,E                         ; DELETE LAST CHARACTER
1412+ 33B8 FE C0                CP  BUFFER & 0FFH                ; BUT DO WE HAVE ANY?
1413+ 33BA CA D0 33             JP Z,GL4                         ; NO, REDO WHOLE LINE
1414+ 33BD 1B                   DEC  DE                          ; YES, BACKUP POINTER
1415+ 33BE 3E 08                LD   A,08H                       ; AND move cursor left, print space, cursor left again (to rub-out)
1416+ 33C0 CD 54 2C             CALL OUTC
1417+ 33C3 3E 20                ld a, ' '
1418+ 33C5 CD 54 2C             CALL OUTC
1419+ 33C8 3E 08                ld a, 08h
1420+ 33CA CD 54 2C             CALL OUTC
1421+ 33CD C3 90 33             JP  GL1                          ; GO GET NEXT INPUT
1422+ 33D0 CD 52 2C     GL4:    CALL CRLF                        ; REDO ENTIRE LINE
1423+ 33D3 3E 5E                LD   A,05EH                      ; CR, LF AND UP-ARROW
1424+ 33D5 C3 8A 33             JP  GETLN
1425+ 33D8
1426+ 33D8 7C           FNDLN:  LD   A,H                         ; *** FNDLN ***
1427+ 33D9 B7                   OR  A                            ; CHECK SIGN OF HL
1428+ 33DA FA FD 2C             JP M,QHOW                        ; IT CANNOT BE -
1429+ 33DD 11 19 80             LD  DE,TXTBGN                    ; INIT TEXT POINTER
1430+ 33E0
1431+ 33E0              FNDLP:                                   ; *** FDLNP ***
1432+ 33E0 E5           FL1:    PUSH HL                          ; SAVE LINE #
1433+ 33E1 2A 15 80             LD HL,(TXTUNF)                   ; CHECK IF WE PASSED END
1434+ 33E4 2B                   DEC  HL
1435+ 33E5 CD 80 2C             CALL COMP
1436+ 33E8 E1                   POP  HL                          ; GET LINE # BACK
1437+ 33E9 D8                   RET C                            ; C,NZ PASSED END
1438+ 33EA 1A                   LD A,(DE)                        ; WE DID NOT, GET BYTE 1
1439+ 33EB 95                   SUB  L                           ; IS THIS THE LINE?
1440+ 33EC 47                   LD   B,A                         ; COMPARE LOW ORDER
1441+ 33ED 13                   INC  DE
1442+ 33EE 1A                   LD A,(DE)                        ; GET BYTE 2
1443+ 33EF 9C                   sbc a,H                          ; COMPARE HIGH ORDER
1444+ 33F0 DA F7 33             JP C,FL2                         ; NO, NOT THERE YET
1445+ 33F3 1B                   DEC  DE                          ; ELSE WE EITHER FOUND
1446+ 33F4 B0                   OR  B                            ; IT, OR IT IS NOT THERE
1447+ 33F5 C9                   RET                              ; NC,Z:FOUND, NC,NZ:NO
1448+ 33F6
1449+ 33F6              FNDNXT:                                  ; *** FNDNXT ***
1450+ 33F6 13                   INC  DE                          ; FIND NEXT LINE
1451+ 33F7 13           FL2:    INC  DE                          ; JUST PASSED BYTE 1 & 2
1452+ 33F8
1453+ 33F8 1A           FNDSKP: LD A,(DE)                        ; *** FNDSKP ***
1454+ 33F9 FE 0D                CP  CR                           ; TRY TO FIND CR
1455+ 33FB C2 F7 33             JP NZ,FL2                        ; KEEP LOOKING
1456+ 33FE 13                   INC  DE                          ; FOUND CR, SKIP OVER
1457+ 33FF C3 E0 33             JP  FL1                          ; CHECK IF END OF TEXT
1458+ 3402
1459+ 3402                                                       ; *************************************************************
1460+ 3402
1461+ 3402                                                       ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1462+ 3402
1463+ 3402                                                       ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1464+ 3402                                                       ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1465+ 3402                                                       ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1466+ 3402                                                       ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1467+ 3402
1468+ 3402                                                       ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1469+ 3402                                                       ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACKSLASH,
1470+ 3402                                                       ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1471+ 3402                                                       ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1472+ 3402                                                       ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1473+ 3402                                                       ; OVER (USUALLY A JUMP INSTRUCTION.
1474+ 3402
1475+ 3402                                                       ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1476+ 3402                                                       ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1477+ 3402                                                       ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1478+ 3402                                                       ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1479+ 3402                                                       ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1480+ 3402
1481+ 3402                                                       ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1482+ 3402
1483+ 3402 47           PRTSTG: LD   B,A                         ; *** PRTSTG ***
1484+ 3403 1A           PS1:    LD A,(DE)                        ; GET A CHARACTER
1485+ 3404 13                   INC  DE                          ; BUMP POINTER
1486+ 3405 B8                   CP  B                            ; SAME AS OLD A?
1487+ 3406 C8                   RET Z                            ; YES, RETURN
1488+ 3407 CD 54 2C             CALL OUTC                          ; ELSE PRINT IT
1489+ 340A FE 0D                CP  CR                           ; WAS IT A CR?
1490+ 340C C2 03 34             JP NZ,PS1                        ; NO, NEXT
1491+ 340F C9                   RET                              ; YES, RETURN
1492+ 3410
1493+ 3410 CD 3E 2C     QTSTG:  CALL TSTC                          ; *** QTSTG ***
1494+ 3413 22                   DB   34                          ; ascii for quote
1495+ 3414 0F                   DB   QT3-$-1
1496+ 3415 3E 22                LD   A,22H                       ; IT IS A quote
1497+ 3417 CD 02 34     QT1:    CALL PRTSTG                      ; PRINT UNTIL ANOTHER
1498+ 341A FE 0D                CP  CR                           ; WAS LAST ONE A CR?
1499+ 341C E1                   POP  HL                          ; RETURN ADDRESS
1500+ 341D CA 5A 2F             JP Z,RUNNXL                      ; WAS CR, RUN NEXT LINE
1501+ 3420 23           QT2:    INC  HL                          ; SKIP 3 BYTES ON RETURN
1502+ 3421 23                   INC  HL
1503+ 3422 23                   INC  HL
1504+ 3423 E9                   JP (HL)                          ; RETURN
1505+ 3424 CD 3E 2C     QT3:    CALL TSTC                          ; IS IT A '?
1506+ 3427 27                   DB   27H
1507+ 3428 05                   DB   QT4-$-1
1508+ 3429 3E 27                LD   A,27H                       ; YES, DO THE SAME
1509+ 342B C3 17 34             JP  QT1                          ; AS IN quote
1510+ 342E CD 3E 2C     QT4:    CALL TSTC                          ; IS IT BACKSLASH " \ "?
1511+ 3431 5C                   DB   5CH
1512+ 3432 09                   DB   QT5-$-1
1513+ 3433 3E 0D                LD   A,0DH                       ; YES, CR WITHOUT LF
1514+ 3435 CD 54 2C             CALL OUTC
1515+ 3438 E1                   POP  HL                          ; RETURN ADDRESS
1516+ 3439 C3 20 34             JP  QT2
1517+ 343C C9           QT5:    RET                              ; NONE OF ABOVE
1518+ 343D
1519+ 343D 06 00        PRTNUM: LD   B,0                         ; *** PRTNUM ***
1520+ 343F CD 03 33             CALL CHKSGN                      ; CHECK SIGN
1521+ 3442 F2 48 34             JP P,PN1                         ; NO SIGN
1522+ 3445 06 2D                LD   B,'-'                       ; B=SIGN
1523+ 3447 0D                   DEC  C                           ; '-' TAKES SPACE
1524+ 3448 D5           PN1:    PUSH DE                          ; SAVE
1525+ 3449 11 0A 00             LD  DE,0AH                       ; DECIMAL
1526+ 344C D5                   PUSH DE                          ; SAVE AS A FLAG
1527+ 344D 0D                   DEC  C                           ; C=SPACES
1528+ 344E C5                   PUSH BC                          ; SAVE SIGN & SPACE
1529+ 344F CD E6 32     PN2:    CALL DIVIDE                      ; DIVIDE HL BY 10
1530+ 3452 78                   LD   A,B                         ; RESULT 0?
1531+ 3453 B1                   OR  C
1532+ 3454 CA 5F 34             JP Z,PN3                         ; YES, WE GOT ALL
1533+ 3457 E3                   EX (SP),HL                       ; NO, SAVE REMAINDER
1534+ 3458 2D                   DEC  L                           ; AND COUNT SPACE
1535+ 3459 E5                   PUSH HL                          ; HL IS OLD BC
1536+ 345A 60                   LD   H,B                         ; MOVE RESULT TO BC
1537+ 345B 69                   LD   L,C
1538+ 345C C3 4F 34             JP  PN2                          ; AND DIVIDE BY 10
1539+ 345F C1           PN3:    POP  BC                          ; WE GOT ALL DIGITS IN
1540+ 3460 0D           PN4:    DEC  C                           ; THE STACK
1541+ 3461 79                   LD   A,C                         ; LOOK AT SPACE COUNT
1542+ 3462 B7                   OR  A
1543+ 3463 FA 6E 34             JP M,PN5                         ; NO LEADING BLANKS
1544+ 3466 3E 20                LD   A,20H                       ; LEADING BLANKS
1545+ 3468 CD 54 2C             CALL OUTC
1546+ 346B C3 60 34             JP  PN4                          ; MORE?
1547+ 346E 78           PN5:    LD   A,B                         ; PRINT SIGN
1548+ 346F B7                   OR  A
1549+ 3470 C4 10 00             CALL NZ,10H
1550+ 3473 5D                   LD   E,L                         ; LAST REMAINDER IN E
1551+ 3474 7B           PN6:    LD   A,E                         ; CHECK DIGIT IN E
1552+ 3475 FE 0A                CP  0AH                          ; 10 IS FLAG FOR NO MORE
1553+ 3477 D1                   POP  DE
1554+ 3478 C8                   RET Z                            ; IF SO, RETURN
1555+ 3479 C6 30                ADD  A,30H                       ; ELSE CONVERT TO ASCII
1556+ 347B CD 54 2C             CALL OUTC                          ; AND PRINT THE DIGIT
1557+ 347E C3 74 34             JP  PN6                          ; GO BACK FOR MORE
1558+ 3481
1559+ 3481 1A           PRTLN:  LD A,(DE)                        ; *** PRTLN ***
1560+ 3482 6F                   LD   L,A                         ; LOW ORDER LINE #
1561+ 3483 13                   INC  DE
1562+ 3484 1A                   LD A,(DE)                        ; HIGH ORDER
1563+ 3485 67                   LD   H,A
1564+ 3486 13                   INC  DE
1565+ 3487 0E 04                LD   C,4H                        ; PRINT 4 DIGIT LINE #
1566+ 3489 CD 3D 34             CALL PRTNUM
1567+ 348C 3E 20                LD   A,20H                       ; FOLLOWED BY A BLANK
1568+ 348E CD 54 2C             CALL OUTC
1569+ 3491 97                   SUB  A                           ; AND THEN THE NEXT
1570+ 3492 CD 02 34             CALL PRTSTG
1571+ 3495 C9                   RET
1572+ 3496
1573+ 3496                      ; *************************************************************
1574+ 3496
1575+ 3496                      ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1576+ 3496
1577+ 3496                      ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1578+ 3496                      ; DE = HL
1579+ 3496
1580+ 3496                      ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1581+ 3496                      ; UNTIL DE = BC
1582+ 3496
1583+ 3496                      ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1584+ 3496                      ; STACK
1585+ 3496
1586+ 3496                      ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1587+ 3496                      ; STACK
1588+ 3496
1589+ 3496 CD 80 2C     MVUP:   CALL COMP                          ; *** MVUP ***
1590+ 3499 C8                   RET Z                            ; DE = HL, RETURN
1591+ 349A 1A                   LD A,(DE)                        ; GET ONE BYTE
1592+ 349B 02                   LD (BC),A                        ; MOVE IT
1593+ 349C 13                   INC  DE                          ; INCREASE BOTH POINTERS
1594+ 349D 03                   INC  BC
1595+ 349E C3 96 34             JP  MVUP                         ; UNTIL DONE
1596+ 34A1
1597+ 34A1 78           MVDOWN: LD   A,B                         ; *** MVDOWN ***
1598+ 34A2 92                   SUB  D                           ; TEST IF DE = BC
1599+ 34A3 C2 A9 34             JP NZ,MD1                        ; NO, GO MOVE
1600+ 34A6 79                   LD   A,C                         ; MAYBE, OTHER BYTE?
1601+ 34A7 93                   SUB  E
1602+ 34A8 C8                   RET Z                            ; YES, RETURN
1603+ 34A9 1B           MD1:    DEC  DE                          ; ELSE MOVE A BYTE
1604+ 34AA 2B                   DEC  HL                          ; BUT FIRST DECREASE
1605+ 34AB 1A                   LD A,(DE)                        ; BOTH POINTERS AND
1606+ 34AC 77                   LD   (HL),A                      ; THEN DO IT
1607+ 34AD C3 A1 34             JP  MVDOWN                       ; LOOP BACK
1608+ 34B0
1609+ 34B0 C1           POPA:   POP  BC                          ; BC = RETURN ADDR.
1610+ 34B1 E1                   POP  HL                          ; RESTORE LOPVAR, BUT
1611+ 34B2 22 09 80             LD (LOPVAR),HL                   ; =0 MEANS NO MORE
1612+ 34B5 7C                   LD   A,H
1613+ 34B6 B5                   OR  L
1614+ 34B7 CA CA 34             JP Z,PP1                         ; YEP, GO RETURN
1615+ 34BA E1                   POP  HL                          ; NOP, RESTORE OTHERS
1616+ 34BB 22 0B 80             LD (LOPINC),HL
1617+ 34BE E1                   POP  HL
1618+ 34BF 22 0D 80             LD (LOPLMT),HL
1619+ 34C2 E1                   POP  HL
1620+ 34C3 22 0F 80             LD (LOPLN),HL
1621+ 34C6 E1                   POP  HL
1622+ 34C7 22 11 80             LD (LOPPT),HL
1623+ 34CA C5           PP1:    PUSH BC                          ; BC = RETURN ADDR.
1624+ 34CB C9                   RET
1625+ 34CC
1626+ 34CC 21 01 FE     PUSHA:  LD  HL,STKLMT                    ; *** PUSHA ***
1627+ 34CF CD 06 33             CALL CHGSGN
1628+ 34D2 C1                   POP  BC                          ; BC=RETURN ADDRESS
1629+ 34D3 39                   ADD HL,SP                        ; IS STACK NEAR THE TOP?
1630+ 34D4 D2 83 33             JP NC,QSORRY                     ; YES, SORRY FOR THAT
1631+ 34D7 2A 09 80             LD HL,(LOPVAR)                   ; ELSE SAVE LOOP VAR'S
1632+ 34DA 7C                   LD   A,H                         ; BUT IF LOPVAR IS 0
1633+ 34DB B5                   OR  L                            ; THAT WILL BE ALL
1634+ 34DC CA F2 34             JP Z,PU1
1635+ 34DF 2A 11 80             LD HL,(LOPPT)                    ; ELSE, MORE TO SAVE
1636+ 34E2 E5                   PUSH HL
1637+ 34E3 2A 0F 80             LD HL,(LOPLN)
1638+ 34E6 E5                   PUSH HL
1639+ 34E7 2A 0D 80             LD HL,(LOPLMT)
1640+ 34EA E5                   PUSH HL
1641+ 34EB 2A 0B 80             LD HL,(LOPINC)
1642+ 34EE E5                   PUSH HL
1643+ 34EF 2A 09 80             LD HL,(LOPVAR)
1644+ 34F2 E5           PU1:    PUSH HL
1645+ 34F3 C5                   PUSH BC                          ; BC = RETURN ADDR.
1646+ 34F4 C9                   RET
1647+ 34F5
1648+ 34F5                      ; *************************************************************
1649+ 34F5
1650+ 34F5                      ; *** OUTC *** & CHKIO ***
1651+ 34F5
1652+ 34F5                      ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1653+ 34F5                      ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1654+ 34F5                      ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1655+ 34F5                      ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1656+ 34F5                      ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1657+ 34F5                      ; ARE RESTORED.
1658+ 34F5
1659+ 34F5                      ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1660+ 34F5                      ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1661+ 34F5                      ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1662+ 34F5                      ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1663+ 34F5                      ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1664+ 34F5                      ; RESTART TBI AND DOES NOT RETURN TO THE CALLER.
1665+ 34F5
1666+ 34F5
1667+ 34F5
1668+ 34F5
1669+ 34F5 32 00 80     INIT:   LD  (OCSW),A
1670+ 34F8
1671+ 34F8 CD B5 06             call message
1672+ 34FB 1B 5B 32 4A          DB 27,'[2J',27,'[H'
1672+ 34FF 1B 5B 48
1673+ 3502 C9 CD CD CD          DB 201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,CR,LF
1673+ 3506 CD CD CD CD
1673+ 350A CD CD CD CD
1673+ 350E CD CD CD CD
1673+ 3512 CD CD CD CD
1673+ 3516 CD CD CD CD
1673+ 351A CD CD CD CD
1673+ 351E CD CD CD CD
1673+ 3522 CD CD CD CD
1673+ 3526 CD CD CD BB
1673+ 352A 0D 0A
1674+ 352C BA 20 20 54          DB 186,'  TINY BASIC v2.2 for Z80 Playground  ',186,CR,LF
1674+ 3530 49 4E 59 20
1674+ 3534 42 41 53 49
1674+ 3538 43 20 76 32
1674+ 353C 2E 32 20 66
1674+ 3540 6F 72 20 5A
1674+ 3544 38 30 20 50
1674+ 3548 6C 61 79 67
1674+ 354C 72 6F 75 6E
1674+ 3550 64 20 20 BA
1674+ 3554 0D 0A
1675+ 3556 C8 CD CD CD          DB 200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,CR,LF
1675+ 355A CD CD CD CD
1675+ 355E CD CD CD CD
1675+ 3562 CD CD CD CD
1675+ 3566 CD CD CD CD
1675+ 356A CD CD CD CD
1675+ 356E CD CD CD CD
1675+ 3572 CD CD CD CD
1675+ 3576 CD CD CD CD
1675+ 357A CD CD CD BC
1675+ 357E 0D 0A
1676+ 3580 0D 0A                DB CR,LF
1677+ 3582 44 69 73 6B          db 'Disk commands are:',CR,LF
1677+ 3586 20 63 6F 6D
1677+ 358A 6D 61 6E 64
1677+ 358E 73 20 61 72
1677+ 3592 65 3A 0D 0A
1678+ 3596 20 20 44 49          db '  DIR',CR,LF
1678+ 359A 52 0D 0A
1679+ 359D 20 20 53 41          db '  SAVE "filename"',CR,LF
1679+ 35A1 56 45 20 22
1679+ 35A5 66 69 6C 65
1679+ 35A9 6E 61 6D 65
1679+ 35AD 22 0D 0A
1680+ 35B0 20 20 4C 4F          db '  LOAD "filename"',CR,LF
1680+ 35B4 41 44 20 22
1680+ 35B8 66 69 6C 65
1680+ 35BC 6E 61 6D 65
1680+ 35C0 22 0D 0A
1681+ 35C3 20 20 45 52          db '  ERASE "filename"',CR,LF
1681+ 35C7 41 53 45 20
1681+ 35CB 22 66 69 6C
1681+ 35CF 65 6E 61 6D
1681+ 35D3 65 22 0D 0A
1682+ 35D7 52 65 74 75          db 'Return to the monitor with:',CR,LF
1682+ 35DB 72 6E 20 74
1682+ 35DF 6F 20 74 68
1682+ 35E3 65 20 6D 6F
1682+ 35E7 6E 69 74 6F
1682+ 35EB 72 20 77 69
1682+ 35EF 74 68 3A 0D
1682+ 35F3 0A
1683+ 35F4 20 20 45 58          db '  EXIT',CR,LF
1683+ 35F8 49 54 0D 0A
1684+ 35FC 4F 74 68 65          db 'Other keywords:',CR,LF
1684+ 3600 72 20 6B 65
1684+ 3604 79 77 6F 72
1684+ 3608 64 73 3A 0D
1684+ 360C 0A
1685+ 360D 20 20 52 45          DB   '  REM, '
1685+ 3611 4D 2C 20
1686+ 3614 4E 45 57 2C          DB   'NEW, '
1686+ 3618 20
1687+ 3619 4C 49 53 54          DB   'LIST, '
1687+ 361D 2C 20
1688+ 361F 52 55 4E 2C          DB   'RUN, '
1688+ 3623 20
1689+ 3624 4C 45 54 2C          DB   'LET, '
1689+ 3628 20
1690+ 3629 49 46 2C 20          DB   'IF, '
1691+ 362D 47 4F 54 4F          DB   'GOTO, '
1691+ 3631 2C 20
1692+ 3633 47 4F 53 55          DB   'GOSUB,',13,10
1692+ 3637 42 2C 0D 0A
1693+ 363B 20 20 52 45          DB   '  RETURN, '
1693+ 363F 54 55 52 4E
1693+ 3643 2C 20
1694+ 3645 46 4F 52 2C          DB   'FOR, '
1694+ 3649 20
1695+ 364A 54 4F 2C 20          DB   'TO, '
1696+ 364E 53 54 45 50          DB   'STEP, '
1696+ 3652 2C 20
1697+ 3654 4E 45 58 54          DB   'NEXT, '
1697+ 3658 2C 20
1698+ 365A 49 4E 50 55          DB   'INPUT, '
1698+ 365E 54 2C 20
1699+ 3661 50 52 49 4E          DB   'PRINT, '
1699+ 3665 54 2C 20
1700+ 3668 53 54 4F 50          DB   'STOP, '
1700+ 366C 2C 20
1701+ 366E 52 4E 44 2C          DB   'RND, '
1701+ 3672 20
1702+ 3673 41 42 53 2C          DB   'ABS, '
1702+ 3677 20
1703+ 3678 53 49 5A 45          DB   'SIZE, '
1703+ 367C 2C 20
1704+ 367E 50 45 45 4B          DB   'PEEK',13,10
1704+ 3682 0D 0A
1705+ 3684 54 68 69 73          db 'This version is case-insensitive!'
1705+ 3688 20 76 65 72
1705+ 368C 73 69 6F 6E
1705+ 3690 20 69 73 20
1705+ 3694 63 61 73 65
1705+ 3698 2D 69 6E 73
1705+ 369C 65 6E 73 69
1705+ 36A0 74 69 76 65
1705+ 36A4 21
1706+ 36A5 0D 0A 00             DB CR,LF,0
1707+ 36A8
1708+ 36A8 21 36 2C             LD  HL,TBSTART
1709+ 36AB 22 13 80             LD (RANPNT),HL
1710+ 36AE 21 19 80             LD  HL,TXTBGN
1711+ 36B1 22 15 80             LD (TXTUNF),HL
1712+ 36B4 C3 18 2D             JP  RSTART
1713+ 36B7
1714+ 36B7              CHKIO:
1715+ 36B7 DB BD                in a,(uart_LSR)                  ; get status from Line Status Register
1716+ 36B9 CB 47                bit 0,a                          ; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
1717+ 36BB                                                       ; "logic 0 = no data in receive holding register."
1718+ 36BB C8                   ret z                            ; zero = no char received
1719+ 36BC DB B8                in a,(uart_tx_rx)                ; Get the incoming char from the keyboard
1720+ 36BE FE 00                cp 0
1721+ 36C0 C8                   ret z                            ; If no key pressed, return Z
1722+ 36C1
1723+ 36C1 E6 7F                AND  7FH                         ; MASK BIT 7 OFF
1724+ 36C3 FE 0F                CP  0FH                          ; IS IT CONTROL-O?
1725+ 36C5 C2 D2 36             JP NZ,CI1                        ; NO, MORE CHECKING
1726+ 36C8 3A 00 80             LD  A,(OCSW)                     ; CONTROL-O FLIPS OCSW
1727+ 36CB 2F                   CPL                              ; ON TO OFF, OFF TO ON
1728+ 36CC 32 00 80             LD  (OCSW),A
1729+ 36CF C3 B7 36             JP  CHKIO                        ; GET ANOTHER INPUT
1730+ 36D2 FE 03        CI1:    CP  3H                           ; IS IT CONTROL-C?
1731+ 36D4 C0                   RET NZ                           ; NO, RETURN "NZ"
1732+ 36D5 C3 18 2D             JP  RSTART                       ; YES, RESTART TBI
1733+ 36D8
1734+ 36D8                      ; *************************************************************
1735+ 36D8
1736+ 36D8                      ; *** TABLES *** DIRECT *** & EXEC ***
1737+ 36D8
1738+ 36D8                      ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1739+ 36D8                      ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1740+ 36D8                      ; OF CODE ACCORDING TO THE TABLE.
1741+ 36D8
1742+ 36D8                      ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1743+ 36D8                      ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1744+ 36D8                      ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1745+ 36D8                      ; ALL DIRECT AND STATEMENT COMMANDS.
1746+ 36D8
1747+ 36D8                      ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1748+ 36D8                      ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1749+ 36D8                      ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1750+ 36D8
1751+ 36D8                      ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1752+ 36D8                      ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1753+ 36D8                      ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1754+ 36D8                      ; BYTE SET TO 1.
1755+ 36D8
1756+ 36D8                      ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1757+ 36D8                      ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1758+ 36D8                      ; MATCH THIS NULL ITEM AS DEFAULT.
1759+ 36D8
1760+ 36D8              TAB1:                                    ; DIRECT COMMANDS
1761+ 36D8 4C 49 53 54          DB   'LIST'
1762+ 36DC                      DWA  LIST
1762+ 36DC 2F          >        DB LIST>>8+128
1762+ 36DD 84          >        DB LIST&0FFH
1763+ 36DE 52 55 4E             DB   'RUN'
1764+ 36E1                      DWA  RUN
1764+ 36E1 2F          >        DB RUN>>8+128
1764+ 36E2 54          >        DB RUN&0FFH
1765+ 36E3 4E 45 57             DB   'NEW'
1766+ 36E6                      DWA  NEW
1766+ 36E6 2D          >        DB NEW>>8+128
1766+ 36E7 94          >        DB NEW&0FFH
1767+ 36E8 44 49 52             DB   'DIR'
1768+ 36EB                      DWA  TBDIR
1768+ 36EB 2D          >        DB TBDIR>>8+128
1768+ 36EC A3          >        DB TBDIR&0FFH
1769+ 36ED 53 41 56 45          DB   'SAVE'
1770+ 36F1                      DWA  SAVE
1770+ 36F1 2E          >        DB SAVE>>8+128
1770+ 36F2 21          >        DB SAVE&0FFH
1771+ 36F3 4C 4F 41 44          DB   'LOAD'
1772+ 36F7                      DWA  LOAD
1772+ 36F7 2E          >        DB LOAD>>8+128
1772+ 36F8 AB          >        DB LOAD&0FFH
1773+ 36F9 45 52 41 53          DB   'ERASE'
1773+ 36FD 45
1774+ 36FE                      DWA  ERASE
1774+ 36FE 2F          >        DB ERASE>>8+128
1774+ 36FF 23          >        DB ERASE&0FFH
1775+ 3700 45 58 49 54          DB   'EXIT'
1776+ 3704                      DWA  EXIT
1776+ 3704 2F          >        DB EXIT>>8+128
1776+ 3705 31          >        DB EXIT&0FFH
1777+ 3706
1778+ 3706              TAB2:                                    ; DIRECT/STATEMENT
1779+ 3706 4E 45 58 54          DB   'NEXT'
1780+ 370A                      DWA  NEXT
1780+ 370A 30          >        DB NEXT>>8+128
1780+ 370B A1          >        DB NEXT&0FFH
1781+ 370C 4C 45 54             DB   'LET'
1782+ 370F                      DWA  LET
1782+ 370F 31          >        DB LET>>8+128
1782+ 3710 81          >        DB LET&0FFH
1783+ 3711 49 46                DB   'IF'
1784+ 3713                      DWA  IFF
1784+ 3713 31          >        DB IFF>>8+128
1784+ 3714 06          >        DB IFF&0FFH
1785+ 3715 47 4F 54 4F          DB   'GOTO'
1786+ 3719                      DWA  GOTO
1786+ 3719 2F          >        DB GOTO>>8+128
1786+ 371A 73          >        DB GOTO&0FFH
1787+ 371B 47 4F 53 55          DB   'GOSUB'
1787+ 371F 42
1788+ 3720                      DWA  GOSUB
1788+ 3720 2F          >        DB GOSUB>>8+128
1788+ 3721 FF          >        DB GOSUB&0FFH
1789+ 3722 52 45 54 55          DB   'RETURN'
1789+ 3726 52 4E
1790+ 3728                      DWA  RETURN
1790+ 3728 30          >        DB RETURN>>8+128
1790+ 3729 21          >        DB RETURN&0FFH
1791+ 372A 52 45 4D             DB   'REM'
1792+ 372D                      DWA  REM
1792+ 372D 31          >        DB REM>>8+128
1792+ 372E 02          >        DB REM&0FFH
1793+ 372F 46 4F 52             DB   'FOR'
1794+ 3732                      DWA  FOR
1794+ 3732 30          >        DB FOR>>8+128
1794+ 3733 3C          >        DB FOR&0FFH
1795+ 3734 49 4E 50 55          DB   'INPUT'
1795+ 3738 54
1796+ 3739                      DWA  INPUT
1796+ 3739 31          >        DB INPUT>>8+128
1796+ 373A 21          >        DB INPUT&0FFH
1797+ 373B 50 52 49 4E          DB   'PRINT'
1797+ 373F 54
1798+ 3740                      DWA  PRINT
1798+ 3740 2F          >        DB PRINT>>8+128
1798+ 3741 9C          >        DB PRINT&0FFH
1799+ 3742 53 54 4F 50          DB   'STOP'
1800+ 3746                      DWA  STOP
1800+ 3746 2D          >        DB STOP>>8+128
1800+ 3747 9D          >        DB STOP&0FFH
1801+ 3748                      DWA  DEFLT
1801+ 3748 31          >        DB DEFLT>>8+128
1801+ 3749 7B          >        DB DEFLT&0FFH
1802+ 374A
1803+ 374A              TAB4:                                    ; FUNCTIONS
1804+ 374A 52 4E 44             DB   'RND'
1805+ 374D                      DWA  RND
1805+ 374D 32          >        DB RND>>8+128
1805+ 374E 9B          >        DB RND&0FFH
1806+ 374F 41 42 53             DB   'ABS'
1807+ 3752                      DWA  ABS
1807+ 3752 32          >        DB ABS>>8+128
1807+ 3753 C8          >        DB ABS&0FFH
1808+ 3754 53 49 5A 45          DB   'SIZE'
1809+ 3758                      DWA  SIZE
1809+ 3758 32          >        DB SIZE>>8+128
1809+ 3759 D9          >        DB SIZE&0FFH
1810+ 375A 50 45 45 4B          DB   'PEEK'
1811+ 375E                      DWA  PEEK
1811+ 375E 32          >        DB PEEK>>8+128
1811+ 375F D1          >        DB PEEK&0FFH
1812+ 3760                      DWA  XP40
1812+ 3760 32          >        DB XP40>>8+128
1812+ 3761 79          >        DB XP40&0FFH
1813+ 3762
1814+ 3762              TAB5:                                    ; "TO" IN "FOR"
1815+ 3762 54 4F                DB   'TO'
1816+ 3764                      DWA  FR1
1816+ 3764 30          >        DB FR1>>8+128
1816+ 3765 4C          >        DB FR1&0FFH
1817+ 3766                      DWA  QWHAT
1817+ 3766 33          >        DB QWHAT>>8+128
1817+ 3767 54          >        DB QWHAT&0FFH
1818+ 3768
1819+ 3768              TAB6:                                    ; "STEP" IN "FOR"
1820+ 3768 53 54 45 50          DB   'STEP'
1821+ 376C                      DWA  FR2
1821+ 376C 30          >        DB FR2>>8+128
1821+ 376D 58          >        DB FR2&0FFH
1822+ 376E                      DWA  FR3
1822+ 376E 30          >        DB FR3>>8+128
1822+ 376F 5E          >        DB FR3&0FFH
1823+ 3770
1824+ 3770              TAB8:                                    ; RELATION OPERATORS
1825+ 3770 3E 3D                DB   '>='
1826+ 3772                      DWA  XP11
1826+ 3772 31          >        DB XP11>>8+128
1826+ 3773 95          >        DB XP11&0FFH
1827+ 3774 23                   DB   '#'
1828+ 3775                      DWA  XP12
1828+ 3775 31          >        DB XP12>>8+128
1828+ 3776 9B          >        DB XP12&0FFH
1829+ 3777 3E                   DB   '>'
1830+ 3778                      DWA  XP13
1830+ 3778 31          >        DB XP13>>8+128
1830+ 3779 A1          >        DB XP13&0FFH
1831+ 377A 3D                   DB   '='
1832+ 377B                      DWA  XP15
1832+ 377B 31          >        DB XP15>>8+128
1832+ 377C B0          >        DB XP15&0FFH
1833+ 377D 3C 3D                DB   '<='
1834+ 377F                      DWA  XP14
1834+ 377F 31          >        DB XP14>>8+128
1834+ 3780 A8          >        DB XP14&0FFH
1835+ 3781 3C                   DB   '<'
1836+ 3782                      DWA  XP16
1836+ 3782 31          >        DB XP16>>8+128
1836+ 3783 B6          >        DB XP16&0FFH
1837+ 3784                      DWA  XP17
1837+ 3784 31          >        DB XP17>>8+128
1837+ 3785 BC          >        DB XP17&0FFH
1838+ 3786
1839+ 3786 21 D7 36     DIRECT: LD  HL,TAB1-1                    ; *** DIRECT ***
1840+ 3789
1841+ 3789              EXEC:                                    ; *** EXEC ***
1842+ 3789 CD 86 2C     EX0:    CALL IGNBLK                          ; IGNORE LEADING BLANKS
1843+ 378C D5                   PUSH DE                          ; SAVE POINTER
1844+ 378D 1A           EX1:    LD A,(DE)                        ; IF FOUND '.' IN STRING
1845+ 378E 13                   INC  DE                          ; BEFORE ANY MISMATCH
1846+ 378F FE 2E                CP  '.'                          ; WE DECLARE A MATCH
1847+ 3791 CA B0 37             JP Z,EX3
1848+ 3794 FE 61                cp 'a'                           ; If text is in lowercase,
1849+ 3796 38 02                jr c,not_lowercase               ; uppercase it
1850+ 3798 CB AF                res 5,a                          ; by clearing bit 5
1851+ 379A              not_lowercase:
1852+ 379A 23                   INC  HL                          ; HL->TABLE
1853+ 379B BE                   CP  (HL)                         ; IF MATCH, TEST NEXT
1854+ 379C CA 8D 37             JP Z,EX1
1855+ 379F 3E 7F                LD   A,07FH                      ; ELSE SEE IF BIT 7
1856+ 37A1 1B                   DEC  DE                          ; OF TABLE IS SET, WHICH
1857+ 37A2 BE                   CP  (HL)                         ; IS THE JUMP ADDR. (HI)
1858+ 37A3                                                       ; TODO: Change this to use "BIT" instruction?
1859+ 37A3 DA B7 37             JP C,EX5                         ; C:YES, MATCHED
1860+ 37A6 23           EX2:    INC  HL                          ; NC:NO, FIND JUMP ADDR.
1861+ 37A7 BE                   CP  (HL)
1862+ 37A8 D2 A6 37             JP NC,EX2
1863+ 37AB 23                   INC  HL                          ; BUMP TO NEXT TAB. ITEM
1864+ 37AC D1                   POP  DE                          ; RESTORE STRING POINTER
1865+ 37AD C3 89 37             JP  EX0                          ; TEST AGAINST NEXT ITEM
1866+ 37B0 3E 7F        EX3:    LD   A,07FH                      ; PARTIAL MATCH, FIND
1867+ 37B2 23           EX4:    INC  HL                          ; JUMP ADDR., WHICH IS
1868+ 37B3 BE                   CP  (HL)                         ; FLAGGED BY BIT 7
1869+ 37B4 D2 B2 37             JP NC,EX4
1870+ 37B7 7E           EX5:    LD   A,(HL)                      ; LOAD HL WITH THE JUMP
1871+ 37B8 23                   INC  HL                          ; ADDRESS FROM THE TABLE
1872+ 37B9 6E                   LD   L,(HL)
1873+ 37BA E6 7F                AND  7FH                         ; MASK OFF BIT 7
1874+ 37BC 67                   LD   H,A
1875+ 37BD F1                   POP  AF                          ; CLEAN UP THE GABAGE
1876+ 37BE E9                   JP (HL)                          ; AND WE GO DO IT
1877+ 37BF
1878+ 37BF              READ_QUOTED_FILENAME:
1879+ 37BF CD 86 2C             call IGNBLK                     ; Skip any spaces after "save".
1880+ 37C2 CD 3E 2C             CALL TSTC                       ; Is this followed by quoted string?
1881+ 37C5 22                   DB   '"'                        ; ascii for quote
1882+ 37C6 74                   DB   SAVE_NO_QUOTE-$-1
1883+ 37C7
1884+ 37C7 CD 86 2C             call IGNBLK                     ; Skip leading spaces at the start of the name.
1885+ 37CA 21 EC BF             ld hl, filename_buffer          ; Clear out the filename and extension with NULLs
1886+ 37CD 06 0E                ld b, 14
1887+ 37CF              CLEAR_FILENAME_LOOP:
1888+ 37CF 36 00                ld (hl), 0
1889+ 37D1 23                   inc hl
1890+ 37D2 10 FB                djnz CLEAR_FILENAME_LOOP
1891+ 37D4
1892+ 37D4 21 EC BF             ld hl, filename_buffer          ; We store the filename here.
1893+ 37D7 06 08                ld b, 8
1894+ 37D9              READ_FILE_NAME:
1895+ 37D9 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1896+ 37DA 13                   INC  DE
1897+ 37DB FE 2E                CP  '.'                         ; Found dot?
1898+ 37DD 28 26                jr z, CONTINUE_TO_EXTENSION
1899+ 37DF FE 22                CP  '"'                         ; Found end quote?
1900+ 37E1 28 52                jr z, READ_FILE_NAME_DONE
1901+ 37E3 FE 0D                cp CR                           ; Or has command ended?
1902+ 37E5 CA 54 33             jp z, QWHAT                         ; Well that's an error.
1903+ 37E8
1904+ 37E8 FE 21                cp 33
1905+ 37EA 38 0C                jr c, KILL_CONTROL              ; Don't allow control chars or spaces!!!
1906+ 37EC FE 60                cp 96
1907+ 37EE 38 0A                jr c, USE_LETTER                ; Do allow numbers and upper case letters
1908+ 37F0 FE 7F                cp 127
1909+ 37F2 30 04                jr nc, KILL_CONTROL             ; Don't allow weird chars
1910+ 37F4 E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1911+ 37F6 18 02                jr USE_LETTER
1912+ 37F8
1913+ 37F8              KILL_CONTROL:
1914+ 37F8 3E 5F                ld a, '_'
1915+ 37FA              USE_LETTER:
1916+ 37FA 77                   ld (hl),a                       ; store this letter
1917+ 37FB 23                   inc hl
1918+ 37FC 10 DB                djnz READ_FILE_NAME
1919+ 37FE
1920+ 37FE 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1921+ 37FF 13                   INC  DE
1922+ 3800 FE 2E                CP  '.'                         ; Found dot?
1923+ 3802 C2 54 33             jp nz, QWHAT                    ; Error if not
1924+ 3805              CONTINUE_TO_EXTENSION:
1925+ 3805 77                   ld (hl), a
1926+ 3806 23                   inc hl
1927+ 3807
1928+ 3807 06 03                ld b, 3                         ; 3 chars max for extension
1929+ 3809              READ_EXTENSION:
1930+ 3809 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1931+ 380A 13                   INC  DE
1932+ 380B FE 2E                CP  '.'                         ; Found dot?
1933+ 380D CA 54 33             jp z, QWHAT
1934+ 3810 FE 22                CP  '"'                         ; Found end quote?
1935+ 3812 28 21                jr z, READ_FILE_NAME_DONE
1936+ 3814 FE 0D                cp CR                           ; Or has command ended?
1937+ 3816 CA 54 33             jp z, QWHAT                         ; Well that's an error.
1938+ 3819
1939+ 3819 FE 20                cp 32
1940+ 381B 38 0C                jr c, KILL_CONTROL_EXT          ; Don't allow control chars
1941+ 381D FE 60                cp 96
1942+ 381F 38 0A                jr c, USE_LETTER_EXT            ; Do allow numbers and upper case letters
1943+ 3821 FE 7F                cp 127
1944+ 3823 30 04                jr nc, KILL_CONTROL_EXT         ; Don't allow weird chars
1945+ 3825 E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1946+ 3827 18 02                jr USE_LETTER_EXT
1947+ 3829
1948+ 3829              KILL_CONTROL_EXT:
1949+ 3829 3E 5F                ld a, '_'
1950+ 382B              USE_LETTER_EXT:
1951+ 382B 77                   ld (hl),a                       ; store this letter
1952+ 382C 23                   inc hl
1953+ 382D 10 DA                djnz READ_EXTENSION
1954+ 382F
1955+ 382F 1A                   ld a, (de)                      ; So now there must be a quote
1956+ 3830 13                   inc de
1957+ 3831 FE 22                cp '"'
1958+ 3833 20 06                jr nz, SAVE_NO_QUOTE
1959+ 3835
1960+ 3835              READ_FILE_NAME_DONE:
1961+ 3835 36 00                ld (hl), 0
1962+ 3837 CD 4E 33             call ENDCHK
1963+ 383A
1964+ 383A              ;        call debug
1965+ 383A              ;        db 'Filename is [',0
1966+ 383A              ;        ld b, 14
1967+ 383A              ;        ld hl, filename_buffer
1968+ 383A              ;x1:
1969+ 383A              ;        ld a, (hl)
1970+ 383A              ;        inc hl
1971+ 383A              ;        call OUTC
1972+ 383A              ;        djnz x1
1973+ 383A
1974+ 383A              ;        ld a, ']'
1975+ 383A              ;        call OUTC
1976+ 383A              ;        call newline
1977+ 383A
1978+ 383A C9                   ret
1979+ 383B
1980+ 383B              SAVE_NO_QUOTE:
1981+ 383B CD B5 06             call message
1982+ 383E 50 6C 65 61          db 'Please specify a filename in quotes, such as "FILENAME.TXT"',13,0
1982+ 3842 73 65 20 73
1982+ 3846 70 65 63 69
1982+ 384A 66 79 20 61
1982+ 384E 20 66 69 6C
1982+ 3852 65 6E 61 6D
1982+ 3856 65 20 69 6E
1982+ 385A 20 71 75 6F
1982+ 385E 74 65 73 2C
1982+ 3862 20 73 75 63
1982+ 3866 68 20 61 73
1982+ 386A 20 22 46 49
1982+ 386E 4C 45 4E 41
1982+ 3872 4D 45 2E 54
1982+ 3876 58 54 22 0D
1982+ 387A 00
1983+ 387B C3 18 2D             jp RSTART
1984+ 387E
1985+ 387E              LSTROM	equ	$                             ; ALL ABOVE CAN BE ROM
1986+ 387E
1987+ 387E
1988+ 387E                                                       ; HERE DOWN MUST BE RAM
1989+ 387E              RAMSTART equ 08000H                     ; This assumes we are switched into 32K ROM / 32K RAM mode. TODO: Maybe change this to 16k rom, 48k ram???
1990+ 387E
1991+ 387E              OCSW    equ	RAMSTART                     ; SWITCH FOR OUTPUT		1 byte
1992+ 387E              CURRNT	equ	OCSW+1                        ; POINTS TO CURRENT LINE		2 bytes
1993+ 387E              STKGOS	equ	CURRNT+2                      ; SAVES SP IN 'GOSUB'		2 bytes
1994+ 387E              VARNXT	equ	STKGOS+2                      ; TEMP STORAGE			2 bytes
1995+ 387E              STKINP	equ VARNXT+2                      ; SAVES SP IN 'INPUT'		2 bytes
1996+ 387E              LOPVAR	equ STKINP+2                      ; 'FOR' LOOP SAVE AREA		2 bytes
1997+ 387E              LOPINC	equ LOPVAR+2                      ; INCREMENT			2 bytes
1998+ 387E              LOPLMT	equ LOPINC+2                      ; LIMIT				2 bytes
1999+ 387E              LOPLN	equ LOPLMT+2                       ; LINE NUMBER			2 bytes
2000+ 387E              LOPPT	equ LOPLN+2                        ; TEXT POINTER			2 bytes
2001+ 387E              RANPNT	equ LOPPT+2                       ; RANDOM NUMBER POINTER		2 bytes
2002+ 387E              TXTUNF	equ RANPNT+2                      ; ->UNFILLED TEXT AREA		2 bytes
2003+ 387E
2004+ 387E              store_hl	equ	TXTUNF+2	; Temporary store for hl                2 bytes
2005+ 387E
2006+ 387E              TXTBGN	equ store_hl+2                      ; TEXT SAVE AREA BEGINS		2 bytes - This is where the program starts.
2007+ 387E
2008+ 387E
2009+ 387E              TBSTACK	equ 0FF00h                         ; STACK STARTS HERE		allow 255 byte stack
2010+ 387E              STKLMT	equ	TBSTACK-255                     ; TOP LIMIT FOR STACK		1 byte
2011+ 387E              BUFEND	equ	STKLMT-1                      ; BUFFER ENDS			1 byte
2012+ 387E              BUFFER	equ	BUFEND-64                     ; INPUT BUFFER			64 bytes
2013+ 387E              VARBGN	equ	BUFFER-55                     ; VARIABLE @(0)			55 bytes
2014+ 387E
2015+ 387E              tb_dir_count equ VARBGN-1
2016+ 387E              TXTEND	equ	tb_dir_count-1                      ; TEXT SAVE AREA ENDS		1 byte - This is the top limit for the program
2017+ 387E
2018+ 387E                                                      ; Just for reference for my tired brain:
2019+ 387E                                                      ; if a has 30 in it
2020+ 387E                                                      ; cp 32
2021+ 387E                                                      ; jr c, IF A < 32
2022+ 387E                                                      ; jr nc, IF A >= 32
2023+ 387E                                                      ; jr z, IF A == 32
2024+ 387E
# file closed: tiny-basic.asm
  41  387E                  include "GOFL.asm"
# file opened: GOFL.asm
   1+ 387E              ; Conway's Game Of Life for the Z80 Playground.
   2+ 387E              ; This was written by Albert Pauw in February 2021, originally for CP/M,
   3+ 387E              ; and adapted for the Z80 playground Monitor by john Squires.
   4+ 387E
   5+ 387E              ; After boiling it down A LOT, it turns out that Game-Of-Life is very simple:
   6+ 387E              ; Arrange a large grid of cells, where each can be either alive = 1 or dead = 0.
   7+ 387E              ; Make sure there is an empty row all around the grid with a dead cell in it, like this:
   8+ 387E              ; 0000000000
   9+ 387E              ; 0XXXXXXXX0
  10+ 387E              ; 0XXXXXXXX0
  11+ 387E              ; 0000000000 Where 0 = dead cell, and X = active area which can be 0s or 1s.
  12+ 387E              ;
  13+ 387E              ; Iterate over all the cells in the active area. For each:
  14+ 387E              ; Make a note of whether the cell is alive or dead.
  15+ 387E              ; Start counting neighbours for the cell, starting at 0.
  16+ 387E              ; Add to this value the alive/dead value of all 8 neighbouring cells around it.
  17+ 387E              ; Store the neighbour count in the top 4 bits, and the alive/dead state of the cell
  18+ 387E              ; in bit 0. You will then end up with each cell having a binary value something like these examples:
  19+ 387E              ; 0010 0001 - This is 2 neighbours and the cell is currently alive.
  20+ 387E              ; 0011 0000 - This is a dead cell with 3 neighbours.
  21+ 387E              ; 1000 0001 - This is an alive cell with 8 neighbours.
  22+ 387E              ;
  23+ 387E              ; Now, it turns out that all possible combinations result in the death of a cell, or
  24+ 387E              ; a dead cell staying dead, except these three:
  25+ 387E              ; 0010 0001 - Alive cell with 2 neighbours stays alive.
  26+ 387E              ; 0011 0001 - Alive cell with 3 neighbours stays alive.
  27+ 387E              ; 0011 0000 - Dead cell with 3 neighbours comes to life.
  28+ 387E              ;
  29+ 387E              ; So all we need to do is iterate over the cells again.
  30+ 387E              ; If the cell contains one of these 3 values, set the cell to 1.
  31+ 387E              ; Otherwise set it to 0.
  32+ 387E              ;
  33+ 387E              ; Then show all cells on screen, and start again!
  34+ 387E
  35+ 387E              Width:   EQU 80
  36+ 387E              Height:  EQU 25
  37+ 387E              PatternWidth: equ 80
  38+ 387E              Size:    EQU Width*Height
  39+ 387E              DOT:     EQU '.'                ; ASCII 46, so EVEN. This is important later!
  40+ 387E              HASH:    EQU '#'                ; ASCII 25, so ODD. This is important later!
  41+ 387E              ESC:     EQU 27
  42+ 387E
  43+ 387E              GOFL_Begin:
  44+ 387E CD E1 50     	call show_intro_screen
  45+ 3881 CD FF 05     	call long_pause
  46+ 3884 CD 14 52     	call wait_for_key
  47+ 3887 78           	ld a, b
  48+ 3888 FE C8        	cp 200
  49+ 388A D2 A2 38     	jp nc, copy_pattern3
  50+ 388D FE 64        	cp 100
  51+ 388F D2 9A 38     	jp nc, copy_pattern2
  52+ 3892              copy_pattern1:
  53+ 3892 21 71 39     	ld hl, initial_pattern1
  54+ 3895 CD 20 52     	call copy_initial_pattern
  55+ 3898 18 10        	jr GOFL_Begin1
  56+ 389A              copy_pattern2:
  57+ 389A 21 41 41     	ld hl, initial_pattern2
  58+ 389D CD 20 52     	call copy_initial_pattern
  59+ 38A0 18 08        	jr GOFL_Begin1
  60+ 38A2              copy_pattern3:
  61+ 38A2 21 11 49     	ld hl, initial_pattern3
  62+ 38A5 CD 20 52     	call copy_initial_pattern
  63+ 38A8 18 00        	jr GOFL_Begin1
  64+ 38AA              GOFL_Begin1:
  65+ 38AA CD 5B 39     	CALL GOFL_HCursor             ; Hide cursor
  66+ 38AD CD 4F 39     	CALL GOFL_Cls                 ; Clear screen
  67+ 38B0
  68+ 38B0              main_gofl_loop:
  69+ 38B0              ; First, iterate over the cells, counting the neighbours
  70+ 38B0 0E 19        	ld c, Height
  71+ 38B2 26 81        	ld h, BufferPage+1            ; h = y coord, l = x coord
  72+ 38B4              iterate_outer:
  73+ 38B4 2E 01        	ld l, 1                       ; Start at coord 1,1
  74+ 38B6 06 50        	ld b, Width
  75+ 38B8              iterate_loop:
  76+ 38B8 7E           	ld a, (hl)                    ; Get original cell content
  77+ 38B9 E6 01        	and %00000001
  78+ 38BB 57           	ld d, a                       ; Store in d
  79+ 38BC
  80+ 38BC AF           	xor a                         ; Clear a
  81+ 38BD
  82+ 38BD 2D           	dec l                         ; West neighbour
  83+ 38BE 86           	add a, (hl)
  84+ 38BF 25           	dec h                         ; North-West neighbour
  85+ 38C0 86           	add a, (hl)
  86+ 38C1 2C           	inc l                         ; North neighbour
  87+ 38C2 86           	add a, (hl)
  88+ 38C3 2C           	inc l                         ; North-East neighbour
  89+ 38C4 86           	add a, (hl)
  90+ 38C5 24           	inc h                         ; East neighbour
  91+ 38C6 86           	add a, (hl)
  92+ 38C7 24           	inc h                         ; South-East neighbour
  93+ 38C8 86           	add a, (hl)
  94+ 38C9 2D           	dec l                         ; South neighbour
  95+ 38CA 86           	add a, (hl)
  96+ 38CB 2D           	dec l                         ; South-West neighbour
  97+ 38CC 86           	add a, (hl)
  98+ 38CD 2C           	inc l                         ; Get back to center cell
  99+ 38CE 25           	dec h
 100+ 38CF
 101+ 38CF CB 27        	sla a                         ; rotate left
 102+ 38D1 CB 27        	sla a                         ; rotate left
 103+ 38D3 CB 27        	sla a                         ; rotate left
 104+ 38D5 CB 27        	sla a                         ; rotate left
 105+ 38D7 B2           	or d                          ; Put back the original cell content
 106+ 38D8 77           	ld (hl), a                    ; Store final result
 107+ 38D9
 108+ 38D9 2C           	inc l
 109+ 38DA 10 DC        	djnz iterate_loop
 110+ 38DC 24           	inc h
 111+ 38DD 2E 01        	ld l, 1
 112+ 38DF 0D           	dec c
 113+ 38E0 20 D2        	jr nz, iterate_outer
 114+ 38E2
 115+ 38E2
 116+ 38E2              ; Now iterate over the cells again, applying the rules
 117+ 38E2              apply_rules:
 118+ 38E2 0E 19        	ld c, Height
 119+ 38E4 26 81        	ld h, BufferPage+1
 120+ 38E6              apply_rules_outer:
 121+ 38E6 2E 01        	ld l, 1                       ; Start at 1,1
 122+ 38E8 06 50        	ld b, Width
 123+ 38EA              apply_rules_loop:
 124+ 38EA              ; 0010 0001 - Alive cell with 2 neighbours stays alive.
 125+ 38EA              ; 0011 0001 - Alive cell with 3 neighbours stays alive.
 126+ 38EA              ; 0011 0000 - Dead cell with 3 neighbours comes to life.
 127+ 38EA
 128+ 38EA 7E           	ld a, (hl)                    ; Get the content into a
 129+ 38EB FE 21        	cp %00100001
 130+ 38ED 28 0D        	jr z, cell_alive
 131+ 38EF FE 31        	cp %00110001
 132+ 38F1 28 09        	jr z, cell_alive
 133+ 38F3 FE 30        	cp %00110000
 134+ 38F5 28 05        	jr z, cell_alive
 135+ 38F7 36 00        	ld (hl), 0                    ; Cell dies
 136+ 38F9 C3 FE 38     	jp apply_rules_continue
 137+ 38FC              cell_alive:
 138+ 38FC 36 01        	ld (hl), 1                    ; Cell lives
 139+ 38FE              apply_rules_continue:
 140+ 38FE 2C           	inc l
 141+ 38FF 10 E9        	djnz apply_rules_loop
 142+ 3901 24           	inc h
 143+ 3902 2E 01        	ld l, 1
 144+ 3904 0D           	dec c
 145+ 3905 20 DF        	jr nz, apply_rules_outer
 146+ 3907
 147+ 3907
 148+ 3907              ; Now print the cells to the screen
 149+ 3907              GOFL_Print:
 150+ 3907 CD 47 39     	call GOFL_Home
 151+ 390A 26 81        	ld h, BufferPage+1
 152+ 390C 2E 01        	ld l, 1                       ; Start at 1,1
 153+ 390E 0E 19        	LD c, Height                  ; Set size for loops, height...
 154+ 3910              Pr0:
 155+ 3910 06 50        	ld b, Width                   ; ...and width
 156+ 3912              Pr1:
 157+ 3912 7E           	LD A, (HL)                    ; Get cell value in buffer
 158+ 3913 E6 01        	and 1                         ; Is it ODD?
 159+ 3915 CA 1D 39     	jp z, print_empty_cell        ; If not, it is an empty cell
 160+ 3918 16 23        	ld d, HASH
 161+ 391A C3 1F 39     	jp print_got_character
 162+ 391D              print_empty_cell:
 163+ 391D 16 2E        	ld d, DOT
 164+ 391F              print_got_character:
 165+ 391F DB BD        	in a, (uart_LSR)              ; check UART is ready to send.
 166+ 3921 CB 6F        	bit 5, a                      ; zero flag set to true if bit 5 is 0
 167+ 3923 CA 1F 39     	jp z, print_got_character     ; non-zero = ready for next char.
 168+ 3926 7A           	ld a, d
 169+ 3927 D3 B8        	out (uart_tx_rx), a           ; AND SEND IT OUT
 170+ 3929
 171+ 3929 2C           	INC L                         ; Next character in buffer
 172+ 392A 10 E6        	djnz Pr1                      ; Count down and loop
 173+ 392C
 174+ 392C 0D           	dec c                         ; decrease row counter
 175+ 392D CA 33 39     	jp z, skip_newline_on_last_row
 176+ 3930 CD D4 05     	call newline
 177+ 3933              skip_newline_on_last_row:
 178+ 3933 2E 01        	ld l, 1                       ; Back to start of row
 179+ 3935 24           	inc h                         ; Move down a row
 180+ 3936 79           	ld a, c
 181+ 3937 FE 00        	cp 0
 182+ 3939 C2 10 39     	jp nz, Pr0                    ; Loop over rows
 183+ 393C
 184+ 393C
 185+ 393C              ; Now check for key press to end
 186+ 393C CD E5 05     	CALL char_in                  ; Check for keypress
 187+ 393F A7           	AND A
 188+ 3940 CA B0 38     	JP Z, main_gofl_loop          ; Loop around again if no key
 189+ 3943 CD 66 39     	call GOFL_SCursor             ; Turn cursor back ok
 190+ 3946 C9           	ret
 191+ 3947
 192+ 3947
 193+ 3947
 194+ 3947
 195+ 3947
 196+ 3947              ; Helper routines
 197+ 3947              GOFL_Home:
 198+ 3947 CD B5 06     	call message
 199+ 394A 1B 5B 48 00  	DB ESC, '[H', 0
 200+ 394E C9           	ret
 201+ 394F
 202+ 394F              GOFL_Cls:
 203+ 394F CD B5 06     	call message
 204+ 3952 1B 5B 32 4A  	DB ESC, '[2J', ESC, '[H', 0
 204+ 3956 1B 5B 48 00
 205+ 395A C9           	ret
 206+ 395B
 207+ 395B              GOFL_HCursor:
 208+ 395B              ; ANSI hide cursor
 209+ 395B CD B5 06     	call message
 210+ 395E 1B 5B 3F 32  	DB ESC, '[?25l', 0
 210+ 3962 35 6C 00
 211+ 3965 C9           	ret
 212+ 3966
 213+ 3966              GOFL_SCursor:
 214+ 3966              ; ANSI show cursor
 215+ 3966 CD B5 06     	call message
 216+ 3969 1B 5B 3F 32  	DB ESC, '[?25h', 0
 216+ 396D 35 68 00
 217+ 3970 C9           	ret
 218+ 3971
 219+ 3971              initial_pattern1:
 220+ 3971 2E 2E 2E 2E  	DB '................................................................................'
 220+ 3975 2E 2E 2E 2E
 220+ 3979 2E 2E 2E 2E
 220+ 397D 2E 2E 2E 2E
 220+ 3981 2E 2E 2E 2E
 220+ 3985 2E 2E 2E 2E
 220+ 3989 2E 2E 2E 2E
 220+ 398D 2E 2E 2E 2E
 220+ 3991 2E 2E 2E 2E
 220+ 3995 2E 2E 2E 2E
 220+ 3999 2E 2E 2E 2E
 220+ 399D 2E 2E 2E 2E
 220+ 39A1 2E 2E 2E 2E
 220+ 39A5 2E 2E 2E 2E
 220+ 39A9 2E 2E 2E 2E
 220+ 39AD 2E 2E 2E 2E
 220+ 39B1 2E 2E 2E 2E
 220+ 39B5 2E 2E 2E 2E
 220+ 39B9 2E 2E 2E 2E
 220+ 39BD 2E 2E 2E 2E
 221+ 39C1 2E 2E 2E 2E  	DB '................................................................................'
 221+ 39C5 2E 2E 2E 2E
 221+ 39C9 2E 2E 2E 2E
 221+ 39CD 2E 2E 2E 2E
 221+ 39D1 2E 2E 2E 2E
 221+ 39D5 2E 2E 2E 2E
 221+ 39D9 2E 2E 2E 2E
 221+ 39DD 2E 2E 2E 2E
 221+ 39E1 2E 2E 2E 2E
 221+ 39E5 2E 2E 2E 2E
 221+ 39E9 2E 2E 2E 2E
 221+ 39ED 2E 2E 2E 2E
 221+ 39F1 2E 2E 2E 2E
 221+ 39F5 2E 2E 2E 2E
 221+ 39F9 2E 2E 2E 2E
 221+ 39FD 2E 2E 2E 2E
 221+ 3A01 2E 2E 2E 2E
 221+ 3A05 2E 2E 2E 2E
 221+ 3A09 2E 2E 2E 2E
 221+ 3A0D 2E 2E 2E 2E
 222+ 3A11 2E 2E 2E 2E  	DB '................................................................................'
 222+ 3A15 2E 2E 2E 2E
 222+ 3A19 2E 2E 2E 2E
 222+ 3A1D 2E 2E 2E 2E
 222+ 3A21 2E 2E 2E 2E
 222+ 3A25 2E 2E 2E 2E
 222+ 3A29 2E 2E 2E 2E
 222+ 3A2D 2E 2E 2E 2E
 222+ 3A31 2E 2E 2E 2E
 222+ 3A35 2E 2E 2E 2E
 222+ 3A39 2E 2E 2E 2E
 222+ 3A3D 2E 2E 2E 2E
 222+ 3A41 2E 2E 2E 2E
 222+ 3A45 2E 2E 2E 2E
 222+ 3A49 2E 2E 2E 2E
 222+ 3A4D 2E 2E 2E 2E
 222+ 3A51 2E 2E 2E 2E
 222+ 3A55 2E 2E 2E 2E
 222+ 3A59 2E 2E 2E 2E
 222+ 3A5D 2E 2E 2E 2E
 223+ 3A61 2E 2E 2E 2E  	DB '................................................................................'
 223+ 3A65 2E 2E 2E 2E
 223+ 3A69 2E 2E 2E 2E
 223+ 3A6D 2E 2E 2E 2E
 223+ 3A71 2E 2E 2E 2E
 223+ 3A75 2E 2E 2E 2E
 223+ 3A79 2E 2E 2E 2E
 223+ 3A7D 2E 2E 2E 2E
 223+ 3A81 2E 2E 2E 2E
 223+ 3A85 2E 2E 2E 2E
 223+ 3A89 2E 2E 2E 2E
 223+ 3A8D 2E 2E 2E 2E
 223+ 3A91 2E 2E 2E 2E
 223+ 3A95 2E 2E 2E 2E
 223+ 3A99 2E 2E 2E 2E
 223+ 3A9D 2E 2E 2E 2E
 223+ 3AA1 2E 2E 2E 2E
 223+ 3AA5 2E 2E 2E 2E
 223+ 3AA9 2E 2E 2E 2E
 223+ 3AAD 2E 2E 2E 2E
 224+ 3AB1 2E 2E 2E 2E  	DB '................................................................................'
 224+ 3AB5 2E 2E 2E 2E
 224+ 3AB9 2E 2E 2E 2E
 224+ 3ABD 2E 2E 2E 2E
 224+ 3AC1 2E 2E 2E 2E
 224+ 3AC5 2E 2E 2E 2E
 224+ 3AC9 2E 2E 2E 2E
 224+ 3ACD 2E 2E 2E 2E
 224+ 3AD1 2E 2E 2E 2E
 224+ 3AD5 2E 2E 2E 2E
 224+ 3AD9 2E 2E 2E 2E
 224+ 3ADD 2E 2E 2E 2E
 224+ 3AE1 2E 2E 2E 2E
 224+ 3AE5 2E 2E 2E 2E
 224+ 3AE9 2E 2E 2E 2E
 224+ 3AED 2E 2E 2E 2E
 224+ 3AF1 2E 2E 2E 2E
 224+ 3AF5 2E 2E 2E 2E
 224+ 3AF9 2E 2E 2E 2E
 224+ 3AFD 2E 2E 2E 2E
 225+ 3B01 2E 2E 2E 2E  	DB '................................................................................'
 225+ 3B05 2E 2E 2E 2E
 225+ 3B09 2E 2E 2E 2E
 225+ 3B0D 2E 2E 2E 2E
 225+ 3B11 2E 2E 2E 2E
 225+ 3B15 2E 2E 2E 2E
 225+ 3B19 2E 2E 2E 2E
 225+ 3B1D 2E 2E 2E 2E
 225+ 3B21 2E 2E 2E 2E
 225+ 3B25 2E 2E 2E 2E
 225+ 3B29 2E 2E 2E 2E
 225+ 3B2D 2E 2E 2E 2E
 225+ 3B31 2E 2E 2E 2E
 225+ 3B35 2E 2E 2E 2E
 225+ 3B39 2E 2E 2E 2E
 225+ 3B3D 2E 2E 2E 2E
 225+ 3B41 2E 2E 2E 2E
 225+ 3B45 2E 2E 2E 2E
 225+ 3B49 2E 2E 2E 2E
 225+ 3B4D 2E 2E 2E 2E
 226+ 3B51 2E 2E 2E 2E  	DB '................................................................................'
 226+ 3B55 2E 2E 2E 2E
 226+ 3B59 2E 2E 2E 2E
 226+ 3B5D 2E 2E 2E 2E
 226+ 3B61 2E 2E 2E 2E
 226+ 3B65 2E 2E 2E 2E
 226+ 3B69 2E 2E 2E 2E
 226+ 3B6D 2E 2E 2E 2E
 226+ 3B71 2E 2E 2E 2E
 226+ 3B75 2E 2E 2E 2E
 226+ 3B79 2E 2E 2E 2E
 226+ 3B7D 2E 2E 2E 2E
 226+ 3B81 2E 2E 2E 2E
 226+ 3B85 2E 2E 2E 2E
 226+ 3B89 2E 2E 2E 2E
 226+ 3B8D 2E 2E 2E 2E
 226+ 3B91 2E 2E 2E 2E
 226+ 3B95 2E 2E 2E 2E
 226+ 3B99 2E 2E 2E 2E
 226+ 3B9D 2E 2E 2E 2E
 227+ 3BA1 2E 2E 2E 2E  	DB '................................................................................'
 227+ 3BA5 2E 2E 2E 2E
 227+ 3BA9 2E 2E 2E 2E
 227+ 3BAD 2E 2E 2E 2E
 227+ 3BB1 2E 2E 2E 2E
 227+ 3BB5 2E 2E 2E 2E
 227+ 3BB9 2E 2E 2E 2E
 227+ 3BBD 2E 2E 2E 2E
 227+ 3BC1 2E 2E 2E 2E
 227+ 3BC5 2E 2E 2E 2E
 227+ 3BC9 2E 2E 2E 2E
 227+ 3BCD 2E 2E 2E 2E
 227+ 3BD1 2E 2E 2E 2E
 227+ 3BD5 2E 2E 2E 2E
 227+ 3BD9 2E 2E 2E 2E
 227+ 3BDD 2E 2E 2E 2E
 227+ 3BE1 2E 2E 2E 2E
 227+ 3BE5 2E 2E 2E 2E
 227+ 3BE9 2E 2E 2E 2E
 227+ 3BED 2E 2E 2E 2E
 228+ 3BF1 2E 2E 2E 2E  	DB '................................................................................'
 228+ 3BF5 2E 2E 2E 2E
 228+ 3BF9 2E 2E 2E 2E
 228+ 3BFD 2E 2E 2E 2E
 228+ 3C01 2E 2E 2E 2E
 228+ 3C05 2E 2E 2E 2E
 228+ 3C09 2E 2E 2E 2E
 228+ 3C0D 2E 2E 2E 2E
 228+ 3C11 2E 2E 2E 2E
 228+ 3C15 2E 2E 2E 2E
 228+ 3C19 2E 2E 2E 2E
 228+ 3C1D 2E 2E 2E 2E
 228+ 3C21 2E 2E 2E 2E
 228+ 3C25 2E 2E 2E 2E
 228+ 3C29 2E 2E 2E 2E
 228+ 3C2D 2E 2E 2E 2E
 228+ 3C31 2E 2E 2E 2E
 228+ 3C35 2E 2E 2E 2E
 228+ 3C39 2E 2E 2E 2E
 228+ 3C3D 2E 2E 2E 2E
 229+ 3C41 2E 2E 2E 2E  	DB '................................................................................'
 229+ 3C45 2E 2E 2E 2E
 229+ 3C49 2E 2E 2E 2E
 229+ 3C4D 2E 2E 2E 2E
 229+ 3C51 2E 2E 2E 2E
 229+ 3C55 2E 2E 2E 2E
 229+ 3C59 2E 2E 2E 2E
 229+ 3C5D 2E 2E 2E 2E
 229+ 3C61 2E 2E 2E 2E
 229+ 3C65 2E 2E 2E 2E
 229+ 3C69 2E 2E 2E 2E
 229+ 3C6D 2E 2E 2E 2E
 229+ 3C71 2E 2E 2E 2E
 229+ 3C75 2E 2E 2E 2E
 229+ 3C79 2E 2E 2E 2E
 229+ 3C7D 2E 2E 2E 2E
 229+ 3C81 2E 2E 2E 2E
 229+ 3C85 2E 2E 2E 2E
 229+ 3C89 2E 2E 2E 2E
 229+ 3C8D 2E 2E 2E 2E
 230+ 3C91 2E 2E 2E 2E  	DB '................................................................................'
 230+ 3C95 2E 2E 2E 2E
 230+ 3C99 2E 2E 2E 2E
 230+ 3C9D 2E 2E 2E 2E
 230+ 3CA1 2E 2E 2E 2E
 230+ 3CA5 2E 2E 2E 2E
 230+ 3CA9 2E 2E 2E 2E
 230+ 3CAD 2E 2E 2E 2E
 230+ 3CB1 2E 2E 2E 2E
 230+ 3CB5 2E 2E 2E 2E
 230+ 3CB9 2E 2E 2E 2E
 230+ 3CBD 2E 2E 2E 2E
 230+ 3CC1 2E 2E 2E 2E
 230+ 3CC5 2E 2E 2E 2E
 230+ 3CC9 2E 2E 2E 2E
 230+ 3CCD 2E 2E 2E 2E
 230+ 3CD1 2E 2E 2E 2E
 230+ 3CD5 2E 2E 2E 2E
 230+ 3CD9 2E 2E 2E 2E
 230+ 3CDD 2E 2E 2E 2E
 231+ 3CE1 2E 2E 2E 2E  	DB '................................................................................'
 231+ 3CE5 2E 2E 2E 2E
 231+ 3CE9 2E 2E 2E 2E
 231+ 3CED 2E 2E 2E 2E
 231+ 3CF1 2E 2E 2E 2E
 231+ 3CF5 2E 2E 2E 2E
 231+ 3CF9 2E 2E 2E 2E
 231+ 3CFD 2E 2E 2E 2E
 231+ 3D01 2E 2E 2E 2E
 231+ 3D05 2E 2E 2E 2E
 231+ 3D09 2E 2E 2E 2E
 231+ 3D0D 2E 2E 2E 2E
 231+ 3D11 2E 2E 2E 2E
 231+ 3D15 2E 2E 2E 2E
 231+ 3D19 2E 2E 2E 2E
 231+ 3D1D 2E 2E 2E 2E
 231+ 3D21 2E 2E 2E 2E
 231+ 3D25 2E 2E 2E 2E
 231+ 3D29 2E 2E 2E 2E
 231+ 3D2D 2E 2E 2E 2E
 232+ 3D31 2E 2E 2E 2E  	DB '................................................................................'
 232+ 3D35 2E 2E 2E 2E
 232+ 3D39 2E 2E 2E 2E
 232+ 3D3D 2E 2E 2E 2E
 232+ 3D41 2E 2E 2E 2E
 232+ 3D45 2E 2E 2E 2E
 232+ 3D49 2E 2E 2E 2E
 232+ 3D4D 2E 2E 2E 2E
 232+ 3D51 2E 2E 2E 2E
 232+ 3D55 2E 2E 2E 2E
 232+ 3D59 2E 2E 2E 2E
 232+ 3D5D 2E 2E 2E 2E
 232+ 3D61 2E 2E 2E 2E
 232+ 3D65 2E 2E 2E 2E
 232+ 3D69 2E 2E 2E 2E
 232+ 3D6D 2E 2E 2E 2E
 232+ 3D71 2E 2E 2E 2E
 232+ 3D75 2E 2E 2E 2E
 232+ 3D79 2E 2E 2E 2E
 232+ 3D7D 2E 2E 2E 2E
 233+ 3D81 2E 2E 2E 2E  	DB '...................................................#............................'
 233+ 3D85 2E 2E 2E 2E
 233+ 3D89 2E 2E 2E 2E
 233+ 3D8D 2E 2E 2E 2E
 233+ 3D91 2E 2E 2E 2E
 233+ 3D95 2E 2E 2E 2E
 233+ 3D99 2E 2E 2E 2E
 233+ 3D9D 2E 2E 2E 2E
 233+ 3DA1 2E 2E 2E 2E
 233+ 3DA5 2E 2E 2E 2E
 233+ 3DA9 2E 2E 2E 2E
 233+ 3DAD 2E 2E 2E 2E
 233+ 3DB1 2E 2E 2E 23
 233+ 3DB5 2E 2E 2E 2E
 233+ 3DB9 2E 2E 2E 2E
 233+ 3DBD 2E 2E 2E 2E
 233+ 3DC1 2E 2E 2E 2E
 233+ 3DC5 2E 2E 2E 2E
 233+ 3DC9 2E 2E 2E 2E
 233+ 3DCD 2E 2E 2E 2E
 234+ 3DD1 2E 2E 2E 2E  	DB '.....................................................#..........................'
 234+ 3DD5 2E 2E 2E 2E
 234+ 3DD9 2E 2E 2E 2E
 234+ 3DDD 2E 2E 2E 2E
 234+ 3DE1 2E 2E 2E 2E
 234+ 3DE5 2E 2E 2E 2E
 234+ 3DE9 2E 2E 2E 2E
 234+ 3DED 2E 2E 2E 2E
 234+ 3DF1 2E 2E 2E 2E
 234+ 3DF5 2E 2E 2E 2E
 234+ 3DF9 2E 2E 2E 2E
 234+ 3DFD 2E 2E 2E 2E
 234+ 3E01 2E 2E 2E 2E
 234+ 3E05 2E 23 2E 2E
 234+ 3E09 2E 2E 2E 2E
 234+ 3E0D 2E 2E 2E 2E
 234+ 3E11 2E 2E 2E 2E
 234+ 3E15 2E 2E 2E 2E
 234+ 3E19 2E 2E 2E 2E
 234+ 3E1D 2E 2E 2E 2E
 235+ 3E21 2E 2E 2E 2E  	DB '..................................................##..###.......................'
 235+ 3E25 2E 2E 2E 2E
 235+ 3E29 2E 2E 2E 2E
 235+ 3E2D 2E 2E 2E 2E
 235+ 3E31 2E 2E 2E 2E
 235+ 3E35 2E 2E 2E 2E
 235+ 3E39 2E 2E 2E 2E
 235+ 3E3D 2E 2E 2E 2E
 235+ 3E41 2E 2E 2E 2E
 235+ 3E45 2E 2E 2E 2E
 235+ 3E49 2E 2E 2E 2E
 235+ 3E4D 2E 2E 2E 2E
 235+ 3E51 2E 2E 23 23
 235+ 3E55 2E 2E 23 23
 235+ 3E59 23 2E 2E 2E
 235+ 3E5D 2E 2E 2E 2E
 235+ 3E61 2E 2E 2E 2E
 235+ 3E65 2E 2E 2E 2E
 235+ 3E69 2E 2E 2E 2E
 235+ 3E6D 2E 2E 2E 2E
 236+ 3E71 2E 2E 2E 2E  	DB '................................................................................'
 236+ 3E75 2E 2E 2E 2E
 236+ 3E79 2E 2E 2E 2E
 236+ 3E7D 2E 2E 2E 2E
 236+ 3E81 2E 2E 2E 2E
 236+ 3E85 2E 2E 2E 2E
 236+ 3E89 2E 2E 2E 2E
 236+ 3E8D 2E 2E 2E 2E
 236+ 3E91 2E 2E 2E 2E
 236+ 3E95 2E 2E 2E 2E
 236+ 3E99 2E 2E 2E 2E
 236+ 3E9D 2E 2E 2E 2E
 236+ 3EA1 2E 2E 2E 2E
 236+ 3EA5 2E 2E 2E 2E
 236+ 3EA9 2E 2E 2E 2E
 236+ 3EAD 2E 2E 2E 2E
 236+ 3EB1 2E 2E 2E 2E
 236+ 3EB5 2E 2E 2E 2E
 236+ 3EB9 2E 2E 2E 2E
 236+ 3EBD 2E 2E 2E 2E
 237+ 3EC1 2E 2E 2E 2E  	DB '................................................................................'
 237+ 3EC5 2E 2E 2E 2E
 237+ 3EC9 2E 2E 2E 2E
 237+ 3ECD 2E 2E 2E 2E
 237+ 3ED1 2E 2E 2E 2E
 237+ 3ED5 2E 2E 2E 2E
 237+ 3ED9 2E 2E 2E 2E
 237+ 3EDD 2E 2E 2E 2E
 237+ 3EE1 2E 2E 2E 2E
 237+ 3EE5 2E 2E 2E 2E
 237+ 3EE9 2E 2E 2E 2E
 237+ 3EED 2E 2E 2E 2E
 237+ 3EF1 2E 2E 2E 2E
 237+ 3EF5 2E 2E 2E 2E
 237+ 3EF9 2E 2E 2E 2E
 237+ 3EFD 2E 2E 2E 2E
 237+ 3F01 2E 2E 2E 2E
 237+ 3F05 2E 2E 2E 2E
 237+ 3F09 2E 2E 2E 2E
 237+ 3F0D 2E 2E 2E 2E
 238+ 3F11 2E 2E 2E 2E  	DB '................................................................................'
 238+ 3F15 2E 2E 2E 2E
 238+ 3F19 2E 2E 2E 2E
 238+ 3F1D 2E 2E 2E 2E
 238+ 3F21 2E 2E 2E 2E
 238+ 3F25 2E 2E 2E 2E
 238+ 3F29 2E 2E 2E 2E
 238+ 3F2D 2E 2E 2E 2E
 238+ 3F31 2E 2E 2E 2E
 238+ 3F35 2E 2E 2E 2E
 238+ 3F39 2E 2E 2E 2E
 238+ 3F3D 2E 2E 2E 2E
 238+ 3F41 2E 2E 2E 2E
 238+ 3F45 2E 2E 2E 2E
 238+ 3F49 2E 2E 2E 2E
 238+ 3F4D 2E 2E 2E 2E
 238+ 3F51 2E 2E 2E 2E
 238+ 3F55 2E 2E 2E 2E
 238+ 3F59 2E 2E 2E 2E
 238+ 3F5D 2E 2E 2E 2E
 239+ 3F61 2E 2E 2E 2E  	DB '................................................................................'
 239+ 3F65 2E 2E 2E 2E
 239+ 3F69 2E 2E 2E 2E
 239+ 3F6D 2E 2E 2E 2E
 239+ 3F71 2E 2E 2E 2E
 239+ 3F75 2E 2E 2E 2E
 239+ 3F79 2E 2E 2E 2E
 239+ 3F7D 2E 2E 2E 2E
 239+ 3F81 2E 2E 2E 2E
 239+ 3F85 2E 2E 2E 2E
 239+ 3F89 2E 2E 2E 2E
 239+ 3F8D 2E 2E 2E 2E
 239+ 3F91 2E 2E 2E 2E
 239+ 3F95 2E 2E 2E 2E
 239+ 3F99 2E 2E 2E 2E
 239+ 3F9D 2E 2E 2E 2E
 239+ 3FA1 2E 2E 2E 2E
 239+ 3FA5 2E 2E 2E 2E
 239+ 3FA9 2E 2E 2E 2E
 239+ 3FAD 2E 2E 2E 2E
 240+ 3FB1 2E 2E 2E 2E  	DB '................................................................................'
 240+ 3FB5 2E 2E 2E 2E
 240+ 3FB9 2E 2E 2E 2E
 240+ 3FBD 2E 2E 2E 2E
 240+ 3FC1 2E 2E 2E 2E
 240+ 3FC5 2E 2E 2E 2E
 240+ 3FC9 2E 2E 2E 2E
 240+ 3FCD 2E 2E 2E 2E
 240+ 3FD1 2E 2E 2E 2E
 240+ 3FD5 2E 2E 2E 2E
 240+ 3FD9 2E 2E 2E 2E
 240+ 3FDD 2E 2E 2E 2E
 240+ 3FE1 2E 2E 2E 2E
 240+ 3FE5 2E 2E 2E 2E
 240+ 3FE9 2E 2E 2E 2E
 240+ 3FED 2E 2E 2E 2E
 240+ 3FF1 2E 2E 2E 2E
 240+ 3FF5 2E 2E 2E 2E
 240+ 3FF9 2E 2E 2E 2E
 240+ 3FFD 2E 2E 2E 2E
 241+ 4001 2E 2E 2E 2E  	DB '................................................................................'
 241+ 4005 2E 2E 2E 2E
 241+ 4009 2E 2E 2E 2E
 241+ 400D 2E 2E 2E 2E
 241+ 4011 2E 2E 2E 2E
 241+ 4015 2E 2E 2E 2E
 241+ 4019 2E 2E 2E 2E
 241+ 401D 2E 2E 2E 2E
 241+ 4021 2E 2E 2E 2E
 241+ 4025 2E 2E 2E 2E
 241+ 4029 2E 2E 2E 2E
 241+ 402D 2E 2E 2E 2E
 241+ 4031 2E 2E 2E 2E
 241+ 4035 2E 2E 2E 2E
 241+ 4039 2E 2E 2E 2E
 241+ 403D 2E 2E 2E 2E
 241+ 4041 2E 2E 2E 2E
 241+ 4045 2E 2E 2E 2E
 241+ 4049 2E 2E 2E 2E
 241+ 404D 2E 2E 2E 2E
 242+ 4051 2E 2E 2E 2E  	DB '................................................................................'
 242+ 4055 2E 2E 2E 2E
 242+ 4059 2E 2E 2E 2E
 242+ 405D 2E 2E 2E 2E
 242+ 4061 2E 2E 2E 2E
 242+ 4065 2E 2E 2E 2E
 242+ 4069 2E 2E 2E 2E
 242+ 406D 2E 2E 2E 2E
 242+ 4071 2E 2E 2E 2E
 242+ 4075 2E 2E 2E 2E
 242+ 4079 2E 2E 2E 2E
 242+ 407D 2E 2E 2E 2E
 242+ 4081 2E 2E 2E 2E
 242+ 4085 2E 2E 2E 2E
 242+ 4089 2E 2E 2E 2E
 242+ 408D 2E 2E 2E 2E
 242+ 4091 2E 2E 2E 2E
 242+ 4095 2E 2E 2E 2E
 242+ 4099 2E 2E 2E 2E
 242+ 409D 2E 2E 2E 2E
 243+ 40A1 2E 2E 2E 2E  	DB '................................................................................'
 243+ 40A5 2E 2E 2E 2E
 243+ 40A9 2E 2E 2E 2E
 243+ 40AD 2E 2E 2E 2E
 243+ 40B1 2E 2E 2E 2E
 243+ 40B5 2E 2E 2E 2E
 243+ 40B9 2E 2E 2E 2E
 243+ 40BD 2E 2E 2E 2E
 243+ 40C1 2E 2E 2E 2E
 243+ 40C5 2E 2E 2E 2E
 243+ 40C9 2E 2E 2E 2E
 243+ 40CD 2E 2E 2E 2E
 243+ 40D1 2E 2E 2E 2E
 243+ 40D5 2E 2E 2E 2E
 243+ 40D9 2E 2E 2E 2E
 243+ 40DD 2E 2E 2E 2E
 243+ 40E1 2E 2E 2E 2E
 243+ 40E5 2E 2E 2E 2E
 243+ 40E9 2E 2E 2E 2E
 243+ 40ED 2E 2E 2E 2E
 244+ 40F1 2E 2E 2E 2E  	DB '................................................................................'
 244+ 40F5 2E 2E 2E 2E
 244+ 40F9 2E 2E 2E 2E
 244+ 40FD 2E 2E 2E 2E
 244+ 4101 2E 2E 2E 2E
 244+ 4105 2E 2E 2E 2E
 244+ 4109 2E 2E 2E 2E
 244+ 410D 2E 2E 2E 2E
 244+ 4111 2E 2E 2E 2E
 244+ 4115 2E 2E 2E 2E
 244+ 4119 2E 2E 2E 2E
 244+ 411D 2E 2E 2E 2E
 244+ 4121 2E 2E 2E 2E
 244+ 4125 2E 2E 2E 2E
 244+ 4129 2E 2E 2E 2E
 244+ 412D 2E 2E 2E 2E
 244+ 4131 2E 2E 2E 2E
 244+ 4135 2E 2E 2E 2E
 244+ 4139 2E 2E 2E 2E
 244+ 413D 2E 2E 2E 2E
 245+ 4141
 246+ 4141              initial_pattern2:
 247+ 4141 2E 2E 2E 2E  	DB '................................................................................'
 247+ 4145 2E 2E 2E 2E
 247+ 4149 2E 2E 2E 2E
 247+ 414D 2E 2E 2E 2E
 247+ 4151 2E 2E 2E 2E
 247+ 4155 2E 2E 2E 2E
 247+ 4159 2E 2E 2E 2E
 247+ 415D 2E 2E 2E 2E
 247+ 4161 2E 2E 2E 2E
 247+ 4165 2E 2E 2E 2E
 247+ 4169 2E 2E 2E 2E
 247+ 416D 2E 2E 2E 2E
 247+ 4171 2E 2E 2E 2E
 247+ 4175 2E 2E 2E 2E
 247+ 4179 2E 2E 2E 2E
 247+ 417D 2E 2E 2E 2E
 247+ 4181 2E 2E 2E 2E
 247+ 4185 2E 2E 2E 2E
 247+ 4189 2E 2E 2E 2E
 247+ 418D 2E 2E 2E 2E
 248+ 4191 2E 2E 23 23  	DB '..##............................................................................'
 248+ 4195 2E 2E 2E 2E
 248+ 4199 2E 2E 2E 2E
 248+ 419D 2E 2E 2E 2E
 248+ 41A1 2E 2E 2E 2E
 248+ 41A5 2E 2E 2E 2E
 248+ 41A9 2E 2E 2E 2E
 248+ 41AD 2E 2E 2E 2E
 248+ 41B1 2E 2E 2E 2E
 248+ 41B5 2E 2E 2E 2E
 248+ 41B9 2E 2E 2E 2E
 248+ 41BD 2E 2E 2E 2E
 248+ 41C1 2E 2E 2E 2E
 248+ 41C5 2E 2E 2E 2E
 248+ 41C9 2E 2E 2E 2E
 248+ 41CD 2E 2E 2E 2E
 248+ 41D1 2E 2E 2E 2E
 248+ 41D5 2E 2E 2E 2E
 248+ 41D9 2E 2E 2E 2E
 248+ 41DD 2E 2E 2E 2E
 249+ 41E1 2E 2E 2E 2E  	DB '.........................#......................................................'
 249+ 41E5 2E 2E 2E 2E
 249+ 41E9 2E 2E 2E 2E
 249+ 41ED 2E 2E 2E 2E
 249+ 41F1 2E 2E 2E 2E
 249+ 41F5 2E 2E 2E 2E
 249+ 41F9 2E 23 2E 2E
 249+ 41FD 2E 2E 2E 2E
 249+ 4201 2E 2E 2E 2E
 249+ 4205 2E 2E 2E 2E
 249+ 4209 2E 2E 2E 2E
 249+ 420D 2E 2E 2E 2E
 249+ 4211 2E 2E 2E 2E
 249+ 4215 2E 2E 2E 2E
 249+ 4219 2E 2E 2E 2E
 249+ 421D 2E 2E 2E 2E
 249+ 4221 2E 2E 2E 2E
 249+ 4225 2E 2E 2E 2E
 249+ 4229 2E 2E 2E 2E
 249+ 422D 2E 2E 2E 2E
 250+ 4231 2E 2E 2E 2E  	DB '.......................#.#......................................................'
 250+ 4235 2E 2E 2E 2E
 250+ 4239 2E 2E 2E 2E
 250+ 423D 2E 2E 2E 2E
 250+ 4241 2E 2E 2E 2E
 250+ 4245 2E 2E 2E 23
 250+ 4249 2E 23 2E 2E
 250+ 424D 2E 2E 2E 2E
 250+ 4251 2E 2E 2E 2E
 250+ 4255 2E 2E 2E 2E
 250+ 4259 2E 2E 2E 2E
 250+ 425D 2E 2E 2E 2E
 250+ 4261 2E 2E 2E 2E
 250+ 4265 2E 2E 2E 2E
 250+ 4269 2E 2E 2E 2E
 250+ 426D 2E 2E 2E 2E
 250+ 4271 2E 2E 2E 2E
 250+ 4275 2E 2E 2E 2E
 250+ 4279 2E 2E 2E 2E
 250+ 427D 2E 2E 2E 2E
 251+ 4281 2E 2E 2E 2E  	DB '.............##......##............##...........................................'
 251+ 4285 2E 2E 2E 2E
 251+ 4289 2E 2E 2E 2E
 251+ 428D 2E 23 23 2E
 251+ 4291 2E 2E 2E 2E
 251+ 4295 2E 23 23 2E
 251+ 4299 2E 2E 2E 2E
 251+ 429D 2E 2E 2E 2E
 251+ 42A1 2E 2E 2E 23
 251+ 42A5 23 2E 2E 2E
 251+ 42A9 2E 2E 2E 2E
 251+ 42AD 2E 2E 2E 2E
 251+ 42B1 2E 2E 2E 2E
 251+ 42B5 2E 2E 2E 2E
 251+ 42B9 2E 2E 2E 2E
 251+ 42BD 2E 2E 2E 2E
 251+ 42C1 2E 2E 2E 2E
 251+ 42C5 2E 2E 2E 2E
 251+ 42C9 2E 2E 2E 2E
 251+ 42CD 2E 2E 2E 2E
 252+ 42D1 2E 2E 2E 2E  	DB '............#...#....##............##...........................................'
 252+ 42D5 2E 2E 2E 2E
 252+ 42D9 2E 2E 2E 2E
 252+ 42DD 23 2E 2E 2E
 252+ 42E1 23 2E 2E 2E
 252+ 42E5 2E 23 23 2E
 252+ 42E9 2E 2E 2E 2E
 252+ 42ED 2E 2E 2E 2E
 252+ 42F1 2E 2E 2E 23
 252+ 42F5 23 2E 2E 2E
 252+ 42F9 2E 2E 2E 2E
 252+ 42FD 2E 2E 2E 2E
 252+ 4301 2E 2E 2E 2E
 252+ 4305 2E 2E 2E 2E
 252+ 4309 2E 2E 2E 2E
 252+ 430D 2E 2E 2E 2E
 252+ 4311 2E 2E 2E 2E
 252+ 4315 2E 2E 2E 2E
 252+ 4319 2E 2E 2E 2E
 252+ 431D 2E 2E 2E 2E
 253+ 4321 2E 23 23 2E  	DB '.##........#.....#...##.........................................................'
 253+ 4325 2E 2E 2E 2E
 253+ 4329 2E 2E 2E 23
 253+ 432D 2E 2E 2E 2E
 253+ 4331 2E 23 2E 2E
 253+ 4335 2E 23 23 2E
 253+ 4339 2E 2E 2E 2E
 253+ 433D 2E 2E 2E 2E
 253+ 4341 2E 2E 2E 2E
 253+ 4345 2E 2E 2E 2E
 253+ 4349 2E 2E 2E 2E
 253+ 434D 2E 2E 2E 2E
 253+ 4351 2E 2E 2E 2E
 253+ 4355 2E 2E 2E 2E
 253+ 4359 2E 2E 2E 2E
 253+ 435D 2E 2E 2E 2E
 253+ 4361 2E 2E 2E 2E
 253+ 4365 2E 2E 2E 2E
 253+ 4369 2E 2E 2E 2E
 253+ 436D 2E 2E 2E 2E
 254+ 4371 2E 23 23 2E  	DB '.##........#...#.##....#.#......................................................'
 254+ 4375 2E 2E 2E 2E
 254+ 4379 2E 2E 2E 23
 254+ 437D 2E 2E 2E 23
 254+ 4381 2E 23 23 2E
 254+ 4385 2E 2E 2E 23
 254+ 4389 2E 23 2E 2E
 254+ 438D 2E 2E 2E 2E
 254+ 4391 2E 2E 2E 2E
 254+ 4395 2E 2E 2E 2E
 254+ 4399 2E 2E 2E 2E
 254+ 439D 2E 2E 2E 2E
 254+ 43A1 2E 2E 2E 2E
 254+ 43A5 2E 2E 2E 2E
 254+ 43A9 2E 2E 2E 2E
 254+ 43AD 2E 2E 2E 2E
 254+ 43B1 2E 2E 2E 2E
 254+ 43B5 2E 2E 2E 2E
 254+ 43B9 2E 2E 2E 2E
 254+ 43BD 2E 2E 2E 2E
 255+ 43C1 2E 2E 2E 2E  	DB '...........#.....#.......#......................................................'
 255+ 43C5 2E 2E 2E 2E
 255+ 43C9 2E 2E 2E 23
 255+ 43CD 2E 2E 2E 2E
 255+ 43D1 2E 23 2E 2E
 255+ 43D5 2E 2E 2E 2E
 255+ 43D9 2E 23 2E 2E
 255+ 43DD 2E 2E 2E 2E
 255+ 43E1 2E 2E 2E 2E
 255+ 43E5 2E 2E 2E 2E
 255+ 43E9 2E 2E 2E 2E
 255+ 43ED 2E 2E 2E 2E
 255+ 43F1 2E 2E 2E 2E
 255+ 43F5 2E 2E 2E 2E
 255+ 43F9 2E 2E 2E 2E
 255+ 43FD 2E 2E 2E 2E
 255+ 4401 2E 2E 2E 2E
 255+ 4405 2E 2E 2E 2E
 255+ 4409 2E 2E 2E 2E
 255+ 440D 2E 2E 2E 2E
 256+ 4411 2E 2E 2E 2E  	DB '............#...#...............................................................'
 256+ 4415 2E 2E 2E 2E
 256+ 4419 2E 2E 2E 2E
 256+ 441D 23 2E 2E 2E
 256+ 4421 23 2E 2E 2E
 256+ 4425 2E 2E 2E 2E
 256+ 4429 2E 2E 2E 2E
 256+ 442D 2E 2E 2E 2E
 256+ 4431 2E 2E 2E 2E
 256+ 4435 2E 2E 2E 2E
 256+ 4439 2E 2E 2E 2E
 256+ 443D 2E 2E 2E 2E
 256+ 4441 2E 2E 2E 2E
 256+ 4445 2E 2E 2E 2E
 256+ 4449 2E 2E 2E 2E
 256+ 444D 2E 2E 2E 2E
 256+ 4451 2E 2E 2E 2E
 256+ 4455 2E 2E 2E 2E
 256+ 4459 2E 2E 2E 2E
 256+ 445D 2E 2E 2E 2E
 257+ 4461 2E 2E 2E 2E  	DB '.............##.................................................................'
 257+ 4465 2E 2E 2E 2E
 257+ 4469 2E 2E 2E 2E
 257+ 446D 2E 23 23 2E
 257+ 4471 2E 2E 2E 2E
 257+ 4475 2E 2E 2E 2E
 257+ 4479 2E 2E 2E 2E
 257+ 447D 2E 2E 2E 2E
 257+ 4481 2E 2E 2E 2E
 257+ 4485 2E 2E 2E 2E
 257+ 4489 2E 2E 2E 2E
 257+ 448D 2E 2E 2E 2E
 257+ 4491 2E 2E 2E 2E
 257+ 4495 2E 2E 2E 2E
 257+ 4499 2E 2E 2E 2E
 257+ 449D 2E 2E 2E 2E
 257+ 44A1 2E 2E 2E 2E
 257+ 44A5 2E 2E 2E 2E
 257+ 44A9 2E 2E 2E 2E
 257+ 44AD 2E 2E 2E 2E
 258+ 44B1 2E 2E 2E 2E  	DB '................................................................................'
 258+ 44B5 2E 2E 2E 2E
 258+ 44B9 2E 2E 2E 2E
 258+ 44BD 2E 2E 2E 2E
 258+ 44C1 2E 2E 2E 2E
 258+ 44C5 2E 2E 2E 2E
 258+ 44C9 2E 2E 2E 2E
 258+ 44CD 2E 2E 2E 2E
 258+ 44D1 2E 2E 2E 2E
 258+ 44D5 2E 2E 2E 2E
 258+ 44D9 2E 2E 2E 2E
 258+ 44DD 2E 2E 2E 2E
 258+ 44E1 2E 2E 2E 2E
 258+ 44E5 2E 2E 2E 2E
 258+ 44E9 2E 2E 2E 2E
 258+ 44ED 2E 2E 2E 2E
 258+ 44F1 2E 2E 2E 2E
 258+ 44F5 2E 2E 2E 2E
 258+ 44F9 2E 2E 2E 2E
 258+ 44FD 2E 2E 2E 2E
 259+ 4501 2E 2E 2E 2E  	DB '................................................................................'
 259+ 4505 2E 2E 2E 2E
 259+ 4509 2E 2E 2E 2E
 259+ 450D 2E 2E 2E 2E
 259+ 4511 2E 2E 2E 2E
 259+ 4515 2E 2E 2E 2E
 259+ 4519 2E 2E 2E 2E
 259+ 451D 2E 2E 2E 2E
 259+ 4521 2E 2E 2E 2E
 259+ 4525 2E 2E 2E 2E
 259+ 4529 2E 2E 2E 2E
 259+ 452D 2E 2E 2E 2E
 259+ 4531 2E 2E 2E 2E
 259+ 4535 2E 2E 2E 2E
 259+ 4539 2E 2E 2E 2E
 259+ 453D 2E 2E 2E 2E
 259+ 4541 2E 2E 2E 2E
 259+ 4545 2E 2E 2E 2E
 259+ 4549 2E 2E 2E 2E
 259+ 454D 2E 2E 2E 2E
 260+ 4551 2E 2E 2E 2E  	DB '................................................................................'
 260+ 4555 2E 2E 2E 2E
 260+ 4559 2E 2E 2E 2E
 260+ 455D 2E 2E 2E 2E
 260+ 4561 2E 2E 2E 2E
 260+ 4565 2E 2E 2E 2E
 260+ 4569 2E 2E 2E 2E
 260+ 456D 2E 2E 2E 2E
 260+ 4571 2E 2E 2E 2E
 260+ 4575 2E 2E 2E 2E
 260+ 4579 2E 2E 2E 2E
 260+ 457D 2E 2E 2E 2E
 260+ 4581 2E 2E 2E 2E
 260+ 4585 2E 2E 2E 2E
 260+ 4589 2E 2E 2E 2E
 260+ 458D 2E 2E 2E 2E
 260+ 4591 2E 2E 2E 2E
 260+ 4595 2E 2E 2E 2E
 260+ 4599 2E 2E 2E 2E
 260+ 459D 2E 2E 2E 2E
 261+ 45A1 2E 2E 2E 2E  	DB '................................................................................'
 261+ 45A5 2E 2E 2E 2E
 261+ 45A9 2E 2E 2E 2E
 261+ 45AD 2E 2E 2E 2E
 261+ 45B1 2E 2E 2E 2E
 261+ 45B5 2E 2E 2E 2E
 261+ 45B9 2E 2E 2E 2E
 261+ 45BD 2E 2E 2E 2E
 261+ 45C1 2E 2E 2E 2E
 261+ 45C5 2E 2E 2E 2E
 261+ 45C9 2E 2E 2E 2E
 261+ 45CD 2E 2E 2E 2E
 261+ 45D1 2E 2E 2E 2E
 261+ 45D5 2E 2E 2E 2E
 261+ 45D9 2E 2E 2E 2E
 261+ 45DD 2E 2E 2E 2E
 261+ 45E1 2E 2E 2E 2E
 261+ 45E5 2E 2E 2E 2E
 261+ 45E9 2E 2E 2E 2E
 261+ 45ED 2E 2E 2E 2E
 262+ 45F1 2E 2E 2E 2E  	DB '................................................................................'
 262+ 45F5 2E 2E 2E 2E
 262+ 45F9 2E 2E 2E 2E
 262+ 45FD 2E 2E 2E 2E
 262+ 4601 2E 2E 2E 2E
 262+ 4605 2E 2E 2E 2E
 262+ 4609 2E 2E 2E 2E
 262+ 460D 2E 2E 2E 2E
 262+ 4611 2E 2E 2E 2E
 262+ 4615 2E 2E 2E 2E
 262+ 4619 2E 2E 2E 2E
 262+ 461D 2E 2E 2E 2E
 262+ 4621 2E 2E 2E 2E
 262+ 4625 2E 2E 2E 2E
 262+ 4629 2E 2E 2E 2E
 262+ 462D 2E 2E 2E 2E
 262+ 4631 2E 2E 2E 2E
 262+ 4635 2E 2E 2E 2E
 262+ 4639 2E 2E 2E 2E
 262+ 463D 2E 2E 2E 2E
 263+ 4641 2E 2E 2E 2E  	DB '................................................................................'
 263+ 4645 2E 2E 2E 2E
 263+ 4649 2E 2E 2E 2E
 263+ 464D 2E 2E 2E 2E
 263+ 4651 2E 2E 2E 2E
 263+ 4655 2E 2E 2E 2E
 263+ 4659 2E 2E 2E 2E
 263+ 465D 2E 2E 2E 2E
 263+ 4661 2E 2E 2E 2E
 263+ 4665 2E 2E 2E 2E
 263+ 4669 2E 2E 2E 2E
 263+ 466D 2E 2E 2E 2E
 263+ 4671 2E 2E 2E 2E
 263+ 4675 2E 2E 2E 2E
 263+ 4679 2E 2E 2E 2E
 263+ 467D 2E 2E 2E 2E
 263+ 4681 2E 2E 2E 2E
 263+ 4685 2E 2E 2E 2E
 263+ 4689 2E 2E 2E 2E
 263+ 468D 2E 2E 2E 2E
 264+ 4691 2E 2E 2E 2E  	DB '................................................................................'
 264+ 4695 2E 2E 2E 2E
 264+ 4699 2E 2E 2E 2E
 264+ 469D 2E 2E 2E 2E
 264+ 46A1 2E 2E 2E 2E
 264+ 46A5 2E 2E 2E 2E
 264+ 46A9 2E 2E 2E 2E
 264+ 46AD 2E 2E 2E 2E
 264+ 46B1 2E 2E 2E 2E
 264+ 46B5 2E 2E 2E 2E
 264+ 46B9 2E 2E 2E 2E
 264+ 46BD 2E 2E 2E 2E
 264+ 46C1 2E 2E 2E 2E
 264+ 46C5 2E 2E 2E 2E
 264+ 46C9 2E 2E 2E 2E
 264+ 46CD 2E 2E 2E 2E
 264+ 46D1 2E 2E 2E 2E
 264+ 46D5 2E 2E 2E 2E
 264+ 46D9 2E 2E 2E 2E
 264+ 46DD 2E 2E 2E 2E
 265+ 46E1 2E 2E 2E 2E  	DB '................................................................................'
 265+ 46E5 2E 2E 2E 2E
 265+ 46E9 2E 2E 2E 2E
 265+ 46ED 2E 2E 2E 2E
 265+ 46F1 2E 2E 2E 2E
 265+ 46F5 2E 2E 2E 2E
 265+ 46F9 2E 2E 2E 2E
 265+ 46FD 2E 2E 2E 2E
 265+ 4701 2E 2E 2E 2E
 265+ 4705 2E 2E 2E 2E
 265+ 4709 2E 2E 2E 2E
 265+ 470D 2E 2E 2E 2E
 265+ 4711 2E 2E 2E 2E
 265+ 4715 2E 2E 2E 2E
 265+ 4719 2E 2E 2E 2E
 265+ 471D 2E 2E 2E 2E
 265+ 4721 2E 2E 2E 2E
 265+ 4725 2E 2E 2E 2E
 265+ 4729 2E 2E 2E 2E
 265+ 472D 2E 2E 2E 2E
 266+ 4731 2E 2E 2E 2E  	DB '................................................................................'
 266+ 4735 2E 2E 2E 2E
 266+ 4739 2E 2E 2E 2E
 266+ 473D 2E 2E 2E 2E
 266+ 4741 2E 2E 2E 2E
 266+ 4745 2E 2E 2E 2E
 266+ 4749 2E 2E 2E 2E
 266+ 474D 2E 2E 2E 2E
 266+ 4751 2E 2E 2E 2E
 266+ 4755 2E 2E 2E 2E
 266+ 4759 2E 2E 2E 2E
 266+ 475D 2E 2E 2E 2E
 266+ 4761 2E 2E 2E 2E
 266+ 4765 2E 2E 2E 2E
 266+ 4769 2E 2E 2E 2E
 266+ 476D 2E 2E 2E 2E
 266+ 4771 2E 2E 2E 2E
 266+ 4775 2E 2E 2E 2E
 266+ 4779 2E 2E 2E 2E
 266+ 477D 2E 2E 2E 2E
 267+ 4781 2E 2E 2E 2E  	DB '................................................................................'
 267+ 4785 2E 2E 2E 2E
 267+ 4789 2E 2E 2E 2E
 267+ 478D 2E 2E 2E 2E
 267+ 4791 2E 2E 2E 2E
 267+ 4795 2E 2E 2E 2E
 267+ 4799 2E 2E 2E 2E
 267+ 479D 2E 2E 2E 2E
 267+ 47A1 2E 2E 2E 2E
 267+ 47A5 2E 2E 2E 2E
 267+ 47A9 2E 2E 2E 2E
 267+ 47AD 2E 2E 2E 2E
 267+ 47B1 2E 2E 2E 2E
 267+ 47B5 2E 2E 2E 2E
 267+ 47B9 2E 2E 2E 2E
 267+ 47BD 2E 2E 2E 2E
 267+ 47C1 2E 2E 2E 2E
 267+ 47C5 2E 2E 2E 2E
 267+ 47C9 2E 2E 2E 2E
 267+ 47CD 2E 2E 2E 2E
 268+ 47D1 2E 2E 2E 2E  	DB '................................................................................'
 268+ 47D5 2E 2E 2E 2E
 268+ 47D9 2E 2E 2E 2E
 268+ 47DD 2E 2E 2E 2E
 268+ 47E1 2E 2E 2E 2E
 268+ 47E5 2E 2E 2E 2E
 268+ 47E9 2E 2E 2E 2E
 268+ 47ED 2E 2E 2E 2E
 268+ 47F1 2E 2E 2E 2E
 268+ 47F5 2E 2E 2E 2E
 268+ 47F9 2E 2E 2E 2E
 268+ 47FD 2E 2E 2E 2E
 268+ 4801 2E 2E 2E 2E
 268+ 4805 2E 2E 2E 2E
 268+ 4809 2E 2E 2E 2E
 268+ 480D 2E 2E 2E 2E
 268+ 4811 2E 2E 2E 2E
 268+ 4815 2E 2E 2E 2E
 268+ 4819 2E 2E 2E 2E
 268+ 481D 2E 2E 2E 2E
 269+ 4821 2E 2E 2E 2E  	DB '................................................................................'
 269+ 4825 2E 2E 2E 2E
 269+ 4829 2E 2E 2E 2E
 269+ 482D 2E 2E 2E 2E
 269+ 4831 2E 2E 2E 2E
 269+ 4835 2E 2E 2E 2E
 269+ 4839 2E 2E 2E 2E
 269+ 483D 2E 2E 2E 2E
 269+ 4841 2E 2E 2E 2E
 269+ 4845 2E 2E 2E 2E
 269+ 4849 2E 2E 2E 2E
 269+ 484D 2E 2E 2E 2E
 269+ 4851 2E 2E 2E 2E
 269+ 4855 2E 2E 2E 2E
 269+ 4859 2E 2E 2E 2E
 269+ 485D 2E 2E 2E 2E
 269+ 4861 2E 2E 2E 2E
 269+ 4865 2E 2E 2E 2E
 269+ 4869 2E 2E 2E 2E
 269+ 486D 2E 2E 2E 2E
 270+ 4871 2E 2E 2E 2E  	DB '................................................................................'
 270+ 4875 2E 2E 2E 2E
 270+ 4879 2E 2E 2E 2E
 270+ 487D 2E 2E 2E 2E
 270+ 4881 2E 2E 2E 2E
 270+ 4885 2E 2E 2E 2E
 270+ 4889 2E 2E 2E 2E
 270+ 488D 2E 2E 2E 2E
 270+ 4891 2E 2E 2E 2E
 270+ 4895 2E 2E 2E 2E
 270+ 4899 2E 2E 2E 2E
 270+ 489D 2E 2E 2E 2E
 270+ 48A1 2E 2E 2E 2E
 270+ 48A5 2E 2E 2E 2E
 270+ 48A9 2E 2E 2E 2E
 270+ 48AD 2E 2E 2E 2E
 270+ 48B1 2E 2E 2E 2E
 270+ 48B5 2E 2E 2E 2E
 270+ 48B9 2E 2E 2E 2E
 270+ 48BD 2E 2E 2E 2E
 271+ 48C1 2E 2E 2E 2E  	DB '................................................................................'
 271+ 48C5 2E 2E 2E 2E
 271+ 48C9 2E 2E 2E 2E
 271+ 48CD 2E 2E 2E 2E
 271+ 48D1 2E 2E 2E 2E
 271+ 48D5 2E 2E 2E 2E
 271+ 48D9 2E 2E 2E 2E
 271+ 48DD 2E 2E 2E 2E
 271+ 48E1 2E 2E 2E 2E
 271+ 48E5 2E 2E 2E 2E
 271+ 48E9 2E 2E 2E 2E
 271+ 48ED 2E 2E 2E 2E
 271+ 48F1 2E 2E 2E 2E
 271+ 48F5 2E 2E 2E 2E
 271+ 48F9 2E 2E 2E 2E
 271+ 48FD 2E 2E 2E 2E
 271+ 4901 2E 2E 2E 2E
 271+ 4905 2E 2E 2E 2E
 271+ 4909 2E 2E 2E 2E
 271+ 490D 2E 2E 2E 2E
 272+ 4911
 273+ 4911              initial_pattern3:
 274+ 4911 2E 2E 2E 2E  	DB '................................................................................'
 274+ 4915 2E 2E 2E 2E
 274+ 4919 2E 2E 2E 2E
 274+ 491D 2E 2E 2E 2E
 274+ 4921 2E 2E 2E 2E
 274+ 4925 2E 2E 2E 2E
 274+ 4929 2E 2E 2E 2E
 274+ 492D 2E 2E 2E 2E
 274+ 4931 2E 2E 2E 2E
 274+ 4935 2E 2E 2E 2E
 274+ 4939 2E 2E 2E 2E
 274+ 493D 2E 2E 2E 2E
 274+ 4941 2E 2E 2E 2E
 274+ 4945 2E 2E 2E 2E
 274+ 4949 2E 2E 2E 2E
 274+ 494D 2E 2E 2E 2E
 274+ 4951 2E 2E 2E 2E
 274+ 4955 2E 2E 2E 2E
 274+ 4959 2E 2E 2E 2E
 274+ 495D 2E 2E 2E 2E
 275+ 4961 2E 2E 2E 2E  	DB '................................................................................'
 275+ 4965 2E 2E 2E 2E
 275+ 4969 2E 2E 2E 2E
 275+ 496D 2E 2E 2E 2E
 275+ 4971 2E 2E 2E 2E
 275+ 4975 2E 2E 2E 2E
 275+ 4979 2E 2E 2E 2E
 275+ 497D 2E 2E 2E 2E
 275+ 4981 2E 2E 2E 2E
 275+ 4985 2E 2E 2E 2E
 275+ 4989 2E 2E 2E 2E
 275+ 498D 2E 2E 2E 2E
 275+ 4991 2E 2E 2E 2E
 275+ 4995 2E 2E 2E 2E
 275+ 4999 2E 2E 2E 2E
 275+ 499D 2E 2E 2E 2E
 275+ 49A1 2E 2E 2E 2E
 275+ 49A5 2E 2E 2E 2E
 275+ 49A9 2E 2E 2E 2E
 275+ 49AD 2E 2E 2E 2E
 276+ 49B1 2E 2E 2E 2E  	DB '....................................................................##..........'
 276+ 49B5 2E 2E 2E 2E
 276+ 49B9 2E 2E 2E 2E
 276+ 49BD 2E 2E 2E 2E
 276+ 49C1 2E 2E 2E 2E
 276+ 49C5 2E 2E 2E 2E
 276+ 49C9 2E 2E 2E 2E
 276+ 49CD 2E 2E 2E 2E
 276+ 49D1 2E 2E 2E 2E
 276+ 49D5 2E 2E 2E 2E
 276+ 49D9 2E 2E 2E 2E
 276+ 49DD 2E 2E 2E 2E
 276+ 49E1 2E 2E 2E 2E
 276+ 49E5 2E 2E 2E 2E
 276+ 49E9 2E 2E 2E 2E
 276+ 49ED 2E 2E 2E 2E
 276+ 49F1 2E 2E 2E 2E
 276+ 49F5 23 23 2E 2E
 276+ 49F9 2E 2E 2E 2E
 276+ 49FD 2E 2E 2E 2E
 277+ 4A01 2E 2E 2E 2E  	DB '....................................................................##..........'
 277+ 4A05 2E 2E 2E 2E
 277+ 4A09 2E 2E 2E 2E
 277+ 4A0D 2E 2E 2E 2E
 277+ 4A11 2E 2E 2E 2E
 277+ 4A15 2E 2E 2E 2E
 277+ 4A19 2E 2E 2E 2E
 277+ 4A1D 2E 2E 2E 2E
 277+ 4A21 2E 2E 2E 2E
 277+ 4A25 2E 2E 2E 2E
 277+ 4A29 2E 2E 2E 2E
 277+ 4A2D 2E 2E 2E 2E
 277+ 4A31 2E 2E 2E 2E
 277+ 4A35 2E 2E 2E 2E
 277+ 4A39 2E 2E 2E 2E
 277+ 4A3D 2E 2E 2E 2E
 277+ 4A41 2E 2E 2E 2E
 277+ 4A45 23 23 2E 2E
 277+ 4A49 2E 2E 2E 2E
 277+ 4A4D 2E 2E 2E 2E
 278+ 4A51 2E 2E 2E 2E  	DB '................................................................................'
 278+ 4A55 2E 2E 2E 2E
 278+ 4A59 2E 2E 2E 2E
 278+ 4A5D 2E 2E 2E 2E
 278+ 4A61 2E 2E 2E 2E
 278+ 4A65 2E 2E 2E 2E
 278+ 4A69 2E 2E 2E 2E
 278+ 4A6D 2E 2E 2E 2E
 278+ 4A71 2E 2E 2E 2E
 278+ 4A75 2E 2E 2E 2E
 278+ 4A79 2E 2E 2E 2E
 278+ 4A7D 2E 2E 2E 2E
 278+ 4A81 2E 2E 2E 2E
 278+ 4A85 2E 2E 2E 2E
 278+ 4A89 2E 2E 2E 2E
 278+ 4A8D 2E 2E 2E 2E
 278+ 4A91 2E 2E 2E 2E
 278+ 4A95 2E 2E 2E 2E
 278+ 4A99 2E 2E 2E 2E
 278+ 4A9D 2E 2E 2E 2E
 279+ 4AA1 2E 2E 2E 2E  	DB '.....................#..#.......................................................'
 279+ 4AA5 2E 2E 2E 2E
 279+ 4AA9 2E 2E 2E 2E
 279+ 4AAD 2E 2E 2E 2E
 279+ 4AB1 2E 2E 2E 2E
 279+ 4AB5 2E 23 2E 2E
 279+ 4AB9 23 2E 2E 2E
 279+ 4ABD 2E 2E 2E 2E
 279+ 4AC1 2E 2E 2E 2E
 279+ 4AC5 2E 2E 2E 2E
 279+ 4AC9 2E 2E 2E 2E
 279+ 4ACD 2E 2E 2E 2E
 279+ 4AD1 2E 2E 2E 2E
 279+ 4AD5 2E 2E 2E 2E
 279+ 4AD9 2E 2E 2E 2E
 279+ 4ADD 2E 2E 2E 2E
 279+ 4AE1 2E 2E 2E 2E
 279+ 4AE5 2E 2E 2E 2E
 279+ 4AE9 2E 2E 2E 2E
 279+ 4AED 2E 2E 2E 2E
 280+ 4AF1 2E 2E 2E 2E  	DB '.........................#.......................####...........................'
 280+ 4AF5 2E 2E 2E 2E
 280+ 4AF9 2E 2E 2E 2E
 280+ 4AFD 2E 2E 2E 2E
 280+ 4B01 2E 2E 2E 2E
 280+ 4B05 2E 2E 2E 2E
 280+ 4B09 2E 23 2E 2E
 280+ 4B0D 2E 2E 2E 2E
 280+ 4B11 2E 2E 2E 2E
 280+ 4B15 2E 2E 2E 2E
 280+ 4B19 2E 2E 2E 2E
 280+ 4B1D 2E 2E 2E 2E
 280+ 4B21 2E 23 23 23
 280+ 4B25 23 2E 2E 2E
 280+ 4B29 2E 2E 2E 2E
 280+ 4B2D 2E 2E 2E 2E
 280+ 4B31 2E 2E 2E 2E
 280+ 4B35 2E 2E 2E 2E
 280+ 4B39 2E 2E 2E 2E
 280+ 4B3D 2E 2E 2E 2E
 281+ 4B41 2E 2E 2E 2E  	DB '.....................#...#......................................................'
 281+ 4B45 2E 2E 2E 2E
 281+ 4B49 2E 2E 2E 2E
 281+ 4B4D 2E 2E 2E 2E
 281+ 4B51 2E 2E 2E 2E
 281+ 4B55 2E 23 2E 2E
 281+ 4B59 2E 23 2E 2E
 281+ 4B5D 2E 2E 2E 2E
 281+ 4B61 2E 2E 2E 2E
 281+ 4B65 2E 2E 2E 2E
 281+ 4B69 2E 2E 2E 2E
 281+ 4B6D 2E 2E 2E 2E
 281+ 4B71 2E 2E 2E 2E
 281+ 4B75 2E 2E 2E 2E
 281+ 4B79 2E 2E 2E 2E
 281+ 4B7D 2E 2E 2E 2E
 281+ 4B81 2E 2E 2E 2E
 281+ 4B85 2E 2E 2E 2E
 281+ 4B89 2E 2E 2E 2E
 281+ 4B8D 2E 2E 2E 2E
 282+ 4B91 2E 2E 2E 2E  	DB '......................####.........................####.........................'
 282+ 4B95 2E 2E 2E 2E
 282+ 4B99 2E 2E 2E 2E
 282+ 4B9D 2E 2E 2E 2E
 282+ 4BA1 2E 2E 2E 2E
 282+ 4BA5 2E 2E 23 23
 282+ 4BA9 23 23 2E 2E
 282+ 4BAD 2E 2E 2E 2E
 282+ 4BB1 2E 2E 2E 2E
 282+ 4BB5 2E 2E 2E 2E
 282+ 4BB9 2E 2E 2E 2E
 282+ 4BBD 2E 2E 2E 2E
 282+ 4BC1 2E 2E 2E 23
 282+ 4BC5 23 23 23 2E
 282+ 4BC9 2E 2E 2E 2E
 282+ 4BCD 2E 2E 2E 2E
 282+ 4BD1 2E 2E 2E 2E
 282+ 4BD5 2E 2E 2E 2E
 282+ 4BD9 2E 2E 2E 2E
 282+ 4BDD 2E 2E 2E 2E
 283+ 4BE1 2E 2E 2E 2E  	DB '................................................................................'
 283+ 4BE5 2E 2E 2E 2E
 283+ 4BE9 2E 2E 2E 2E
 283+ 4BED 2E 2E 2E 2E
 283+ 4BF1 2E 2E 2E 2E
 283+ 4BF5 2E 2E 2E 2E
 283+ 4BF9 2E 2E 2E 2E
 283+ 4BFD 2E 2E 2E 2E
 283+ 4C01 2E 2E 2E 2E
 283+ 4C05 2E 2E 2E 2E
 283+ 4C09 2E 2E 2E 2E
 283+ 4C0D 2E 2E 2E 2E
 283+ 4C11 2E 2E 2E 2E
 283+ 4C15 2E 2E 2E 2E
 283+ 4C19 2E 2E 2E 2E
 283+ 4C1D 2E 2E 2E 2E
 283+ 4C21 2E 2E 2E 2E
 283+ 4C25 2E 2E 2E 2E
 283+ 4C29 2E 2E 2E 2E
 283+ 4C2D 2E 2E 2E 2E
 284+ 4C31 2E 2E 2E 2E  	DB '....#...........................................................................'
 284+ 4C35 23 2E 2E 2E
 284+ 4C39 2E 2E 2E 2E
 284+ 4C3D 2E 2E 2E 2E
 284+ 4C41 2E 2E 2E 2E
 284+ 4C45 2E 2E 2E 2E
 284+ 4C49 2E 2E 2E 2E
 284+ 4C4D 2E 2E 2E 2E
 284+ 4C51 2E 2E 2E 2E
 284+ 4C55 2E 2E 2E 2E
 284+ 4C59 2E 2E 2E 2E
 284+ 4C5D 2E 2E 2E 2E
 284+ 4C61 2E 2E 2E 2E
 284+ 4C65 2E 2E 2E 2E
 284+ 4C69 2E 2E 2E 2E
 284+ 4C6D 2E 2E 2E 2E
 284+ 4C71 2E 2E 2E 2E
 284+ 4C75 2E 2E 2E 2E
 284+ 4C79 2E 2E 2E 2E
 284+ 4C7D 2E 2E 2E 2E
 285+ 4C81 2E 2E 2E 2E  	DB '.....#..........................................................................'
 285+ 4C85 2E 23 2E 2E
 285+ 4C89 2E 2E 2E 2E
 285+ 4C8D 2E 2E 2E 2E
 285+ 4C91 2E 2E 2E 2E
 285+ 4C95 2E 2E 2E 2E
 285+ 4C99 2E 2E 2E 2E
 285+ 4C9D 2E 2E 2E 2E
 285+ 4CA1 2E 2E 2E 2E
 285+ 4CA5 2E 2E 2E 2E
 285+ 4CA9 2E 2E 2E 2E
 285+ 4CAD 2E 2E 2E 2E
 285+ 4CB1 2E 2E 2E 2E
 285+ 4CB5 2E 2E 2E 2E
 285+ 4CB9 2E 2E 2E 2E
 285+ 4CBD 2E 2E 2E 2E
 285+ 4CC1 2E 2E 2E 2E
 285+ 4CC5 2E 2E 2E 2E
 285+ 4CC9 2E 2E 2E 2E
 285+ 4CCD 2E 2E 2E 2E
 286+ 4CD1 2E 2E 2E 23  	DB '...###..........................................................................'
 286+ 4CD5 23 23 2E 2E
 286+ 4CD9 2E 2E 2E 2E
 286+ 4CDD 2E 2E 2E 2E
 286+ 4CE1 2E 2E 2E 2E
 286+ 4CE5 2E 2E 2E 2E
 286+ 4CE9 2E 2E 2E 2E
 286+ 4CED 2E 2E 2E 2E
 286+ 4CF1 2E 2E 2E 2E
 286+ 4CF5 2E 2E 2E 2E
 286+ 4CF9 2E 2E 2E 2E
 286+ 4CFD 2E 2E 2E 2E
 286+ 4D01 2E 2E 2E 2E
 286+ 4D05 2E 2E 2E 2E
 286+ 4D09 2E 2E 2E 2E
 286+ 4D0D 2E 2E 2E 2E
 286+ 4D11 2E 2E 2E 2E
 286+ 4D15 2E 2E 2E 2E
 286+ 4D19 2E 2E 2E 2E
 286+ 4D1D 2E 2E 2E 2E
 287+ 4D21 2E 2E 2E 2E  	DB '...................................................................#..#.........'
 287+ 4D25 2E 2E 2E 2E
 287+ 4D29 2E 2E 2E 2E
 287+ 4D2D 2E 2E 2E 2E
 287+ 4D31 2E 2E 2E 2E
 287+ 4D35 2E 2E 2E 2E
 287+ 4D39 2E 2E 2E 2E
 287+ 4D3D 2E 2E 2E 2E
 287+ 4D41 2E 2E 2E 2E
 287+ 4D45 2E 2E 2E 2E
 287+ 4D49 2E 2E 2E 2E
 287+ 4D4D 2E 2E 2E 2E
 287+ 4D51 2E 2E 2E 2E
 287+ 4D55 2E 2E 2E 2E
 287+ 4D59 2E 2E 2E 2E
 287+ 4D5D 2E 2E 2E 2E
 287+ 4D61 2E 2E 2E 23
 287+ 4D65 2E 2E 23 2E
 287+ 4D69 2E 2E 2E 2E
 287+ 4D6D 2E 2E 2E 2E
 288+ 4D71 2E 2E 2E 2E  	DB '..................................................................#.............'
 288+ 4D75 2E 2E 2E 2E
 288+ 4D79 2E 2E 2E 2E
 288+ 4D7D 2E 2E 2E 2E
 288+ 4D81 2E 2E 2E 2E
 288+ 4D85 2E 2E 2E 2E
 288+ 4D89 2E 2E 2E 2E
 288+ 4D8D 2E 2E 2E 2E
 288+ 4D91 2E 2E 2E 2E
 288+ 4D95 2E 2E 2E 2E
 288+ 4D99 2E 2E 2E 2E
 288+ 4D9D 2E 2E 2E 2E
 288+ 4DA1 2E 2E 2E 2E
 288+ 4DA5 2E 2E 2E 2E
 288+ 4DA9 2E 2E 2E 2E
 288+ 4DAD 2E 2E 2E 2E
 288+ 4DB1 2E 2E 23 2E
 288+ 4DB5 2E 2E 2E 2E
 288+ 4DB9 2E 2E 2E 2E
 288+ 4DBD 2E 2E 2E 2E
 289+ 4DC1 2E 2E 2E 2E  	DB '..................................................................#...#.........'
 289+ 4DC5 2E 2E 2E 2E
 289+ 4DC9 2E 2E 2E 2E
 289+ 4DCD 2E 2E 2E 2E
 289+ 4DD1 2E 2E 2E 2E
 289+ 4DD5 2E 2E 2E 2E
 289+ 4DD9 2E 2E 2E 2E
 289+ 4DDD 2E 2E 2E 2E
 289+ 4DE1 2E 2E 2E 2E
 289+ 4DE5 2E 2E 2E 2E
 289+ 4DE9 2E 2E 2E 2E
 289+ 4DED 2E 2E 2E 2E
 289+ 4DF1 2E 2E 2E 2E
 289+ 4DF5 2E 2E 2E 2E
 289+ 4DF9 2E 2E 2E 2E
 289+ 4DFD 2E 2E 2E 2E
 289+ 4E01 2E 2E 23 2E
 289+ 4E05 2E 2E 23 2E
 289+ 4E09 2E 2E 2E 2E
 289+ 4E0D 2E 2E 2E 2E
 290+ 4E11 2E 2E 2E 2E  	DB '...........................................###....................####..........'
 290+ 4E15 2E 2E 2E 2E
 290+ 4E19 2E 2E 2E 2E
 290+ 4E1D 2E 2E 2E 2E
 290+ 4E21 2E 2E 2E 2E
 290+ 4E25 2E 2E 2E 2E
 290+ 4E29 2E 2E 2E 2E
 290+ 4E2D 2E 2E 2E 2E
 290+ 4E31 2E 2E 2E 2E
 290+ 4E35 2E 2E 2E 2E
 290+ 4E39 2E 2E 2E 23
 290+ 4E3D 23 23 2E 2E
 290+ 4E41 2E 2E 2E 2E
 290+ 4E45 2E 2E 2E 2E
 290+ 4E49 2E 2E 2E 2E
 290+ 4E4D 2E 2E 2E 2E
 290+ 4E51 2E 2E 23 23
 290+ 4E55 23 23 2E 2E
 290+ 4E59 2E 2E 2E 2E
 290+ 4E5D 2E 2E 2E 2E
 291+ 4E61 2E 2E 2E 2E  	DB '..........................................###...................................'
 291+ 4E65 2E 2E 2E 2E
 291+ 4E69 2E 2E 2E 2E
 291+ 4E6D 2E 2E 2E 2E
 291+ 4E71 2E 2E 2E 2E
 291+ 4E75 2E 2E 2E 2E
 291+ 4E79 2E 2E 2E 2E
 291+ 4E7D 2E 2E 2E 2E
 291+ 4E81 2E 2E 2E 2E
 291+ 4E85 2E 2E 2E 2E
 291+ 4E89 2E 2E 23 23
 291+ 4E8D 23 2E 2E 2E
 291+ 4E91 2E 2E 2E 2E
 291+ 4E95 2E 2E 2E 2E
 291+ 4E99 2E 2E 2E 2E
 291+ 4E9D 2E 2E 2E 2E
 291+ 4EA1 2E 2E 2E 2E
 291+ 4EA5 2E 2E 2E 2E
 291+ 4EA9 2E 2E 2E 2E
 291+ 4EAD 2E 2E 2E 2E
 292+ 4EB1 2E 2E 2E 2E  	DB '................................................................................'
 292+ 4EB5 2E 2E 2E 2E
 292+ 4EB9 2E 2E 2E 2E
 292+ 4EBD 2E 2E 2E 2E
 292+ 4EC1 2E 2E 2E 2E
 292+ 4EC5 2E 2E 2E 2E
 292+ 4EC9 2E 2E 2E 2E
 292+ 4ECD 2E 2E 2E 2E
 292+ 4ED1 2E 2E 2E 2E
 292+ 4ED5 2E 2E 2E 2E
 292+ 4ED9 2E 2E 2E 2E
 292+ 4EDD 2E 2E 2E 2E
 292+ 4EE1 2E 2E 2E 2E
 292+ 4EE5 2E 2E 2E 2E
 292+ 4EE9 2E 2E 2E 2E
 292+ 4EED 2E 2E 2E 2E
 292+ 4EF1 2E 2E 2E 2E
 292+ 4EF5 2E 2E 2E 2E
 292+ 4EF9 2E 2E 2E 2E
 292+ 4EFD 2E 2E 2E 2E
 293+ 4F01 2E 2E 2E 2E  	DB '................................................................................'
 293+ 4F05 2E 2E 2E 2E
 293+ 4F09 2E 2E 2E 2E
 293+ 4F0D 2E 2E 2E 2E
 293+ 4F11 2E 2E 2E 2E
 293+ 4F15 2E 2E 2E 2E
 293+ 4F19 2E 2E 2E 2E
 293+ 4F1D 2E 2E 2E 2E
 293+ 4F21 2E 2E 2E 2E
 293+ 4F25 2E 2E 2E 2E
 293+ 4F29 2E 2E 2E 2E
 293+ 4F2D 2E 2E 2E 2E
 293+ 4F31 2E 2E 2E 2E
 293+ 4F35 2E 2E 2E 2E
 293+ 4F39 2E 2E 2E 2E
 293+ 4F3D 2E 2E 2E 2E
 293+ 4F41 2E 2E 2E 2E
 293+ 4F45 2E 2E 2E 2E
 293+ 4F49 2E 2E 2E 2E
 293+ 4F4D 2E 2E 2E 2E
 294+ 4F51 2E 2E 2E 2E  	DB '................................................................................'
 294+ 4F55 2E 2E 2E 2E
 294+ 4F59 2E 2E 2E 2E
 294+ 4F5D 2E 2E 2E 2E
 294+ 4F61 2E 2E 2E 2E
 294+ 4F65 2E 2E 2E 2E
 294+ 4F69 2E 2E 2E 2E
 294+ 4F6D 2E 2E 2E 2E
 294+ 4F71 2E 2E 2E 2E
 294+ 4F75 2E 2E 2E 2E
 294+ 4F79 2E 2E 2E 2E
 294+ 4F7D 2E 2E 2E 2E
 294+ 4F81 2E 2E 2E 2E
 294+ 4F85 2E 2E 2E 2E
 294+ 4F89 2E 2E 2E 2E
 294+ 4F8D 2E 2E 2E 2E
 294+ 4F91 2E 2E 2E 2E
 294+ 4F95 2E 2E 2E 2E
 294+ 4F99 2E 2E 2E 2E
 294+ 4F9D 2E 2E 2E 2E
 295+ 4FA1 2E 2E 2E 2E  	DB '................................................................................'
 295+ 4FA5 2E 2E 2E 2E
 295+ 4FA9 2E 2E 2E 2E
 295+ 4FAD 2E 2E 2E 2E
 295+ 4FB1 2E 2E 2E 2E
 295+ 4FB5 2E 2E 2E 2E
 295+ 4FB9 2E 2E 2E 2E
 295+ 4FBD 2E 2E 2E 2E
 295+ 4FC1 2E 2E 2E 2E
 295+ 4FC5 2E 2E 2E 2E
 295+ 4FC9 2E 2E 2E 2E
 295+ 4FCD 2E 2E 2E 2E
 295+ 4FD1 2E 2E 2E 2E
 295+ 4FD5 2E 2E 2E 2E
 295+ 4FD9 2E 2E 2E 2E
 295+ 4FDD 2E 2E 2E 2E
 295+ 4FE1 2E 2E 2E 2E
 295+ 4FE5 2E 2E 2E 2E
 295+ 4FE9 2E 2E 2E 2E
 295+ 4FED 2E 2E 2E 2E
 296+ 4FF1 2E 2E 2E 2E  	DB '................................................................................'
 296+ 4FF5 2E 2E 2E 2E
 296+ 4FF9 2E 2E 2E 2E
 296+ 4FFD 2E 2E 2E 2E
 296+ 5001 2E 2E 2E 2E
 296+ 5005 2E 2E 2E 2E
 296+ 5009 2E 2E 2E 2E
 296+ 500D 2E 2E 2E 2E
 296+ 5011 2E 2E 2E 2E
 296+ 5015 2E 2E 2E 2E
 296+ 5019 2E 2E 2E 2E
 296+ 501D 2E 2E 2E 2E
 296+ 5021 2E 2E 2E 2E
 296+ 5025 2E 2E 2E 2E
 296+ 5029 2E 2E 2E 2E
 296+ 502D 2E 2E 2E 2E
 296+ 5031 2E 2E 2E 2E
 296+ 5035 2E 2E 2E 2E
 296+ 5039 2E 2E 2E 2E
 296+ 503D 2E 2E 2E 2E
 297+ 5041 2E 2E 2E 2E  	DB '................##..............................................................'
 297+ 5045 2E 2E 2E 2E
 297+ 5049 2E 2E 2E 2E
 297+ 504D 2E 2E 2E 2E
 297+ 5051 23 23 2E 2E
 297+ 5055 2E 2E 2E 2E
 297+ 5059 2E 2E 2E 2E
 297+ 505D 2E 2E 2E 2E
 297+ 5061 2E 2E 2E 2E
 297+ 5065 2E 2E 2E 2E
 297+ 5069 2E 2E 2E 2E
 297+ 506D 2E 2E 2E 2E
 297+ 5071 2E 2E 2E 2E
 297+ 5075 2E 2E 2E 2E
 297+ 5079 2E 2E 2E 2E
 297+ 507D 2E 2E 2E 2E
 297+ 5081 2E 2E 2E 2E
 297+ 5085 2E 2E 2E 2E
 297+ 5089 2E 2E 2E 2E
 297+ 508D 2E 2E 2E 2E
 298+ 5091 2E 2E 2E 2E  	DB '................##..............................................................'
 298+ 5095 2E 2E 2E 2E
 298+ 5099 2E 2E 2E 2E
 298+ 509D 2E 2E 2E 2E
 298+ 50A1 23 23 2E 2E
 298+ 50A5 2E 2E 2E 2E
 298+ 50A9 2E 2E 2E 2E
 298+ 50AD 2E 2E 2E 2E
 298+ 50B1 2E 2E 2E 2E
 298+ 50B5 2E 2E 2E 2E
 298+ 50B9 2E 2E 2E 2E
 298+ 50BD 2E 2E 2E 2E
 298+ 50C1 2E 2E 2E 2E
 298+ 50C5 2E 2E 2E 2E
 298+ 50C9 2E 2E 2E 2E
 298+ 50CD 2E 2E 2E 2E
 298+ 50D1 2E 2E 2E 2E
 298+ 50D5 2E 2E 2E 2E
 298+ 50D9 2E 2E 2E 2E
 298+ 50DD 2E 2E 2E 2E
 299+ 50E1
 300+ 50E1              show_intro_screen:
 301+ 50E1 CD 4F 39     	call GOFL_Cls
 302+ 50E4 CD B5 06     	call message
 303+ 50E7 54 68 69 73  	db 'This is the "Game Of Life", originally devised by John Conway in the 1970s.', 13, 10
 303+ 50EB 20 69 73 20
 303+ 50EF 74 68 65 20
 303+ 50F3 22 47 61 6D
 303+ 50F7 65 20 4F 66
 303+ 50FB 20 4C 69 66
 303+ 50FF 65 22 2C 20
 303+ 5103 6F 72 69 67
 303+ 5107 69 6E 61 6C
 303+ 510B 6C 79 20 64
 303+ 510F 65 76 69 73
 303+ 5113 65 64 20 62
 303+ 5117 79 20 4A 6F
 303+ 511B 68 6E 20 43
 303+ 511F 6F 6E 77 61
 303+ 5123 79 20 69 6E
 303+ 5127 20 74 68 65
 303+ 512B 20 31 39 37
 303+ 512F 30 73 2E 0D
 303+ 5133 0A
 304+ 5134 54 68 69 73  	db 'This implementation was written by Albert Pauw on a Z80 Playground using CP/M.', 13, 10
 304+ 5138 20 69 6D 70
 304+ 513C 6C 65 6D 65
 304+ 5140 6E 74 61 74
 304+ 5144 69 6F 6E 20
 304+ 5148 77 61 73 20
 304+ 514C 77 72 69 74
 304+ 5150 74 65 6E 20
 304+ 5154 62 79 20 41
 304+ 5158 6C 62 65 72
 304+ 515C 74 20 50 61
 304+ 5160 75 77 20 6F
 304+ 5164 6E 20 61 20
 304+ 5168 5A 38 30 20
 304+ 516C 50 6C 61 79
 304+ 5170 67 72 6F 75
 304+ 5174 6E 64 20 75
 304+ 5178 73 69 6E 67
 304+ 517C 20 43 50 2F
 304+ 5180 4D 2E 0D 0A
 305+ 5184 49 74 20 68  	db 'It has been adapted to run in the Monitor as a demo.', 13, 10
 305+ 5188 61 73 20 62
 305+ 518C 65 65 6E 20
 305+ 5190 61 64 61 70
 305+ 5194 74 65 64 20
 305+ 5198 74 6F 20 72
 305+ 519C 75 6E 20 69
 305+ 51A0 6E 20 74 68
 305+ 51A4 65 20 4D 6F
 305+ 51A8 6E 69 74 6F
 305+ 51AC 72 20 61 73
 305+ 51B0 20 61 20 64
 305+ 51B4 65 6D 6F 2E
 305+ 51B8 0D 0A
 306+ 51BA 4D 61 6B 65  	db 'Make sure you have a screen of at least 80 x 25 characters.', 13, 10
 306+ 51BE 20 73 75 72
 306+ 51C2 65 20 79 6F
 306+ 51C6 75 20 68 61
 306+ 51CA 76 65 20 61
 306+ 51CE 20 73 63 72
 306+ 51D2 65 65 6E 20
 306+ 51D6 6F 66 20 61
 306+ 51DA 74 20 6C 65
 306+ 51DE 61 73 74 20
 306+ 51E2 38 30 20 78
 306+ 51E6 20 32 35 20
 306+ 51EA 63 68 61 72
 306+ 51EE 61 63 74 65
 306+ 51F2 72 73 2E 0D
 306+ 51F6 0A
 307+ 51F7 50 72 65 73  	db 'Press any key to start...', 13, 10, 0
 307+ 51FB 73 20 61 6E
 307+ 51FF 79 20 6B 65
 307+ 5203 79 20 74 6F
 307+ 5207 20 73 74 61
 307+ 520B 72 74 2E 2E
 307+ 520F 2E 0D 0A 00
 308+ 5213 C9           	ret
 309+ 5214
 310+ 5214              wait_for_key:
 311+ 5214              ; Waits for a key, and generates a random number in b, which it returns!
 312+ 5214 06 00        	ld b, 0
 313+ 5216              wait_for_key1:
 314+ 5216 04           	inc b
 315+ 5217 CD E5 05     	call char_in
 316+ 521A FE 00        	cp 0
 317+ 521C CA 16 52     	jp z, wait_for_key1
 318+ 521F C9           	ret
 319+ 5220
 320+ 5220              copy_initial_pattern:
 321+ 5220              ; Copy the starting pattern into the buffer.
 322+ 5220              ; The pointer to the pattern is passed in HL.
 323+ 5220              ; The pattern is made of "." and "#" but we store it in the buffer as
 324+ 5220              ; 1s and 0s. We do this by ANDing the char with %00000001, which is
 325+ 5220              ; why the '#' char needs to be ODD and the '.' char needs to be EVEN.
 326+ 5220
 327+ 5220 E5           	push hl
 328+ 5221              ; But first, totally zero out the entire buffer
 329+ 5221 21 00 80     	ld hl, Buffer
 330+ 5224 36 00        	ld (hl), 0
 331+ 5226 11 01 80     	ld de, Buffer+1
 332+ 5229 06 1C        	ld b, Height+3
 333+ 522B 0E 00        	ld c, 0
 334+ 522D ED B0        	ldir
 335+ 522F
 336+ 522F E1           	pop hl
 337+ 5230
 338+ 5230              ; Now copy the pattern to the buffer
 339+ 5230 16 81        	ld d, BufferPage+1            ; Initialise at location 1,1
 340+ 5232 1E 01        	ld e, 1                       ; in the buffer (top left is 0,0)
 341+ 5234 0E 19        	ld c, Height
 342+ 5236              copy_initial_pattern_rows:
 343+ 5236 06 50        	ld b, Width
 344+ 5238 E5           	push hl                       ; Store pattern pointer
 345+ 5239              copy_initial_pattern_cols:
 346+ 5239 7E           	ld a, (hl)                    ; Copy from pattern to buffer
 347+ 523A E6 01        	and %00000001                 ; Isolate bit 0 only
 348+ 523C 12           	ld (de), a
 349+ 523D 23           	inc hl                        ; Move to next location in pattern
 350+ 523E 1C           	inc e                         ; next column
 351+ 523F 10 F8        	djnz copy_initial_pattern_cols ; loop columns
 352+ 5241 E1           	pop hl                        ; Back to start of current row in pattern
 353+ 5242 D5           	push de
 354+ 5243 11 50 00     	ld de, PatternWidth
 355+ 5246 19           	add hl, de                    ; Move to next row in pattern
 356+ 5247 D1           	pop de
 357+ 5248 1E 01        	ld e, 1                       ; Back to start of buffer row
 358+ 524A 14           	inc d                         ; But move down a row
 359+ 524B 0D           	dec c                         ; loop rows
 360+ 524C 20 E8        	jr nz, copy_initial_pattern_rows
 361+ 524E C9           	ret
 362+ 524F
 363+ 524F              ;
 364+ 524F              ; The buffer needs to be in RAM... ;
 365+ 524F              ;
 366+ 524F              Buffer equ $8000
 367+ 524F              BufferPage equ $80
 368+ 524F
 369+ 524F
 370+ 524F
 371+ 524F
 372+ 524F
 373+ 524F
 374+ 524F
# file closed: GOFL.asm
  42  524F
  43  524F                  ;From here I am merging two systems,
  44  524F                  ; Title:        Z80 Monitor for BSX
  45  524F                  ; Author:       Dean Belfield
  46  524F
  47  524F                  ;AND
  48  524F
  49  524F                  ;Z80 playground made by John I know this is his name although he does not put his name in source code.
  50  524F                  ;
  51  524F                  include "string.asm"
# file opened: string.asm
   1+ 524F              ; Parse a hex string (up to 4 nibbles) to a binary
   2+ 524F              ; HL: Address of hex (ASCII)
   3+ 524F              ; DE: Output
   4+ 524F              ;
   5+ 524F 11 00 00     Parse_Hex16:            LD      DE,0                    ; Clear the output
   6+ 5252 06 04                                LD      B,4                     ; Maximum number of nibbles
   7+ 5254 7E           Parse_Hex:              LD      A,(HL)                  ; Get the nibble
   8+ 5255 D6 30                                SUB     '0'                     ; Normalise to 0
   9+ 5257 D8                                   RET     C                       ; Return if < ASCII '0'
  10+ 5258 FE 0A                                CP      10                      ; Check if >= 10
  11+ 525A 38 05                                JR      C,1F
  12+ 525C D6 07                                SUB     7                       ; Adjust ASCII A-F to nibble
  13+ 525E FE 10                                CP      16                      ; Check for > F
  14+ 5260 D0                                   RET     NC                      ; Return
  15+ 5261 CB 23 CB 12  1:                      SLA     DE                      ; Shfit DE left 4 times
  16+ 5265 CB 23 CB 12                          SLA     DE
  17+ 5269 CB 23 CB 12                          SLA     DE
  18+ 526D CB 23 CB 12                          SLA     DE
  19+ 5271 B3                                   OR      E                       ; OR the nibble into E
  20+ 5272 5F                                   LD      E,A
  21+ 5273 23                                   INC     HL                      ; Increase pointer to next byte of input
  22+ 5274 10 DE                                DJNZ    Parse_Hex               ; Loop around
  23+ 5276 C9                                   RET
  24+ 5277
  25+ 5277              ; Print a 16-bit HEX number
  26+ 5277              ; HL: Number to print
  27+ 5277              ;
  28+ 5277 7C           Print_Hex16:            LD      A,H
  29+ 5278 CD 7C 52                             CALL    Print_Hex8
  30+ 527B 7D                                   LD      A,L
  31+ 527C
  32+ 527C              ; Print an 8-bit HEX number
  33+ 527C              ; A: Number to print
  34+ 527C              ;
  35+ 527C 4F           Print_Hex8:             LD      C,A
  36+ 527D 1F                                   RRA
  37+ 527E 1F                                   RRA
  38+ 527F 1F                                   RRA
  39+ 5280 1F                                   RRA
  40+ 5281 CD 85 52                             CALL    1F
  41+ 5284 79                                   LD      A,C
  42+ 5285 E6 0F        1:                      AND     0x0F
  43+ 5287 C6 90                                ADD     A,0x90
  44+ 5289 27                                   DAA
  45+ 528A CE 40                                ADC     A,0x40
  46+ 528C 27                                   DAA
  47+ 528D C3 6A 06                             JP      print_a
  48+ 5290
  49+ 5290              ; Print CR/LF
  50+ 5290              ;
  51+ 5290 3E 0D        Print_CR:               LD      A,0x0D
  52+ 5292 CD 6A 06                             CALL    print_a
  53+ 5295 3E 0A                                LD      A,0x0A
  54+ 5297 C3 6A 06                             JP      print_a
  55+ 529A
  56+ 529A 7E           Print_String:           LD      A,(HL)
  57+ 529B B7                                   OR      A
  58+ 529C C8                                   RET     Z
  59+ 529D CD A3 52                             CALL    Print_Char
  60+ 52A0 23                                   INC     HL
  61+ 52A1 18 F7                                JR      Print_String
  62+ 52A3
  63+ 52A3 C3 6A 06     Print_Char:             JP      UART_TX
# file closed: string.asm
  52  52A6                  include "disassembler.asm"
# file opened: disassembler.asm
   1+ 52A6
   2+ 52A6 21 03 FF     FN_Disassemble:         LD      HL,SYS_VARS_INPUT+1
   3+ 52A9 CD 4F 52                             CALL    Parse_Hex16
   4+ 52AC 7E                                   LD      A,(HL)
   5+ 52AD FE 2C                                CP      ','
   6+ 52AF 20 11                                JR      NZ,2F
   7+ 52B1 23                                   INC     HL
   8+ 52B2 D5                                   PUSH    DE
   9+ 52B3 CD 4F 52                             CALL    Parse_Hex16
  10+ 52B6 E1                                   POP     HL
  11+ 52B7 42                                   LD      B,D
  12+ 52B8 4B                                   LD      C,E
  13+ 52B9 DD 21 02 FF                          LD      IX,SYS_VARS_INPUT
  14+ 52BD 78                                   LD      A,B
  15+ 52BE B1                                   OR      C
  16+ 52BF C2 C8 52                             JP      NZ,Disassemble
  17+ 52C2 21 3C 03     2:                      LD      HL,MSG_ERROR
  18+ 52C5 C3 9A 52                             JP      Print_String
  19+ 52C8
  20+ 52C8
  21+ 52C8
  22+ 52C8              ;******************************************************************************************
  23+ 52C8              ;                        L O W  L E V E L
  24+ 52C8              ;                        R O U T I N E S
  25+ 52C8              ;******************************************************************************************
  26+ 52C8
  27+ 52C8
  28+ 52C8
  29+ 52C8              ;
  30+ 52C8              ; Title:	Z80 Disassembler for BSX
  31+ 52C8              ; Author:	Dean Belfield
  32+ 52C8              ; Created:	03/06/2020
  33+ 52C8              ; Last Updated:	05/10/2020
  34+ 52C8              ;
  35+ 52C8              ; Based upon information in http://www.z80.info/decoding.htm
  36+ 52C8              ;
  37+ 52C8              ; Modinfo:
  38+ 52C8              ; 06/06/2020:	Output formatting tweaks
  39+ 52C8              ; 05/10/2020:	Added UART support
  40+ 52C8
  41+ 52C8              ;
  42+ 52C8              ; Macros
  43+ 52C8              ;
  44+ 52C8
  45+ 52C8              ; Macro to write a single char to the output buffer
  46+ 52C8              ;
  47+ 52C8              CHAR:			MACRO	value
  48+ 52C8 ~            			LD	(IY+0), value
  49+ 52C8 ~            			INC	IY
  50+ 52C8              			ENDM
  51+ 52C8
  52+ 52C8              ; Macro to write the zero-delimited text to the output buffer
  53+ 52C8              ;
  54+ 52C8              TEXT:			MACRO 	text
  55+ 52C8 ~            			CALL	Copy_String
  56+ 52C8 ~            			DZ	text
  57+ 52C8              			ENDM
  58+ 52C8
  59+ 52C8              ; Macro to write the zero delimited text to the output buffer if A != value
  60+ 52C8              ;
  61+ 52C8              TEXTIF:			MACRO	value, text
  62+ 52C8 ~            			CP	value
  63+ 52C8 ~            			JR	NZ, .S1
  64+ 52C8 ~            			CALL	Copy_String
  65+ 52C8 ~            			DZ	text
  66+ 52C8 ~            			RET
  67+ 52C8 ~            .S1:			;
  68+ 52C8              			ENDM
  69+ 52C8
  70+ 52C8              ; Macro to index string from table[value]
  71+ 52C8              ;
  72+ 52C8              TEXTIN:			MACRO	table, value
  73+ 52C8 ~            			LD 	A, value
  74+ 52C8 ~            			TEXTINM	table, Copy_String_Index
  75+ 52C8              			ENDM
  76+ 52C8
  77+ 52C8              ; Macro to index string from table[A]
  78+ 52C8              ;
  79+ 52C8              TEXTINA:		MACRO	table
  80+ 52C8 ~            			TEXTINM	table, Copy_String_Index
  81+ 52C8              			ENDM
  82+ 52C8
  83+ 52C8              ; Same as TEXTIN, but takes the shift opcodes DD and FD into account
  84+ 52C8              ; Used for tables DTable_R, DTable_RP1 and DTable_RP2
  85+ 52C8              ;
  86+ 52C8              TEXTINS:		MACRO	table, value
  87+ 52C8 ~            			LD 	A, value
  88+ 52C8 ~            			TEXTINM	table, Copy_String_Index_S
  89+ 52C8              			ENDM
  90+ 52C8
  91+ 52C8              ; Same as TEXTINA, but takes the shift opcodes DD and FD into account
  92+ 52C8              ; Used for tables DTable_R, DTable_RP1 and DTable_RP2
  93+ 52C8              ;
  94+ 52C8              TEXTINSA:		MACRO	table
  95+ 52C8 ~            			TEXTINM	table, Copy_String_Index_S
  96+ 52C8              			ENDM
  97+ 52C8
  98+ 52C8              ; Macro called by all TEXTIN macros
  99+ 52C8              ;
 100+ 52C8              TEXTINM:		MACRO	table, function
 101+ 52C8 ~            			EXX
 102+ 52C8 ~            			LD	HL, table
 103+ 52C8 ~            			CALL	function
 104+ 52C8 ~            			EXX
 105+ 52C8              			ENDM
 106+ 52C8
 107+ 52C8              ; Add A to HL (signed)
 108+ 52C8              ;
 109+ 52C8              ADD_HL_A_SIGNED:	MACRO
 110+ 52C8 ~            			OR A
 111+ 52C8 ~            			JP P, .S1
 112+ 52C8 ~            			DEC H
 113+ 52C8 ~            .S1			ADD A, L
 114+ 52C8 ~            			LD L, A
 115+ 52C8 ~            			ADC A, H
 116+ 52C8 ~            			SUB L
 117+ 52C8 ~            			LD H, A
 118+ 52C8              			ENDM
 119+ 52C8
 120+ 52C8              ; Add A to BC (signed)
 121+ 52C8              ;
 122+ 52C8              ADD_BC_A_SIGNED:	MACRO
 123+ 52C8 ~            			OR A
 124+ 52C8 ~            			JP P, .S1
 125+ 52C8 ~            			DEC B
 126+ 52C8 ~            .S1			ADD A, C
 127+ 52C8 ~            			LD C, A
 128+ 52C8 ~            			ADC A, B
 129+ 52C8 ~            			SUB C
 130+ 52C8 ~            			LD B, A
 131+ 52C8              			ENDM
 132+ 52C8
 133+ 52C8              ; HL: Start address of memory to disassemble
 134+ 52C8              ; IX: Address of buffer
 135+ 52C8              ; 	+&00: Address (2 bytes)
 136+ 52C8              ;	+&02: Opcode byte count (1 byte)
 137+ 52C8              ;	+&03: Temporary Storage (4 bytes)
 138+ 52C8              ;	+&07: Shift byte (&00, &CB, &DD, &ED, &FD)
 139+ 52C8              ;	+&08: Disassembly text
 140+ 52C8              ; BC: Number of bytes to disassemble
 141+ 52C8              ;
 142+ 52C8 DD 7D        Disassemble:		LD 	A,IXL			; Point IY to the disassembly text address
 143+ 52CA C6 08        			ADD	A,8
 144+ 52CC FD 6F        			LD	IYL,A
 145+ 52CE DD 7C        			LD	A,IXH
 146+ 52D0 CE 00        			ADC	A,0
 147+ 52D2 FD 67        			LD	IYH,A
 148+ 52D4
 149+ 52D4 C5           1:			PUSH 	BC			; Stack the loop counter
 150+ 52D5 7D           			LD	A,L
 150+ 52D6 DD 77 00       LD (IX+0),A	; Store the address
 151+ 52D9 7C           			LD	A,H
 151+ 52DA DD 77 01       LD (IX+1),A
 152+ 52DD FD E5        			PUSH	IY 			; Stack the string buffer address
 153+ 52DF DD 36 02 00  			LD	(IX+2),0		; Clear the byte count
 154+ 52E3 DD 36 07 00  			LD	(IX+7),0		; Clear the shift byte
 155+ 52E7 CD 5B 53     			CALL	Disassemble_Op		; Disassemble the OP code
 156+ 52EA DD 7E 07     			LD	A,(IX+7)		; Is it a shift byte?
 157+ 52ED B7           			OR	A
 158+ 52EE C4 5B 53     			CALL	NZ,Disassemble_Op	; If not zero, then do it again!
 159+ 52F1 FD 36 00 00  			LD	(IY+0),0		; Terminate the string
 160+ 52F5 FD E1        			POP 	IY
 161+ 52F7 E5           			PUSH	HL 			; Print the string to the console
 162+ 52F8 DD 7E 00     			LD	A,(IX+0)
 162+ 52FB 6F             LD L,A	; First the address
 163+ 52FC DD 7E 01     			LD	A,(IX+1)
 163+ 52FF 67             LD H,A
 164+ 5300 CD 77 52     			CALL 	Print_Hex16
 165+ 5303 3E 3A        			LD	A,":"
 165+ 5305 CD A3 52       CALL Print_Char
 166+ 5308 3E 20        			LD	A," "
 166+ 530A CD A3 52       CALL Print_Char
 167+ 530D CD 38 53     			CALL	Print_Opcodes
 168+ 5310 FD 7D        			LD	A,IYL
 168+ 5312 6F             LD L,A 		; And finally the disassembly
 169+ 5313 FD 7C        			LD	A,IYH
 169+ 5315 67             LD H,A
 170+ 5316 CD 9A 52     			CALL 	Print_String
 171+ 5319 CD 90 52     			CALL	Print_CR
 172+ 531C E1           			POP 	HL
 173+ 531D C1           			POP 	BC			; Pop the line loop counter
 174+ 531E CD B2 06     			CALL 	Read_Char_NB		; Check for ESC
 175+ 5321 FE 1B        			CP 	0x1B
 176+ 5323 C8           			RET	Z
 177+ 5324 DD 7E 02     			LD	A,(IX+2)		; Decrement number of bytes
 178+ 5327 ED 44        			NEG
 179+ 5329              			ADD_BC_A_SIGNED
 179+ 5329 B7          >			OR A
 179+ 532A F2 2E 53    >			JP P, .S1
 179+ 532D 05          >			DEC B
 179+ 532E 81          >.S1			ADD A, C
 179+ 532F 4F          >			LD C, A
 179+ 5330 88          >			ADC A, B
 179+ 5331 91          >			SUB C
 179+ 5332 47          >			LD B, A
 180+ 5333 CB 78        			BIT	7,B
 181+ 5335 28 9D        			JR	Z, 1B			; Loop
 182+ 5337 C9           			RET
 183+ 5338
 184+ 5338              ; Print the opcodes out to the terminal
 185+ 5338              ; HL: Start of memory to dump
 186+ 5338              ;
 187+ 5338 DD 46 02     Print_Opcodes:		LD	B,(IX+2)		; Number of bytes in this instruction
 188+ 533B 7E           1:			LD	A,(HL)			; Fetch the byte from memory
 189+ 533C CD 7C 52     			CALL	Print_Hex8		; Output an 8 digit hex code
 190+ 533F 3E 20        			LD	A," "			; Pad with a space
 191+ 5341 CD A3 52     			CALL	Print_Char
 192+ 5344 23           			INC	HL
 193+ 5345 10 F4        			DJNZ	1B
 194+ 5347 3E 04        			LD	A,4			; Need to pad this out
 195+ 5349 DD 96 02     			SUB	(IX+2)			; Work out how many spaces to pad out with 3*(4-#opcodes)
 196+ 534C D8           			RET	C 			; If no padding required, then exit
 197+ 534D C8           			RET	Z
 198+ 534E 47           			LD	B,A 			; Multiply by 3
 199+ 534F CB 27        			SLA	A
 200+ 5351 80           			ADD	A,B
 201+ 5352 47           			LD	B,A			; Store in loop counter, and pad
 202+ 5353 3E 20        2:			LD	A," "
 202+ 5355 CD A3 52       CALL Print_Char
 203+ 5358 10 F9        			DJNZ 	2B
 204+ 535A C9           			RET
 205+ 535B
 206+ 535B              ; Disassemble a single op code
 207+ 535B              ; HL: Current memory address
 208+ 535B              ; IY: Buffer to store string in
 209+ 535B              ; Returns:
 210+ 535B              ;  A: 0 or CB, DD, ED, FD prefix shift (TODO)
 211+ 535B              ;
 212+ 535B 46           Disassemble_Op:		LD	B,(HL)			; Get the opcode byte to decode
 213+ 535C 23           			INC	HL 			; Skip to next memory address
 214+ 535D DD 34 02     			INC	(IX+2)			; Increment the opcode byte count
 215+ 5360
 216+ 5360 78           			LD 	A,B
 217+ 5361 E6 07        			AND	0b00000111
 218+ 5363 57           			LD	D,A			; D = Z
 219+ 5364 78           			LD 	A,B
 220+ 5365 E6 38        			AND	0b00111000
 221+ 5367 CB 3F        			SRL	A
 222+ 5369 CB 3F        			SRL	A
 223+ 536B CB 3F        			SRL	A
 224+ 536D 5F           			LD	E,A			; E = Y
 225+ 536E CB 3F        			SRL	A
 226+ 5370 4F           			LD	C,A			; C = P
 227+ 5371
 228+ 5371 DD 7E 07     			LD	A,(IX+7)		; Check the shift byte
 229+ 5374 FE CB        			CP	0xCB
 230+ 5376 CA 11 57     			JP 	Z, Disassemble_Op_CB
 231+ 5379 FE ED        			CP	0xED
 232+ 537B CA 93 57     			JP	Z, Disassemble_Op_ED
 233+ 537E
 234+ 537E 78           			LD 	A,B
 235+ 537F E6 C0        			AND	0b11000000		; Get the X value
 236+ 5381 FE C0        			CP	0b11000000
 236+ 5383 CA 8A 55       JP	Z, Disassemble_Op_X3
 237+ 5386 FE 80        			CP	0b10000000
 237+ 5388 CA 77 55       JP 	Z, Disassemble_Op_X2
 238+ 538B FE 40        			CP 	0b01000000
 238+ 538D CA 44 55       JP	Z, Disassemble_Op_X1
 239+ 5390
 240+ 5390 7A           Disassemble_Op_X0:	LD 	A,D			; Get Z
 241+ 5391 FE 07        			CP	7
 241+ 5393 CA 3A 55       JP	Z, Disassemble_Op_X0Z7
 242+ 5396 FE 06        			CP	6
 242+ 5398 CA 22 55       JP	Z, Disassemble_Op_X0Z6
 243+ 539B FE 05        			CP	5
 243+ 539D CA 10 55       JP	Z, Disassemble_Op_X0Z5
 244+ 53A0 FE 04        			CP 	4
 244+ 53A2 CA FE 54       JP	Z, Disassemble_Op_X0Z4
 245+ 53A5 FE 03        			CP	3
 245+ 53A7 CA D6 54       JP	Z, Disassemble_Op_X0Z3
 246+ 53AA FE 02        			CP	2
 246+ 53AC CA 3C 54       JP	Z, Disassemble_Op_X0Z2
 247+ 53AF FE 01        			CP	1
 247+ 53B1 CA 0B 54       JP	Z, Disassemble_Op_X0Z1
 248+ 53B4
 249+ 53B4 7B           Disassemble_Op_X0Z0:	LD 	A,E			; Get Y
 250+ 53B5              			TEXTIF	0, "NOP"
 250+ 53B5 FE 00       >			CP	0
 250+ 53B7 20 08       >			JR	NZ, .S1
 250+ 53B9 CD C2 58    >			CALL	Copy_String
 250+ 53BC 4E 4F 50 00 >			DZ	"NOP"
 250+ 53C0 C9          >			RET
 250+ 53C1             >.S1:			;
 251+ 53C1              			TEXTIF	1, "EX AF,AF'"
 251+ 53C1 FE 01       >			CP	1
 251+ 53C3 20 0E       >			JR	NZ, .S1
 251+ 53C5 CD C2 58    >			CALL	Copy_String
 251+ 53C8 45 58 20 41 >			DZ	"EX AF,AF'"
 251+ 53CC 46 2C 41 46 >
 251+ 53D0 27 00       >
 251+ 53D2 C9          >			RET
 251+ 53D3             >.S1:			;
 252+ 53D3              			TEXTIF	2, "DJNZ ?R"
 252+ 53D3 FE 02       >			CP	2
 252+ 53D5 20 0C       >			JR	NZ, .S1
 252+ 53D7 CD C2 58    >			CALL	Copy_String
 252+ 53DA 44 4A 4E 5A >			DZ	"DJNZ ?R"
 252+ 53DE 20 3F 52 00 >
 252+ 53E2 C9          >			RET
 252+ 53E3             >.S1:			;
 253+ 53E3              			TEXTIF	3, "JR ?R"
 253+ 53E3 FE 03       >			CP	3
 253+ 53E5 20 0A       >			JR	NZ, .S1
 253+ 53E7 CD C2 58    >			CALL	Copy_String
 253+ 53EA 4A 52 20 3F >			DZ	"JR ?R"
 253+ 53EE 52 00       >
 253+ 53F0 C9          >			RET
 253+ 53F1             >.S1:			;
 254+ 53F1              			TEXT	"JR "
 254+ 53F1 CD C2 58    >			CALL	Copy_String
 254+ 53F4 4A 52 20 00 >			DZ	"JR "
 255+ 53F8 7B           			LD	A,E
 256+ 53F9 D6 04        			SUB	4
 257+ 53FB              			TEXTINA	DTable_CC
 257+ 53FB             >			TEXTINM	DTable_CC, Copy_String_Index
 257+ 53FB D9          >			EXX
 257+ 53FC 21 F0 59    >			LD	HL, DTable_CC
 257+ 53FF CD E3 58    >			CALL	Copy_String_Index
 257+ 5402 D9          >			EXX
 258+ 5403              			TEXT	",?R"
 258+ 5403 CD C2 58    >			CALL	Copy_String
 258+ 5406 2C 3F 52 00 >			DZ	",?R"
 259+ 540A C9           			RET
 260+ 540B
 261+ 540B CB 58        Disassemble_Op_X0Z1:	BIT    	3,B
 262+ 540D 20 18        			JR	NZ, 1F
 263+ 540F              			TEXT	"LD "			; Q = 0
 263+ 540F CD C2 58    >			CALL	Copy_String
 263+ 5412 4C 44 20 00 >			DZ	"LD "
 264+ 5416              			TEXTINS	DTable_RP1, C
 264+ 5416 79          >			LD 	A, C
 264+ 5417             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 264+ 5417 D9          >			EXX
 264+ 5418 21 C3 59    >			LD	HL, DTable_RP1
 264+ 541B CD CA 58    >			CALL	Copy_String_Index_S
 264+ 541E D9          >			EXX
 265+ 541F              			TEXT	",?W"
 265+ 541F CD C2 58    >			CALL	Copy_String
 265+ 5422 2C 3F 57 00 >			DZ	",?W"
 266+ 5426 C9           			RET
 267+ 5427              1:			TEXT	"ADD HL,"		; Q = 1
 267+ 5427 CD C2 58    >			CALL	Copy_String
 267+ 542A 41 44 44 20 >			DZ	"ADD HL,"
 267+ 542E 48 4C 2C 00 >
 268+ 5432              			TEXTINS	DTable_RP1, C
 268+ 5432 79          >			LD 	A, C
 268+ 5433             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 268+ 5433 D9          >			EXX
 268+ 5434 21 C3 59    >			LD	HL, DTable_RP1
 268+ 5437 CD CA 58    >			CALL	Copy_String_Index_S
 268+ 543A D9          >			EXX
 269+ 543B C9           			RET
 270+ 543C
 271+ 543C CB 58        Disassemble_Op_X0Z2:	BIT	3,B
 272+ 543E 20 4B        			JR	NZ, 1F
 273+ 5440 79           			LD	A,C			; Q = 0
 274+ 5441              			TEXTIF	0, "LD (BC),A"
 274+ 5441 FE 00       >			CP	0
 274+ 5443 20 0E       >			JR	NZ, .S1
 274+ 5445 CD C2 58    >			CALL	Copy_String
 274+ 5448 4C 44 20 28 >			DZ	"LD (BC),A"
 274+ 544C 42 43 29 2C >
 274+ 5450 41 00       >
 274+ 5452 C9          >			RET
 274+ 5453             >.S1:			;
 275+ 5453              			TEXTIF	1, "LD (DE),A"
 275+ 5453 FE 01       >			CP	1
 275+ 5455 20 0E       >			JR	NZ, .S1
 275+ 5457 CD C2 58    >			CALL	Copy_String
 275+ 545A 4C 44 20 28 >			DZ	"LD (DE),A"
 275+ 545E 44 45 29 2C >
 275+ 5462 41 00       >
 275+ 5464 C9          >			RET
 275+ 5465             >.S1:			;
 276+ 5465              			TEXTIF	2, "LD (?W),HL"
 276+ 5465 FE 02       >			CP	2
 276+ 5467 20 0F       >			JR	NZ, .S1
 276+ 5469 CD C2 58    >			CALL	Copy_String
 276+ 546C 4C 44 20 28 >			DZ	"LD (?W),HL"
 276+ 5470 3F 57 29 2C >
 276+ 5474 48 4C 00    >
 276+ 5477 C9          >			RET
 276+ 5478             >.S1:			;
 277+ 5478              			TEXTIF	3, "LD (?W),A"
 277+ 5478 FE 03       >			CP	3
 277+ 547A 20 0E       >			JR	NZ, .S1
 277+ 547C CD C2 58    >			CALL	Copy_String
 277+ 547F 4C 44 20 28 >			DZ	"LD (?W),A"
 277+ 5483 3F 57 29 2C >
 277+ 5487 41 00       >
 277+ 5489 C9          >			RET
 277+ 548A             >.S1:			;
 278+ 548A C9           			RET
 279+ 548B 79           1:			LD	A,C 			; Q = 1
 280+ 548C              			TEXTIF	0, "LD A,(BC)"
 280+ 548C FE 00       >			CP	0
 280+ 548E 20 0E       >			JR	NZ, .S1
 280+ 5490 CD C2 58    >			CALL	Copy_String
 280+ 5493 4C 44 20 41 >			DZ	"LD A,(BC)"
 280+ 5497 2C 28 42 43 >
 280+ 549B 29 00       >
 280+ 549D C9          >			RET
 280+ 549E             >.S1:			;
 281+ 549E              			TEXTIF	1, "LD A,(DE)"
 281+ 549E FE 01       >			CP	1
 281+ 54A0 20 0E       >			JR	NZ, .S1
 281+ 54A2 CD C2 58    >			CALL	Copy_String
 281+ 54A5 4C 44 20 41 >			DZ	"LD A,(DE)"
 281+ 54A9 2C 28 44 45 >
 281+ 54AD 29 00       >
 281+ 54AF C9          >			RET
 281+ 54B0             >.S1:			;
 282+ 54B0              			TEXTIF	2, "LD HL,(?W)"
 282+ 54B0 FE 02       >			CP	2
 282+ 54B2 20 0F       >			JR	NZ, .S1
 282+ 54B4 CD C2 58    >			CALL	Copy_String
 282+ 54B7 4C 44 20 48 >			DZ	"LD HL,(?W)"
 282+ 54BB 4C 2C 28 3F >
 282+ 54BF 57 29 00    >
 282+ 54C2 C9          >			RET
 282+ 54C3             >.S1:			;
 283+ 54C3              			TEXTIF	3, "LD A,(?W)"
 283+ 54C3 FE 03       >			CP	3
 283+ 54C5 20 0E       >			JR	NZ, .S1
 283+ 54C7 CD C2 58    >			CALL	Copy_String
 283+ 54CA 4C 44 20 41 >			DZ	"LD A,(?W)"
 283+ 54CE 2C 28 3F 57 >
 283+ 54D2 29 00       >
 283+ 54D4 C9          >			RET
 283+ 54D5             >.S1:			;
 284+ 54D5 C9           			RET
 285+ 54D6
 286+ 54D6 CB 58        Disassemble_Op_X0Z3:	BIT	3,B
 287+ 54D8 20 12        			JR 	NZ,1F
 288+ 54DA              			TEXT	"INC "			; Q = 0
 288+ 54DA CD C2 58    >			CALL	Copy_String
 288+ 54DD 49 4E 43 20 >			DZ	"INC "
 288+ 54E1 00          >
 289+ 54E2              			TEXTINS	DTable_RP1, C
 289+ 54E2 79          >			LD 	A, C
 289+ 54E3             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 289+ 54E3 D9          >			EXX
 289+ 54E4 21 C3 59    >			LD	HL, DTable_RP1
 289+ 54E7 CD CA 58    >			CALL	Copy_String_Index_S
 289+ 54EA D9          >			EXX
 290+ 54EB C9           			RET
 291+ 54EC              1:			TEXT	"DEC "			; Q = 1
 291+ 54EC CD C2 58    >			CALL	Copy_String
 291+ 54EF 44 45 43 20 >			DZ	"DEC "
 291+ 54F3 00          >
 292+ 54F4              			TEXTINS	DTable_RP1, C
 292+ 54F4 79          >			LD 	A, C
 292+ 54F5             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 292+ 54F5 D9          >			EXX
 292+ 54F6 21 C3 59    >			LD	HL, DTable_RP1
 292+ 54F9 CD CA 58    >			CALL	Copy_String_Index_S
 292+ 54FC D9          >			EXX
 293+ 54FD C9           			RET
 294+ 54FE
 295+ 54FE              Disassemble_Op_X0Z4:	TEXT	"INC "
 295+ 54FE CD C2 58    >			CALL	Copy_String
 295+ 5501 49 4E 43 20 >			DZ	"INC "
 295+ 5505 00          >
 296+ 5506              			TEXTINS	DTable_R, E
 296+ 5506 7B          >			LD 	A, E
 296+ 5507             >			TEXTINM	DTable_R, Copy_String_Index_S
 296+ 5507 D9          >			EXX
 296+ 5508 21 78 59    >			LD	HL, DTable_R
 296+ 550B CD CA 58    >			CALL	Copy_String_Index_S
 296+ 550E D9          >			EXX
 297+ 550F C9           			RET
 298+ 5510
 299+ 5510              Disassemble_Op_X0Z5:	TEXT	"DEC "
 299+ 5510 CD C2 58    >			CALL	Copy_String
 299+ 5513 44 45 43 20 >			DZ	"DEC "
 299+ 5517 00          >
 300+ 5518              			TEXTINS	DTable_R, E
 300+ 5518 7B          >			LD 	A, E
 300+ 5519             >			TEXTINM	DTable_R, Copy_String_Index_S
 300+ 5519 D9          >			EXX
 300+ 551A 21 78 59    >			LD	HL, DTable_R
 300+ 551D CD CA 58    >			CALL	Copy_String_Index_S
 300+ 5520 D9          >			EXX
 301+ 5521 C9           			RET
 302+ 5522
 303+ 5522              Disassemble_Op_X0Z6:	TEXT	"LD "
 303+ 5522 CD C2 58    >			CALL	Copy_String
 303+ 5525 4C 44 20 00 >			DZ	"LD "
 304+ 5529              			TEXTINS	DTable_R, E
 304+ 5529 7B          >			LD 	A, E
 304+ 552A             >			TEXTINM	DTable_R, Copy_String_Index_S
 304+ 552A D9          >			EXX
 304+ 552B 21 78 59    >			LD	HL, DTable_R
 304+ 552E CD CA 58    >			CALL	Copy_String_Index_S
 304+ 5531 D9          >			EXX
 305+ 5532              			TEXT	",?B"
 305+ 5532 CD C2 58    >			CALL	Copy_String
 305+ 5535 2C 3F 42 00 >			DZ	",?B"
 306+ 5539 C9           			RET
 307+ 553A
 308+ 553A              Disassemble_Op_X0Z7:	TEXTIN	DTable_O1, E
 308+ 553A 7B          >			LD 	A, E
 308+ 553B             >			TEXTINM	DTable_O1, Copy_String_Index
 308+ 553B D9          >			EXX
 308+ 553C 21 DA 5A    >			LD	HL, DTable_O1
 308+ 553F CD E3 58    >			CALL	Copy_String_Index
 308+ 5542 D9          >			EXX
 309+ 5543 C9           			RET
 310+ 5544
 311+ 5544 7A           Disassemble_Op_X1:	LD	A,D			; If Z is 6
 312+ 5545 FE 06        			CP	6
 313+ 5547 20 0E        			JR 	NZ,1F
 314+ 5549 7B           			LD	A,E			; and Y is 6
 315+ 554A FE 06        			CP	6
 316+ 554C 20 09        			JR	NZ,1F
 317+ 554E              			TEXT	"HALT"			; The opcode is HALT
 317+ 554E CD C2 58    >			CALL	Copy_String
 317+ 5551 48 41 4C 54 >			DZ	"HALT"
 317+ 5555 00          >
 318+ 5556 C9           			RET
 319+ 5557              1:			TEXT	"LD "			; Otherwis LD r[y], r[z]
 319+ 5557 CD C2 58    >			CALL	Copy_String
 319+ 555A 4C 44 20 00 >			DZ	"LD "
 320+ 555E              			TEXTINS	DTable_R, E
 320+ 555E 7B          >			LD 	A, E
 320+ 555F             >			TEXTINM	DTable_R, Copy_String_Index_S
 320+ 555F D9          >			EXX
 320+ 5560 21 78 59    >			LD	HL, DTable_R
 320+ 5563 CD CA 58    >			CALL	Copy_String_Index_S
 320+ 5566 D9          >			EXX
 321+ 5567              			CHAR	","
 321+ 5567 FD 36 00 2C >			LD	(IY+0), ","
 321+ 556B FD 23       >			INC	IY
 322+ 556D              			TEXTINS	DTable_R, D
 322+ 556D 7A          >			LD 	A, D
 322+ 556E             >			TEXTINM	DTable_R, Copy_String_Index_S
 322+ 556E D9          >			EXX
 322+ 556F 21 78 59    >			LD	HL, DTable_R
 322+ 5572 CD CA 58    >			CALL	Copy_String_Index_S
 322+ 5575 D9          >			EXX
 323+ 5576 C9           			RET
 324+ 5577
 325+ 5577              Disassemble_Op_X2:	TEXTIN	DTable_ALU, E		; ALU[y] r[z]
 325+ 5577 7B          >			LD 	A, E
 325+ 5578             >			TEXTINM	DTable_ALU, Copy_String_Index
 325+ 5578 D9          >			EXX
 325+ 5579 21 0C 5A    >			LD	HL, DTable_ALU
 325+ 557C CD E3 58    >			CALL	Copy_String_Index
 325+ 557F D9          >			EXX
 326+ 5580              			TEXTINS	DTable_R, D
 326+ 5580 7A          >			LD 	A, D
 326+ 5581             >			TEXTINM	DTable_R, Copy_String_Index_S
 326+ 5581 D9          >			EXX
 326+ 5582 21 78 59    >			LD	HL, DTable_R
 326+ 5585 CD CA 58    >			CALL	Copy_String_Index_S
 326+ 5588 D9          >			EXX
 327+ 5589 C9           			RET
 328+ 558A
 329+ 558A 7A           Disassemble_Op_X3:	LD 	A,D			; Get Z
 330+ 558B FE 07        			CP	7
 330+ 558D CA FF 56       JP	Z, Disassemble_Op_X3Z7
 331+ 5590 FE 06        			CP	6
 331+ 5592 CA EF 56       JP	Z, Disassemble_Op_X3Z6
 332+ 5595 FE 05        			CP	5
 332+ 5597 CA B9 56       JP	Z, Disassemble_Op_X3Z5
 333+ 559A FE 04        			CP 	4
 333+ 559C CA 9F 56       JP	Z, Disassemble_Op_X3Z4
 334+ 559F FE 03        			CP	3
 334+ 55A1 CA 27 56       JP	Z, Disassemble_Op_X3Z3
 335+ 55A4 FE 02        			CP	2
 335+ 55A6 CA 0F 56       JP	Z, Disassemble_Op_X3Z2
 336+ 55A9 FE 01        			CP	1
 336+ 55AB CA C0 55       JP	Z, Disassemble_Op_X3Z1
 337+ 55AE
 338+ 55AE              Disassemble_Op_X3Z0:	TEXT 	"RET "			; RET cc[y]
 338+ 55AE CD C2 58    >			CALL	Copy_String
 338+ 55B1 52 45 54 20 >			DZ	"RET "
 338+ 55B5 00          >
 339+ 55B6              			TEXTIN	DTable_CC, E
 339+ 55B6 7B          >			LD 	A, E
 339+ 55B7             >			TEXTINM	DTable_CC, Copy_String_Index
 339+ 55B7 D9          >			EXX
 339+ 55B8 21 F0 59    >			LD	HL, DTable_CC
 339+ 55BB CD E3 58    >			CALL	Copy_String_Index
 339+ 55BE D9          >			EXX
 340+ 55BF C9           			RET
 341+ 55C0
 342+ 55C0 CB 58        Disassemble_Op_X3Z1:	BIT 	3,B
 343+ 55C2 20 12        			JR	NZ,1F
 344+ 55C4              			TEXT	"POP "			; Q = 0
 344+ 55C4 CD C2 58    >			CALL	Copy_String
 344+ 55C7 50 4F 50 20 >			DZ	"POP "
 344+ 55CB 00          >
 345+ 55CC              			TEXTINS	DTable_RP2, C
 345+ 55CC 79          >			LD 	A, C
 345+ 55CD             >			TEXTINM	DTable_RP2, Copy_String_Index_S
 345+ 55CD D9          >			EXX
 345+ 55CE 21 CF 59    >			LD	HL, DTable_RP2
 345+ 55D1 CD CA 58    >			CALL	Copy_String_Index_S
 345+ 55D4 D9          >			EXX
 346+ 55D5 C9           			RET
 347+ 55D6 79           1:			LD	A,C 			; Q = 1
 348+ 55D7              			TEXTIF	0, "RET"
 348+ 55D7 FE 00       >			CP	0
 348+ 55D9 20 08       >			JR	NZ, .S1
 348+ 55DB CD C2 58    >			CALL	Copy_String
 348+ 55DE 52 45 54 00 >			DZ	"RET"
 348+ 55E2 C9          >			RET
 348+ 55E3             >.S1:			;
 349+ 55E3              			TEXTIF	1, "EXX"
 349+ 55E3 FE 01       >			CP	1
 349+ 55E5 20 08       >			JR	NZ, .S1
 349+ 55E7 CD C2 58    >			CALL	Copy_String
 349+ 55EA 45 58 58 00 >			DZ	"EXX"
 349+ 55EE C9          >			RET
 349+ 55EF             >.S1:			;
 350+ 55EF              			TEXTIF	2, "JP HL"
 350+ 55EF FE 02       >			CP	2
 350+ 55F1 20 0A       >			JR	NZ, .S1
 350+ 55F3 CD C2 58    >			CALL	Copy_String
 350+ 55F6 4A 50 20 48 >			DZ	"JP HL"
 350+ 55FA 4C 00       >
 350+ 55FC C9          >			RET
 350+ 55FD             >.S1:			;
 351+ 55FD              			TEXTIF	3, "LD SP,HL"
 351+ 55FD FE 03       >			CP	3
 351+ 55FF 20 0D       >			JR	NZ, .S1
 351+ 5601 CD C2 58    >			CALL	Copy_String
 351+ 5604 4C 44 20 53 >			DZ	"LD SP,HL"
 351+ 5608 50 2C 48 4C >
 351+ 560C 00          >
 351+ 560D C9          >			RET
 351+ 560E             >.S1:			;
 352+ 560E C9           			RET
 353+ 560F
 354+ 560F              Disassemble_Op_X3Z2:	TEXT	"JP "			; JP cc[y]
 354+ 560F CD C2 58    >			CALL	Copy_String
 354+ 5612 4A 50 20 00 >			DZ	"JP "
 355+ 5616              			TEXTIN	DTable_CC, E
 355+ 5616 7B          >			LD 	A, E
 355+ 5617             >			TEXTINM	DTable_CC, Copy_String_Index
 355+ 5617 D9          >			EXX
 355+ 5618 21 F0 59    >			LD	HL, DTable_CC
 355+ 561B CD E3 58    >			CALL	Copy_String_Index
 355+ 561E D9          >			EXX
 356+ 561F              			TEXT	",?W"
 356+ 561F CD C2 58    >			CALL	Copy_String
 356+ 5622 2C 3F 57 00 >			DZ	",?W"
 357+ 5626 C9           			RET
 358+ 5627
 359+ 5627 7B           Disassemble_Op_X3Z3:	LD	A,E
 360+ 5628 FE 01        			CP	1
 361+ 562A 20 05        			JR 	NZ,1F
 362+ 562C DD 36 07 CB  			LD	(IX+7),0xCB
 363+ 5630 C9           			RET
 364+ 5631              1:			TEXTIF	0, "JP ?W"
 364+ 5631 FE 00       >			CP	0
 364+ 5633 20 0A       >			JR	NZ, .S1
 364+ 5635 CD C2 58    >			CALL	Copy_String
 364+ 5638 4A 50 20 3F >			DZ	"JP ?W"
 364+ 563C 57 00       >
 364+ 563E C9          >			RET
 364+ 563F             >.S1:			;
 365+ 563F              			TEXTIF	2, "OUT (?B),A"
 365+ 563F FE 02       >			CP	2
 365+ 5641 20 0F       >			JR	NZ, .S1
 365+ 5643 CD C2 58    >			CALL	Copy_String
 365+ 5646 4F 55 54 20 >			DZ	"OUT (?B),A"
 365+ 564A 28 3F 42 29 >
 365+ 564E 2C 41 00    >
 365+ 5651 C9          >			RET
 365+ 5652             >.S1:			;
 366+ 5652              			TEXTIF	3, "IN A,(?B)"
 366+ 5652 FE 03       >			CP	3
 366+ 5654 20 0E       >			JR	NZ, .S1
 366+ 5656 CD C2 58    >			CALL	Copy_String
 366+ 5659 49 4E 20 41 >			DZ	"IN A,(?B)"
 366+ 565D 2C 28 3F 42 >
 366+ 5661 29 00       >
 366+ 5663 C9          >			RET
 366+ 5664             >.S1:			;
 367+ 5664              			TEXTIF	4, "EX (SP),HL"
 367+ 5664 FE 04       >			CP	4
 367+ 5666 20 0F       >			JR	NZ, .S1
 367+ 5668 CD C2 58    >			CALL	Copy_String
 367+ 566B 45 58 20 28 >			DZ	"EX (SP),HL"
 367+ 566F 53 50 29 2C >
 367+ 5673 48 4C 00    >
 367+ 5676 C9          >			RET
 367+ 5677             >.S1:			;
 368+ 5677              			TEXTIF 	5, "EX DE,HL"
 368+ 5677 FE 05       >			CP	5
 368+ 5679 20 0D       >			JR	NZ, .S1
 368+ 567B CD C2 58    >			CALL	Copy_String
 368+ 567E 45 58 20 44 >			DZ	"EX DE,HL"
 368+ 5682 45 2C 48 4C >
 368+ 5686 00          >
 368+ 5687 C9          >			RET
 368+ 5688             >.S1:			;
 369+ 5688              			TEXTIF	6, "DI"
 369+ 5688 FE 06       >			CP	6
 369+ 568A 20 07       >			JR	NZ, .S1
 369+ 568C CD C2 58    >			CALL	Copy_String
 369+ 568F 44 49 00    >			DZ	"DI"
 369+ 5692 C9          >			RET
 369+ 5693             >.S1:			;
 370+ 5693              			TEXTIF	7, "EI"
 370+ 5693 FE 07       >			CP	7
 370+ 5695 20 07       >			JR	NZ, .S1
 370+ 5697 CD C2 58    >			CALL	Copy_String
 370+ 569A 45 49 00    >			DZ	"EI"
 370+ 569D C9          >			RET
 370+ 569E             >.S1:			;
 371+ 569E C9           			RET
 372+ 569F
 373+ 569F              Disassemble_Op_X3Z4:	TEXT	"CALL "			; CALL cc[y]
 373+ 569F CD C2 58    >			CALL	Copy_String
 373+ 56A2 43 41 4C 4C >			DZ	"CALL "
 373+ 56A6 20 00       >
 374+ 56A8              			TEXTIN	DTable_CC, E
 374+ 56A8 7B          >			LD 	A, E
 374+ 56A9             >			TEXTINM	DTable_CC, Copy_String_Index
 374+ 56A9 D9          >			EXX
 374+ 56AA 21 F0 59    >			LD	HL, DTable_CC
 374+ 56AD CD E3 58    >			CALL	Copy_String_Index
 374+ 56B0 D9          >			EXX
 375+ 56B1              			TEXT	",?W"
 375+ 56B1 CD C2 58    >			CALL	Copy_String
 375+ 56B4 2C 3F 57 00 >			DZ	",?W"
 376+ 56B8 C9           			RET
 377+ 56B9
 378+ 56B9 CB 58        Disassemble_Op_X3Z5:	BIT 	3,B
 379+ 56BB 20 13        			JR	NZ,1F
 380+ 56BD              			TEXT	"PUSH "			; Q = 0
 380+ 56BD CD C2 58    >			CALL	Copy_String
 380+ 56C0 50 55 53 48 >			DZ	"PUSH "
 380+ 56C4 20 00       >
 381+ 56C6              			TEXTINS	DTable_RP2, C
 381+ 56C6 79          >			LD 	A, C
 381+ 56C7             >			TEXTINM	DTable_RP2, Copy_String_Index_S
 381+ 56C7 D9          >			EXX
 381+ 56C8 21 CF 59    >			LD	HL, DTable_RP2
 381+ 56CB CD CA 58    >			CALL	Copy_String_Index_S
 381+ 56CE D9          >			EXX
 382+ 56CF C9           			RET
 383+ 56D0 79           1:			LD	A,C 			; Q = 1
 384+ 56D1              			TEXTIF	0, "CALL ?W"
 384+ 56D1 FE 00       >			CP	0
 384+ 56D3 20 0C       >			JR	NZ, .S1
 384+ 56D5 CD C2 58    >			CALL	Copy_String
 384+ 56D8 43 41 4C 4C >			DZ	"CALL ?W"
 384+ 56DC 20 3F 57 00 >
 384+ 56E0 C9          >			RET
 384+ 56E1             >.S1:			;
 385+ 56E1 CB 27        			SLA	A 			; Return opcodes DD,ED or FD
 386+ 56E3 CB 27        			SLA	A
 387+ 56E5 CB 27        			SLA 	A
 388+ 56E7 CB 27        			SLA 	A
 389+ 56E9 C6 CD        			ADD	A, 0xCD
 390+ 56EB DD 77 07     			LD	(IX+7),A		; And store the shift byte
 391+ 56EE C9           			RET
 392+ 56EF
 393+ 56EF              Disassemble_Op_X3Z6:	TEXTIN	DTable_ALU, E		; ALU[y],n
 393+ 56EF 7B          >			LD 	A, E
 393+ 56F0             >			TEXTINM	DTable_ALU, Copy_String_Index
 393+ 56F0 D9          >			EXX
 393+ 56F1 21 0C 5A    >			LD	HL, DTable_ALU
 393+ 56F4 CD E3 58    >			CALL	Copy_String_Index
 393+ 56F7 D9          >			EXX
 394+ 56F8              			TEXT	"?B"
 394+ 56F8 CD C2 58    >			CALL	Copy_String
 394+ 56FB 3F 42 00    >			DZ	"?B"
 395+ 56FE C9           			RET
 396+ 56FF
 397+ 56FF              Disassemble_Op_X3Z7:	TEXT 	"RST "
 397+ 56FF CD C2 58    >			CALL	Copy_String
 397+ 5702 52 53 54 20 >			DZ	"RST "
 397+ 5706 00          >
 398+ 5707 7B           			LD 	A,E
 399+ 5708 CB 27        			SLA 	A
 400+ 570A CB 27        			SLA 	A
 401+ 570C CB 27        			SLA 	A
 402+ 570E C3 61 59     			JP	Copy_Hex8
 403+ 5711
 404+ 5711 78           Disassemble_Op_CB:	LD	A,B
 405+ 5712 E6 C0        			AND	0b11000000		; Get the X value
 406+ 5714 FE C0        			CP	0b11000000
 406+ 5716 28 5B          JR	Z, 3F
 407+ 5718 FE 80        			CP	0b10000000
 407+ 571A 28 37          JR 	Z, 2F
 408+ 571C FE 40        			CP 	0b01000000
 408+ 571E 28 13          JR	Z, 1F
 409+ 5720              			TEXTIN	DTable_ROT, E		; ROT[y], r[z]
 409+ 5720 7B          >			LD 	A, E
 409+ 5721             >			TEXTINM	DTable_ROT, Copy_String_Index
 409+ 5721 D9          >			EXX
 409+ 5722 21 40 5A    >			LD	HL, DTable_ROT
 409+ 5725 CD E3 58    >			CALL	Copy_String_Index
 409+ 5728 D9          >			EXX
 410+ 5729              			TEXTINS	DTable_R, D
 410+ 5729 7A          >			LD 	A, D
 410+ 572A             >			TEXTINM	DTable_R, Copy_String_Index_S
 410+ 572A D9          >			EXX
 410+ 572B 21 78 59    >			LD	HL, DTable_R
 410+ 572E CD CA 58    >			CALL	Copy_String_Index_S
 410+ 5731 D9          >			EXX
 411+ 5732 C9           			RET
 412+ 5733              1:			TEXT	"BIT "			; BIT y, r[z]
 412+ 5733 CD C2 58    >			CALL	Copy_String
 412+ 5736 42 49 54 20 >			DZ	"BIT "
 412+ 573A 00          >
 413+ 573B 7B           			LD	A,E
 414+ 573C C6 30        			ADD	A,'0'
 415+ 573E              			CHAR	A
 415+ 573E FD 77 00    >			LD	(IY+0), A
 415+ 5741 FD 23       >			INC	IY
 416+ 5743              			CHAR	","
 416+ 5743 FD 36 00 2C >			LD	(IY+0), ","
 416+ 5747 FD 23       >			INC	IY
 417+ 5749              			TEXTINS	DTable_R, D
 417+ 5749 7A          >			LD 	A, D
 417+ 574A             >			TEXTINM	DTable_R, Copy_String_Index_S
 417+ 574A D9          >			EXX
 417+ 574B 21 78 59    >			LD	HL, DTable_R
 417+ 574E CD CA 58    >			CALL	Copy_String_Index_S
 417+ 5751 D9          >			EXX
 418+ 5752 C9           			RET
 419+ 5753              2:			TEXT	"RES "			; RES y, r[7]
 419+ 5753 CD C2 58    >			CALL	Copy_String
 419+ 5756 52 45 53 20 >			DZ	"RES "
 419+ 575A 00          >
 420+ 575B 7B           			LD	A,E
 421+ 575C C6 30        			ADD	A,'0'
 422+ 575E              			CHAR	A
 422+ 575E FD 77 00    >			LD	(IY+0), A
 422+ 5761 FD 23       >			INC	IY
 423+ 5763              			CHAR	","
 423+ 5763 FD 36 00 2C >			LD	(IY+0), ","
 423+ 5767 FD 23       >			INC	IY
 424+ 5769              			TEXTINS	DTable_R, D
 424+ 5769 7A          >			LD 	A, D
 424+ 576A             >			TEXTINM	DTable_R, Copy_String_Index_S
 424+ 576A D9          >			EXX
 424+ 576B 21 78 59    >			LD	HL, DTable_R
 424+ 576E CD CA 58    >			CALL	Copy_String_Index_S
 424+ 5771 D9          >			EXX
 425+ 5772 C9           			RET
 426+ 5773              3:			TEXT	"SET "			; SET y, r[7]
 426+ 5773 CD C2 58    >			CALL	Copy_String
 426+ 5776 53 45 54 20 >			DZ	"SET "
 426+ 577A 00          >
 427+ 577B 7B           			LD	A,E
 428+ 577C C6 30        			ADD	A,'0'
 429+ 577E              			CHAR	A
 429+ 577E FD 77 00    >			LD	(IY+0), A
 429+ 5781 FD 23       >			INC	IY
 430+ 5783              			CHAR	","
 430+ 5783 FD 36 00 2C >			LD	(IY+0), ","
 430+ 5787 FD 23       >			INC	IY
 431+ 5789              			TEXTINS	DTable_R, D
 431+ 5789 7A          >			LD 	A, D
 431+ 578A             >			TEXTINM	DTable_R, Copy_String_Index_S
 431+ 578A D9          >			EXX
 431+ 578B 21 78 59    >			LD	HL, DTable_R
 431+ 578E CD CA 58    >			CALL	Copy_String_Index_S
 431+ 5791 D9          >			EXX
 432+ 5792 C9           			RET
 433+ 5793
 434+ 5793 78           Disassemble_Op_ED:	LD	A,B
 435+ 5794 E6 C0        			AND	0b11000000		; Get the X value
 436+ 5796 FE 80        			CP	0b10000000
 436+ 5798 CA AC 58       JP Z, Disassemble_Op_ED_X2
 437+ 579B FE 40        			CP	0b01000000
 437+ 579D CA A1 57       JP Z, Disassemble_Op_ED_X1
 438+ 57A0 C9           			RET
 439+ 57A1 7A           Disassemble_Op_ED_X1:	LD 	A,D			; Get Z
 440+ 57A2 FE 07        			CP	7
 440+ 57A4 CA A2 58       JP	Z, Disassemble_Op_ED_X1Z7
 441+ 57A7 FE 06        			CP	6
 441+ 57A9 CA 91 58       JP	Z, Disassemble_Op_ED_X1Z6
 442+ 57AC FE 05        			CP	5
 442+ 57AE CA 7A 58       JP	Z, Disassemble_Op_ED_X1Z5
 443+ 57B1 FE 04        			CP 	4
 443+ 57B3 CA 72 58       JP	Z, Disassemble_Op_ED_X1Z4
 444+ 57B6 FE 03        			CP	3
 444+ 57B8 CA 3E 58       JP	Z, Disassemble_Op_ED_X1Z3
 445+ 57BB FE 02        			CP	2
 445+ 57BD CA 10 58       JP	Z, Disassemble_Op_ED_X1Z2
 446+ 57C0 FE 01        			CP	1
 446+ 57C2 CA EE 57       JP	Z, Disassemble_Op_ED_X1Z1
 447+ 57C5
 448+ 57C5 7B           			LD	A,E
 449+ 57C6 FE 06        			CP	6
 450+ 57C8 28 19        			JR 	Z, 1F
 451+ 57CA              			TEXT 	"IN "
 451+ 57CA CD C2 58    >			CALL	Copy_String
 451+ 57CD 49 4E 20 00 >			DZ	"IN "
 452+ 57D1              			TEXTINS	DTable_R, E
 452+ 57D1 7B          >			LD 	A, E
 452+ 57D2             >			TEXTINM	DTable_R, Copy_String_Index_S
 452+ 57D2 D9          >			EXX
 452+ 57D3 21 78 59    >			LD	HL, DTable_R
 452+ 57D6 CD CA 58    >			CALL	Copy_String_Index_S
 452+ 57D9 D9          >			EXX
 453+ 57DA              			TEXT	",(C)"
 453+ 57DA CD C2 58    >			CALL	Copy_String
 453+ 57DD 2C 28 43 29 >			DZ	",(C)"
 453+ 57E1 00          >
 454+ 57E2 C9           			RET
 455+ 57E3              1:			TEXT	"IN (C)"
 455+ 57E3 CD C2 58    >			CALL	Copy_String
 455+ 57E6 49 4E 20 28 >			DZ	"IN (C)"
 455+ 57EA 43 29 00    >
 456+ 57ED C9           			RET
 457+ 57EE
 458+ 57EE              Disassemble_Op_ED_X1Z1:	TEXT 	"OUT (C),"
 458+ 57EE CD C2 58    >			CALL	Copy_String
 458+ 57F1 4F 55 54 20 >			DZ	"OUT (C),"
 458+ 57F5 28 43 29 2C >
 458+ 57F9 00          >
 459+ 57FA 7B           			LD	A,E
 460+ 57FB FE 06        			CP	6
 461+ 57FD 28 0A        			JR 	Z, 1F
 462+ 57FF              			TEXTINS	DTable_R, E
 462+ 57FF 7B          >			LD 	A, E
 462+ 5800             >			TEXTINM	DTable_R, Copy_String_Index_S
 462+ 5800 D9          >			EXX
 462+ 5801 21 78 59    >			LD	HL, DTable_R
 462+ 5804 CD CA 58    >			CALL	Copy_String_Index_S
 462+ 5807 D9          >			EXX
 463+ 5808 C9           			RET
 464+ 5809              1:			CHAR	"0"
 464+ 5809 FD 36 00 30 >			LD	(IY+0), "0"
 464+ 580D FD 23       >			INC	IY
 465+ 580F C9           			RET
 466+ 5810
 467+ 5810 CB 58        Disassemble_Op_ED_X1Z2:	BIT	3,B
 468+ 5812 20 15        			JR	NZ, 1F
 469+ 5814              			TEXT	"SBC HL,"		; Q = 0
 469+ 5814 CD C2 58    >			CALL	Copy_String
 469+ 5817 53 42 43 20 >			DZ	"SBC HL,"
 469+ 581B 48 4C 2C 00 >
 470+ 581F              			TEXTINS	DTable_RP1, C
 470+ 581F 79          >			LD 	A, C
 470+ 5820             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 470+ 5820 D9          >			EXX
 470+ 5821 21 C3 59    >			LD	HL, DTable_RP1
 470+ 5824 CD CA 58    >			CALL	Copy_String_Index_S
 470+ 5827 D9          >			EXX
 471+ 5828 C9           			RET
 472+ 5829              1:			TEXT	"ADC HL,"		; Q = 1
 472+ 5829 CD C2 58    >			CALL	Copy_String
 472+ 582C 41 44 43 20 >			DZ	"ADC HL,"
 472+ 5830 48 4C 2C 00 >
 473+ 5834              			TEXTINS	DTable_RP1, C
 473+ 5834 79          >			LD 	A, C
 473+ 5835             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 473+ 5835 D9          >			EXX
 473+ 5836 21 C3 59    >			LD	HL, DTable_RP1
 473+ 5839 CD CA 58    >			CALL	Copy_String_Index_S
 473+ 583C D9          >			EXX
 474+ 583D C9           			RET
 475+ 583E
 476+ 583E CB 58        Disassemble_Op_ED_X1Z3: BIT	3,B
 477+ 5840 20 16        			JR	NZ, 1F
 478+ 5842              			TEXT	"LD (?W),"		; Q = 0
 478+ 5842 CD C2 58    >			CALL	Copy_String
 478+ 5845 4C 44 20 28 >			DZ	"LD (?W),"
 478+ 5849 3F 57 29 2C >
 478+ 584D 00          >
 479+ 584E              			TEXTINS	DTable_RP1, C
 479+ 584E 79          >			LD 	A, C
 479+ 584F             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 479+ 584F D9          >			EXX
 479+ 5850 21 C3 59    >			LD	HL, DTable_RP1
 479+ 5853 CD CA 58    >			CALL	Copy_String_Index_S
 479+ 5856 D9          >			EXX
 480+ 5857 C9           			RET
 481+ 5858              1:			TEXT	"LD "			; Q = 1
 481+ 5858 CD C2 58    >			CALL	Copy_String
 481+ 585B 4C 44 20 00 >			DZ	"LD "
 482+ 585F              			TEXTINS	DTable_RP1, C
 482+ 585F 79          >			LD 	A, C
 482+ 5860             >			TEXTINM	DTable_RP1, Copy_String_Index_S
 482+ 5860 D9          >			EXX
 482+ 5861 21 C3 59    >			LD	HL, DTable_RP1
 482+ 5864 CD CA 58    >			CALL	Copy_String_Index_S
 482+ 5867 D9          >			EXX
 483+ 5868              			TEXT	",(?W)"
 483+ 5868 CD C2 58    >			CALL	Copy_String
 483+ 586B 2C 28 3F 57 >			DZ	",(?W)"
 483+ 586F 29 00       >
 484+ 5871 C9           			RET
 485+ 5872
 486+ 5872              Disassemble_Op_ED_X1Z4:	TEXT	"NEG"
 486+ 5872 CD C2 58    >			CALL	Copy_String
 486+ 5875 4E 45 47 00 >			DZ	"NEG"
 487+ 5879 C9           			RET
 488+ 587A
 489+ 587A 7B           Disassemble_Op_ED_X1Z5:	LD	A,E
 490+ 587B FE 01        			CP	1
 491+ 587D 28 09        			JR	Z,1F
 492+ 587F              			TEXT	"RETN"
 492+ 587F CD C2 58    >			CALL	Copy_String
 492+ 5882 52 45 54 4E >			DZ	"RETN"
 492+ 5886 00          >
 493+ 5887 C9           			RET
 494+ 5888              1:			TEXT	"RETI"
 494+ 5888 CD C2 58    >			CALL	Copy_String
 494+ 588B 52 45 54 49 >			DZ	"RETI"
 494+ 588F 00          >
 495+ 5890 C9           			RET
 496+ 5891
 497+ 5891              Disassemble_Op_ED_X1Z6:	TEXT	"IM "
 497+ 5891 CD C2 58    >			CALL	Copy_String
 497+ 5894 49 4D 20 00 >			DZ	"IM "
 498+ 5898              			TEXTIN	DTable_IM, E
 498+ 5898 7B          >			LD 	A, E
 498+ 5899             >			TEXTINM	DTable_IM, Copy_String_Index
 498+ 5899 D9          >			EXX
 498+ 589A 21 6E 5A    >			LD	HL, DTable_IM
 498+ 589D CD E3 58    >			CALL	Copy_String_Index
 498+ 58A0 D9          >			EXX
 499+ 58A1 C9           			RET
 500+ 58A2
 501+ 58A2              Disassemble_Op_ED_X1Z7:	TEXTIN	DTable_O2, E
 501+ 58A2 7B          >			LD 	A, E
 501+ 58A3             >			TEXTINM	DTable_O2, Copy_String_Index
 501+ 58A3 D9          >			EXX
 501+ 58A4 21 04 5B    >			LD	HL, DTable_O2
 501+ 58A7 CD E3 58    >			CALL	Copy_String_Index
 501+ 58AA D9          >			EXX
 502+ 58AB C9           			RET
 503+ 58AC
 504+ 58AC 7A           Disassemble_Op_ED_X2:	LD	A,D 			; If z > 4 then invalid instruction
 505+ 58AD FE 04        			CP	4
 506+ 58AF D8           			RET	C
 507+ 58B0 7B           			LD	A,E			; If y > 4 then invalid instruction
 508+ 58B1 D6 04        			SUB	4
 509+ 58B3 D8           			RET	C
 510+ 58B4 CB 27        			SLA	A
 511+ 58B6 CB 27        			SLA	A
 512+ 58B8 82           			ADD	A,D
 513+ 58B9              			TEXTINA	DTable_BLI		; BLI[z+4(y-4)]
 513+ 58B9             >			TEXTINM	DTable_BLI, Copy_String_Index
 513+ 58B9 D9          >			EXX
 513+ 58BA 21 80 5A    >			LD	HL, DTable_BLI
 513+ 58BD CD E3 58    >			CALL	Copy_String_Index
 513+ 58C0 D9          >			EXX
 514+ 58C1 C9           			RET
 515+ 58C2
 516+ 58C2              ; Copy a zero terminated string
 517+ 58C2              ; String text placed directly after call
 518+ 58C2              ; IY: Destination
 519+ 58C2              ;
 520+ 58C2 D9           Copy_String:		EXX
 521+ 58C3 E3           			EX	(SP),HL
 522+ 58C4 CD F2 58     			CALL	Copy_String_1
 523+ 58C7 E3           			EX	(SP),HL
 524+ 58C8 D9           			EXX
 525+ 58C9 C9           			RET
 526+ 58CA
 527+ 58CA              ; Copy a zero terminated string indirectly from a table
 528+ 58CA              ; IY: Destination
 529+ 58CA              ; HL: Table to index into
 530+ 58CA              ;  A: Index into table
 531+ 58CA              ; Returns:
 532+ 58CA              ; HL: Pointer to zero-terminated string
 533+ 58CA              ;
 534+ 58CA E5           Copy_String_Index_S:	PUSH	HL
 535+ 58CB 6F           			LD	L,A
 536+ 58CC DD 7E 07     			LD	A,(IX+7)
 537+ 58CF
 538+ 58CF FE DD        			CP	0xDD
 539+ 58D1 20 05        			JR	NZ,1F
 540+ 58D3 3E 08        			LD	A,8
 541+ 58D5 85           			ADD	A,L
 542+ 58D6 18 0A        			JR	5F
 543+ 58D8
 544+ 58D8 FE FD        1:			CP	0xFD
 545+ 58DA 20 05        			JR	NZ,2F
 546+ 58DC 3E 10        			LD	A,16
 547+ 58DE 85           			ADD	A,L
 548+ 58DF 18 01        			JR	5F
 549+ 58E1
 550+ 58E1 7D           2:			LD	A,L
 551+ 58E2 E1           5:			POP	HL
 552+ 58E3
 553+ 58E3 E5           Copy_String_Index:	PUSH	HL			; Store the address of the table
 554+ 58E4 85           			ADD	A,L			; Add the index to it
 555+ 58E5 6F           			LD	L,A
 556+ 58E6 7C           			LD	A,H
 557+ 58E7 CE 00        			ADC	A,0
 558+ 58E9 67           			LD 	H,A
 559+ 58EA 7E           			LD	A,(HL)			; Fetch the relative address of the string to this table
 560+ 58EB E1           			POP	HL			; Pop the address of the table
 561+ 58EC 85           			ADD	A,L			; Add the relative address to this
 562+ 58ED 6F           			LD	L,A
 563+ 58EE 7C           			LD	A,H
 564+ 58EF CE 00        			ADC	A,0
 565+ 58F1 67           			LD 	H,A
 566+ 58F2
 567+ 58F2              ; Copy a zero terminated string from a memory address
 568+ 58F2              ; IY: Destination
 569+ 58F2              ; HL: Source
 570+ 58F2              ;
 571+ 58F2 7E           Copy_String_1:		LD 	A,(HL)
 572+ 58F3 FE 3F        			CP 	"?"
 573+ 58F5 20 14        			JR 	NZ,1F
 574+ 58F7 23           			INC	HL
 575+ 58F8 7E           			LD 	A,(HL)
 576+ 58F9 23           			INC	HL
 577+ 58FA FE 42        			CP	"B"
 577+ 58FC CA 15 59       JP	Z,Copy_String_B
 578+ 58FF FE 57        			CP	"W"
 578+ 5901 CA 21 59       JP Z,Copy_String_W
 579+ 5904 FE 52        			CP	"R"
 579+ 5906 CA 42 59       JP Z,Copy_String_R
 580+ 5909 18 03        			JR	2F
 581+ 590B FD 77 00     1:			LD	(IY+0),A
 582+ 590E 23           2:			INC 	HL
 583+ 590F B7           			OR	A
 584+ 5910 C8           			RET	Z
 585+ 5911 FD 23        			INC	IY
 586+ 5913 18 DD        			JR	Copy_String_1
 587+ 5915
 588+ 5915 DD 34 02     Copy_String_B:		INC	(IX+2)
 589+ 5918 D9           			EXX
 590+ 5919 7E           			LD	A,(HL)
 590+ 591A 23             INC HL
 591+ 591B D9           			EXX
 592+ 591C CD 61 59     			CALL	Copy_Hex8
 593+ 591F 18 D1        			JR	Copy_String_1
 594+ 5921
 595+ 5921 DD 34 02     Copy_String_W:		INC	(IX+2)
 596+ 5924 DD 34 02     			INC	(IX+2)
 597+ 5927 E5           			PUSH 	HL
 598+ 5928 D9           			EXX
 599+ 5929 7E           			LD	A,(HL)
 599+ 592A DD 77 03       LD (IX+3),A
 599+ 592D 23             INC HL
 600+ 592E 7E           			LD	A,(HL)
 600+ 592F DD 77 04       LD (IX+4),A
 600+ 5932 23             INC HL
 601+ 5933 D9           			EXX
 602+ 5934 DD 7E 03     			LD	A,(IX+3)
 602+ 5937 6F             LD L,A
 603+ 5938 DD 7E 04     			LD	A,(IX+4)
 603+ 593B 67             LD H,A
 604+ 593C CD 5C 59     			CALL	Copy_Hex16
 605+ 593F E1           			POP	HL
 606+ 5940 18 B0        			JR 	Copy_String_1
 607+ 5942
 608+ 5942 DD 34 02     Copy_String_R:		INC	(IX+2)
 609+ 5945 E5           			PUSH	HL
 610+ 5946 D9           			EXX
 611+ 5947 7E           			LD	A,(HL)
 611+ 5948 23             INC HL
 612+ 5949 E5           			PUSH	HL
 613+ 594A D9           			EXX
 614+ 594B E1           			POP	HL
 615+ 594C              			ADD_HL_A_SIGNED
 615+ 594C B7          >			OR A
 615+ 594D F2 51 59    >			JP P, .S1
 615+ 5950 25          >			DEC H
 615+ 5951 85          >.S1			ADD A, L
 615+ 5952 6F          >			LD L, A
 615+ 5953 8C          >			ADC A, H
 615+ 5954 95          >			SUB L
 615+ 5955 67          >			LD H, A
 616+ 5956 CD 5C 59     			CALL	Copy_Hex16
 617+ 5959 E1           			POP	HL
 618+ 595A 18 96        			JR	Copy_String_1
 619+ 595C
 620+ 595C              ; Copy a 16-bit HEX number to a buffer
 621+ 595C              ; IY: Address of buffer
 622+ 595C              ; HL: Number to print
 623+ 595C              ;
 624+ 595C 7C           Copy_Hex16:		LD A,H
 625+ 595D CD 61 59     			CALL Copy_Hex8
 626+ 5960 7D           			LD A,L
 627+ 5961
 628+ 5961              ; Copy an 8-bit HEX number into a buffer
 629+ 5961              ; IY: Address of buffer
 630+ 5961              ;  A: Number to print
 631+ 5961              ;
 632+ 5961 F5           Copy_Hex8:		PUSH AF
 633+ 5962 1F           			RRA
 634+ 5963 1F           			RRA
 635+ 5964 1F           			RRA
 636+ 5965 1F           			RRA
 637+ 5966 CD 6A 59     			CALL 1F
 638+ 5969 F1           			POP AF
 639+ 596A E6 0F        1:			AND 0x0F
 640+ 596C C6 90        			ADD A,0x90
 641+ 596E 27           			DAA
 642+ 596F CE 40        			ADC A,0x40
 643+ 5971 27           			DAA
 644+ 5972 FD 77 00     			LD (IY+0),A
 645+ 5975 FD 23        			INC IY
 646+ 5977 C9           			RET
 647+ 5978
 648+ 5978              ; 8-Bit registers
 649+ 5978              ;
 650+ 5978 18 1A 1C 1E  DTable_R:		DB	DTable_R0-DTable_R, DTable_R1-DTable_R, DTable_R2-DTable_R, DTable_R3-DTable_R
 651+ 597C 20 22 24 29  			DB	DTable_R4-DTable_R, DTable_R5-DTable_R, DTable_R6-DTable_R, DTable_R7-DTable_R
 652+ 5980 18 1A 1C 1E  			DB	DTable_R0-DTable_R, DTable_R1-DTable_R, DTable_R2-DTable_R, DTable_R3-DTable_R
 653+ 5984 2B 2F 33 29  			DB	DTable_R8-DTable_R, DTable_R9-DTable_R, DTable_RA-DTable_R, DTable_R7-DTable_R
 654+ 5988 18 1A 1C 1E  			DB	DTable_R0-DTable_R, DTable_R1-DTable_R, DTable_R2-DTable_R, DTable_R3-DTable_R
 655+ 598C 3B 3F 43 29  			DB	DTable_RB-DTable_R, DTable_RC-DTable_R, DTable_RD-DTable_R, DTable_R7-DTable_R
 656+ 5990 42 00        DTable_R0:		DZ	"B"
 657+ 5992 43 00        DTable_R1:		DZ	"C"
 658+ 5994 44 00        DTable_R2:		DZ	"D"
 659+ 5996 45 00        DTable_R3:		DZ	"E"
 660+ 5998 48 00        DTable_R4:		DZ	"H"
 661+ 599A 4C 00        DTable_R5:		DZ	"L"
 662+ 599C 28 48 4C 29  DTable_R6:		DZ	"(HL)"
 662+ 59A0 00
 663+ 59A1 41 00        DTable_R7:		DZ	"A"
 664+ 59A3 49 58 48 00  DTable_R8:		DZ 	"IXH"
 665+ 59A7 49 58 4C 00  DTable_R9:		DZ	"IXL"
 666+ 59AB 28 49 58 2B  DTable_RA:		DZ	"(IX+?B)"
 666+ 59AF 3F 42 29 00
 667+ 59B3 49 59 48 00  DTable_RB:		DZ 	"IYH"
 668+ 59B7 49 59 4C 00  DTable_RC:		DZ	"IYL"
 669+ 59BB 28 49 59 2B  DTable_RD:		DZ	"(IY+?B)"
 669+ 59BF 3F 42 29 00
 670+ 59C3
 671+ 59C3              ; 16-Bit Registers
 672+ 59C3              ;
 673+ 59C3 18 1B 1E 21  DTable_RP1:		DB	DTable_RP10-DTable_RP1, DTable_RP11-DTable_RP1, DTable_RP12-DTable_RP1, DTable_RP13-DTable_RP1
 674+ 59C7 18 1B 27 21  			DB	DTable_RP10-DTable_RP1, DTable_RP11-DTable_RP1, DTable_RP24-DTable_RP1, DTable_RP13-DTable_RP1
 675+ 59CB 18 1B 2A 21  			DB	DTable_RP10-DTable_RP1, DTable_RP11-DTable_RP1, DTable_RP25-DTable_RP1, DTable_RP13-DTable_RP1
 676+ 59CF
 677+ 59CF 0C 0F 12 18  DTable_RP2:		DB	DTable_RP10-DTable_RP2, DTable_RP11-DTable_RP2, DTable_RP12-DTable_RP2, DTable_RP23-DTable_RP2
 678+ 59D3 0C 0F 1B 18  			DB	DTable_RP10-DTable_RP2, DTable_RP11-DTable_RP2, DTable_RP24-DTable_RP2, DTable_RP23-DTable_RP2
 679+ 59D7 0C 0F 1E 18  			DB	DTable_RP10-DTable_RP2, DTable_RP11-DTable_RP2, DTable_RP25-DTable_RP2, DTable_RP23-DTable_RP2
 680+ 59DB 42 43 00     DTable_RP10:		DZ	"BC"
 681+ 59DE 44 45 00     DTable_RP11:		DZ	"DE"
 682+ 59E1 48 4C 00     DTable_RP12:		DZ	"HL"
 683+ 59E4 53 50 00     DTable_RP13:		DZ	"SP"
 684+ 59E7 41 46 00     DTable_RP23:		DZ	"AF"
 685+ 59EA 49 58 00     DTable_RP24:		DZ	"IX"
 686+ 59ED 49 59 00     DTable_RP25:		DZ	"IY"
 687+ 59F0
 688+ 59F0              ; Condition codes
 689+ 59F0              ;
 690+ 59F0 08 0B 0D 10  DTable_CC:		DB	DTable_CC0-DTable_CC, DTable_CC1-DTable_CC, DTable_CC2-DTable_CC, DTable_CC3-DTable_CC
 691+ 59F4 12 15 18 1A  			DB	DTable_CC4-DTable_CC, DTable_CC5-DTable_CC, DTable_CC6-DTable_CC, DTable_CC7-DTable_CC
 692+ 59F8 4E 5A 00     DTable_CC0:		DZ	"NZ"
 693+ 59FB 5A 00        DTable_CC1:		DZ	"Z"
 694+ 59FD 4E 43 00     DTable_CC2:		DZ	"NC"
 695+ 5A00 43 00        DTable_CC3:		DZ 	"C"
 696+ 5A02 50 4F 00     DTable_CC4:		DZ 	"PO"
 697+ 5A05 50 45 00     DTable_CC5:		DZ 	"PE"
 698+ 5A08 50 00        DTable_CC6:		DZ 	"P"
 699+ 5A0A 4D 00        DTable_CC7:		DZ 	"M"
 700+ 5A0C
 701+ 5A0C              ; Arithmetic Operations
 702+ 5A0C              ;
 703+ 5A0C 08 0F 16 1B  DTable_ALU:		DB 	DTable_ALU0-DTable_ALU, DTable_ALU1-DTable_ALU, DTable_ALU2-DTable_ALU, DTable_ALU3-DTable_ALU
 704+ 5A10 22 27 2C 30  			DB 	DTable_ALU4-DTable_ALU, DTable_ALU5-DTable_ALU, DTable_ALU6-DTable_ALU, DTable_ALU7-DTable_ALU
 705+ 5A14 41 44 44 20  DTable_ALU0:		DZ 	"ADD A,"
 705+ 5A18 41 2C 00
 706+ 5A1B 41 44 43 20  DTable_ALU1:		DZ	"ADC A,"
 706+ 5A1F 41 2C 00
 707+ 5A22 53 55 42 20  DTable_ALU2:		DZ	"SUB "
 707+ 5A26 00
 708+ 5A27 53 42 43 20  DTable_ALU3:		DZ	"SBC A,"
 708+ 5A2B 41 2C 00
 709+ 5A2E 41 4E 44 20  DTable_ALU4:		DZ	"AND "
 709+ 5A32 00
 710+ 5A33 58 4F 52 20  DTable_ALU5:		DZ	"XOR "
 710+ 5A37 00
 711+ 5A38 4F 52 20 00  DTable_ALU6:		DZ	"OR "
 712+ 5A3C 43 50 20 00  DTable_ALU7:		DZ	"CP "
 713+ 5A40
 714+ 5A40              ; Shift and rotate operations
 715+ 5A40              ;
 716+ 5A40 08 0D 12 16  DTable_ROT:		DB	DTable_ROT0-DTable_ROT, DTable_ROT1-DTable_ROT, DTable_ROT2-DTable_ROT, DTable_ROT3-DTable_ROT
 717+ 5A44 1A 1F 24 29  			DB	DTable_ROT4-DTable_ROT, DTable_ROT5-DTable_ROT, DTable_ROT6-DTable_ROT, DTable_ROT7-DTable_ROT
 718+ 5A48 52 4C 43 20  DTable_ROT0:		DZ	"RLC "
 718+ 5A4C 00
 719+ 5A4D 52 52 43 20  DTable_ROT1:		DZ	"RRC "
 719+ 5A51 00
 720+ 5A52 52 4C 20 00  DTable_ROT2:		DZ	"RL "
 721+ 5A56 52 52 20 00  DTable_ROT3:		DZ	"RR "
 722+ 5A5A 53 4C 41 20  DTable_ROT4:		DZ	"SLA "
 722+ 5A5E 00
 723+ 5A5F 53 52 41 20  DTable_ROT5:		DZ	"SRA "
 723+ 5A63 00
 724+ 5A64 53 4C 4C 20  DTable_ROT6:		DZ	"SLL "
 724+ 5A68 00
 725+ 5A69 53 52 4C 20  DTable_ROT7:		DZ	"SRL "
 725+ 5A6D 00
 726+ 5A6E
 727+ 5A6E              ; Interrupt modes
 728+ 5A6E              ;
 729+ 5A6E 08 0A 0E 10  DTable_IM:		DB	DTable_IM0-DTable_IM, DTable_IM1-DTable_IM, DTable_IM2-DTable_IM, DTable_IM3-DTable_IM
 730+ 5A72 08 0A 0E 10  			DB	DTable_IM0-DTable_IM, DTable_IM1-DTable_IM, DTable_IM2-DTable_IM, DTable_IM3-DTable_IM
 731+ 5A76 30 00        DTable_IM0:		DZ	"0"
 732+ 5A78 30 2F 31 00  DTable_IM1:		DZ	"0/1"
 733+ 5A7C 31 00        DTable_IM2:		DZ	"1"
 734+ 5A7E 32 00        DTable_IM3:		DZ	"2"
 735+ 5A80
 736+ 5A80              ; Block instructions
 737+ 5A80              ;
 738+ 5A80 10 14 18 1C  DTable_BLI:		DB	DTable_BLI00-DTable_BLI, DTable_BLI01-DTable_BLI, DTable_BLI02-DTable_BLI, DTable_BLI03-DTable_BLI
 739+ 5A84 21 25 29 2D  			DB	DTable_BLI10-DTable_BLI, DTable_BLI11-DTable_BLI, DTable_BLI12-DTable_BLI, DTable_BLI13-DTable_BLI
 740+ 5A88 32 37 3C 41  			DB	DTable_BLI20-DTable_BLI, DTable_BLI21-DTable_BLI, DTable_BLI22-DTable_BLI, DTable_BLI23-DTable_BLI
 741+ 5A8C 46 4B 50 55  			DB	DTable_BLI30-DTable_BLI, DTable_BLI31-DTable_BLI, DTable_BLI32-DTable_BLI, DTable_BLI33-DTable_BLI
 742+ 5A90 4C 44 49 00  DTable_BLI00:		DZ	"LDI"
 743+ 5A94 43 50 49 00  DTable_BLI01:		DZ	"CPI"
 744+ 5A98 49 4E 49 00  DTable_BLI02:		DZ	"INI"
 745+ 5A9C 4F 55 54 49  DTable_BLI03:		DZ	"OUTI"
 745+ 5AA0 00
 746+ 5AA1 4C 44 44 00  DTable_BLI10:		DZ	"LDD"
 747+ 5AA5 43 50 44 00  DTable_BLI11:		DZ	"CPD"
 748+ 5AA9 49 4E 44 00  DTable_BLI12:		DZ	"IND"
 749+ 5AAD 4F 55 54 44  DTable_BLI13:		DZ	"OUTD"
 749+ 5AB1 00
 750+ 5AB2 4C 44 49 52  DTable_BLI20:		DZ	"LDIR"
 750+ 5AB6 00
 751+ 5AB7 43 50 49 52  DTable_BLI21:		DZ	"CPIR"
 751+ 5ABB 00
 752+ 5ABC 49 4E 49 52  DTable_BLI22:		DZ	"INIR"
 752+ 5AC0 00
 753+ 5AC1 4F 54 49 52  DTable_BLI23:		DZ	"OTIR"
 753+ 5AC5 00
 754+ 5AC6 4C 44 44 52  DTable_BLI30:		DZ	"LDDR"
 754+ 5ACA 00
 755+ 5ACB 43 50 44 52  DTable_BLI31:		DZ	"CPDR"
 755+ 5ACF 00
 756+ 5AD0 49 4E 44 52  DTable_BLI32:		DZ	"INDR"
 756+ 5AD4 00
 757+ 5AD5 4F 54 44 52  DTable_BLI33:		DZ	"OTDR"
 757+ 5AD9 00
 758+ 5ADA
 759+ 5ADA 08 0D 12 16  DTable_O1:		DB	DTable_O10-DTable_O1, DTable_O11-DTable_O1, DTable_O12-DTable_O1, DTable_O13-DTable_O1
 760+ 5ADE 1A 1E 22 26  			DB	DTable_O14-DTable_O1, DTable_O15-DTable_O1, DTable_O16-DTable_O1, DTable_O17-DTable_O1
 761+ 5AE2 52 4C 43 41  DTable_O10:		DZ	"RLCA"
 761+ 5AE6 00
 762+ 5AE7 52 52 43 41  DTable_O11:		DZ	"RRCA"
 762+ 5AEB 00
 763+ 5AEC 52 4C 41 00  DTable_O12:		DZ	"RLA"
 764+ 5AF0 52 52 41 00  DTable_O13:		DZ 	"RRA"
 765+ 5AF4 44 41 41 00  DTable_O14:		DZ 	"DAA"
 766+ 5AF8 43 50 4C 00  DTable_O15:		DZ 	"CPL"
 767+ 5AFC 53 43 46 00  DTable_O16: 		DZ	"SCF"
 768+ 5B00 43 43 46 00  DTable_O17:		DZ	"CCF"
 769+ 5B04
 770+ 5B04 08 0F 16 1D  DTable_O2:		DB	DTable_O20-DTable_O2, DTable_O21-DTable_O2, DTable_O22-DTable_O2, DTable_O23-DTable_O2
 771+ 5B08 24 28 2C 2C  			DB	DTable_O24-DTable_O2, DTable_O25-DTable_O2, DTable_O26-DTable_O2, DTable_O26-DTable_O2
 772+ 5B0C 4C 44 20 49  DTable_O20:		DZ	"LD I,A"
 772+ 5B10 2C 41 00
 773+ 5B13 4C 44 20 52  DTable_O21:		DZ	"LD R,A"
 773+ 5B17 2C 41 00
 774+ 5B1A 4C 44 20 41  DTable_O22:		DZ	"LD A,I"
 774+ 5B1E 2C 49 00
 775+ 5B21 4C 44 20 41  DTable_O23:		DZ 	"LD A,R"
 775+ 5B25 2C 52 00
 776+ 5B28 52 52 44 00  DTable_O24:		DZ 	"RRD"
 777+ 5B2C 52 4C 44 00  DTable_O25:		DZ 	"RLD"
 778+ 5B30 4E 4F 50 00  DTable_O26: 		DZ	"NOP"
 779+ 5B34
# file closed: disassembler.asm
  53  5B34                  include "memoryDump.asm"
# file opened: memoryDump.asm
   1+ 5B34
   2+ 5B34
   3+ 5B34
   4+ 5B34 21 03 FF     FN_Memory_Dump:         LD      HL,SYS_VARS_INPUT+1
   5+ 5B37 CD 4F 52                             CALL    Parse_Hex16
   6+ 5B3A 7E                                   LD      A,(HL)
   7+ 5B3B FE 2C                                CP      ','
   8+ 5B3D 20 0B                                JR      NZ,2F
   9+ 5B3F 23                                   INC     HL
  10+ 5B40 D5                                   PUSH    DE
  11+ 5B41 CD 4F 52                             CALL    Parse_Hex16
  12+ 5B44 E1                                   POP     HL
  13+ 5B45 7A                                   LD      A,D
  14+ 5B46 B3                                   OR      E
  15+ 5B47 C2 50 5B                             JP      NZ,Memory_Dump
  16+ 5B4A 21 3C 03     2:                      LD      HL,MSG_ERROR
  17+ 5B4D C3 9A 52                             JP      Print_String
  18+ 5B50
  19+ 5B50
  20+ 5B50
  21+ 5B50 CD 77 52     Memory_Dump:            CALL    Print_Hex16
  22+ 5B53 3E 3A                                LD      A,':'
  23+ 5B55 CD A3 52                             CALL    Print_Char
  24+ 5B58 3E 20                                LD      A,' '
  25+ 5B5A CD A3 52                             CALL    Print_Char
  26+ 5B5D 06 10                                LD      B,16
  27+ 5B5F DD 21 02 FF                          LD      IX,SYS_VARS_INPUT
  28+ 5B63 DD 36 00 20                          LD      (IX+0),' '
  29+ 5B67 7E           1:                      LD      A,(HL)
  30+ 5B68 F5                                   PUSH    AF
  31+ 5B69 FE 20                                CP      32
  32+ 5B6B 30 02                                JR      NC,2F
  33+ 5B6D 3E 2E                                LD      A,'.'
  34+ 5B6F DD 77 01     2:                      LD      (IX+1),A
  35+ 5B72 DD 23                                INC     IX
  36+ 5B74 F1                                   POP     AF
  37+ 5B75 CD 7C 52                             CALL    Print_Hex8
  38+ 5B78 23                                   INC     HL
  39+ 5B79 1B                                   DEC     DE
  40+ 5B7A 7A                                   LD      A,D
  41+ 5B7B B3                                   OR      E
  42+ 5B7C 28 0E                                JR      Z,3F
  43+ 5B7E CD B2 06                             CALL    Read_Char_NB
  44+ 5B81 FE 1B                                CP      0x1B
  45+ 5B83 28 07                                JR      Z,3F
  46+ 5B85 10 E0                                DJNZ    1B
  47+ 5B87 CD 9D 5B                             CALL    5F
  48+ 5B8A 18 C4                                JR      Memory_Dump
  49+ 5B8C
  50+ 5B8C 78           3:                      LD      A,B
  51+ 5B8D B7                                   OR      A
  52+ 5B8E 28 0D                                JR      Z,5F
  53+ 5B90 05                                   DEC     B
  54+ 5B91 28 0A                                JR      Z,5F
  55+ 5B93 3E 20                                LD      A,32
  56+ 5B95 CD A3 52     4:                      CALL    Print_Char
  57+ 5B98 CD A3 52                             CALL    Print_Char
  58+ 5B9B 10 F8                                DJNZ    4B
  59+ 5B9D
  60+ 5B9D DD 36 01 0D  5:                      LD      (IX+1),0x0D
  61+ 5BA1 DD 36 02 0A                          LD      (IX+2),0x0A
  62+ 5BA5 DD 36 03 00                          LD      (IX+3),0x00
  63+ 5BA9 E5                                   PUSH    HL
  64+ 5BAA 21 02 FF                             LD      HL,SYS_VARS_INPUT
  65+ 5BAD CD 9A 52                             CALL    Print_String
  66+ 5BB0 E1                                   POP     HL
  67+ 5BB1 C9                                   RET
  68+ 5BB2
# file closed: memoryDump.asm
# file closed: build.asm
